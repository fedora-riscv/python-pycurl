From 12c2cbae4fe422ddfd9600a6f31e058225e62588 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 8 Oct 2013 09:05:23 -0400
Subject: [PATCH 001/236] Update release process doc

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/release-process.rst |   13 +++++++------
 1 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/doc/release-process.rst b/doc/release-process.rst
index 71acb4b..60d93d2 100644
--- a/doc/release-process.rst
+++ b/doc/release-process.rst
@@ -13,13 +13,14 @@ Release Process
   - www/htdocs/index.php
 5. TODO: update setup_win32_ssl.py.
 6. Copy Changelog to www/htdocs.
-7. Rsync doc directory to www/htdocs.
+7. Rsync doc directory to www/htdocs: `rsync doc/*html www/htdocs/doc`
 8. python setup.py sdist
 9. Manually test install the built package.
 10. TODO: build windows packages.
 11. Tag the new version.
-12. Copy built source distribution to downloads repo on github.
-13. Rsync downloads repo to sourceforge.
-14. Rsync www/htdocs to sourceforge.
-15. Upload source distribution to pypi.
-16. Announce release on mailing list.
+12. Create new version on pypi: `python setup.py register`
+13. Upload source distribution to pypi: `python setup.py sdist upload`
+14. Copy built source distribution to downloads repo on github.
+15. Rsync downloads repo to sourceforge: `rsync -av * user@web.sourceforge.net:/home/project-web/pycurl/htdocs/download`
+16. Rsync www/htdocs to sourceforge: `rsync -av www/htdocs/ user@web.sourceforge.net:/home/project-web/pycurl/htdocs`
+17. Announce release on mailing list.
-- 
1.7.1


From ac4960b7ceeaef5cae372b4e2a74369c7b447790 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 8 Oct 2013 09:06:40 -0400
Subject: [PATCH 002/236] Rst syntax

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/release-process.rst |   30 ++++++++++++++++++++++++------
 1 files changed, 24 insertions(+), 6 deletions(-)

diff --git a/doc/release-process.rst b/doc/release-process.rst
index 60d93d2..408cf22 100644
--- a/doc/release-process.rst
+++ b/doc/release-process.rst
@@ -13,14 +13,32 @@ Release Process
   - www/htdocs/index.php
 5. TODO: update setup_win32_ssl.py.
 6. Copy Changelog to www/htdocs.
-7. Rsync doc directory to www/htdocs: `rsync doc/*html www/htdocs/doc`
-8. python setup.py sdist
+7. Rsync doc directory to www/htdocs::
+
+        rsync doc/*html www/htdocs/doc
+
+8. Build the source distribution::
+
+        python setup.py sdist
+
 9. Manually test install the built package.
 10. TODO: build windows packages.
 11. Tag the new version.
-12. Create new version on pypi: `python setup.py register`
-13. Upload source distribution to pypi: `python setup.py sdist upload`
+12. Create new version on pypi::
+
+        python setup.py register
+
+13. Upload source distribution to pypi::
+
+        python setup.py sdist upload
+
 14. Copy built source distribution to downloads repo on github.
-15. Rsync downloads repo to sourceforge: `rsync -av * user@web.sourceforge.net:/home/project-web/pycurl/htdocs/download`
-16. Rsync www/htdocs to sourceforge: `rsync -av www/htdocs/ user@web.sourceforge.net:/home/project-web/pycurl/htdocs`
+15. Rsync downloads repo to sourceforge::
+
+        rsync -av * user@web.sourceforge.net:/home/project-web/pycurl/htdocs/download
+
+16. Rsync www/htdocs to sourceforge::
+
+        rsync -av www/htdocs/ user@web.sourceforge.net:/home/project-web/pycurl/htdocs
+
 17. Announce release on mailing list.
-- 
1.7.1


From f986333345e2e9cdcb784539aac81b99a2351f6a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 8 Oct 2013 09:10:32 -0400
Subject: [PATCH 003/236] Rst syntax

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/release-process.rst |   16 ++++++++++------
 1 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/doc/release-process.rst b/doc/release-process.rst
index 408cf22..1501db2 100644
--- a/doc/release-process.rst
+++ b/doc/release-process.rst
@@ -4,13 +4,17 @@ Release Process
 1. Ensure changelog is up to date with commits in master.
 2. Check via tests/matrix.py that test suite passes on the following
    configurations:
-  - Python 2.4, 2.5, 2.6, 2.7.
-  - Minimum supported libcurl (currently 7.19.0).
-  - Most recent available libcurl (currently 7.32.0).
+
+   - Python 2.4, 2.5, 2.6, 2.7.
+   - Minimum supported libcurl (currently 7.19.0).
+   - Most recent available libcurl (currently 7.32.0).
+
 4. Update version numbers in:
-  - Changelog
-  - setup.py
-  - www/htdocs/index.php
+
+   - Changelog
+   - setup.py
+   - www/htdocs/index.php
+
 5. TODO: update setup_win32_ssl.py.
 6. Copy Changelog to www/htdocs.
 7. Rsync doc directory to www/htdocs::
-- 
1.7.1


From 87e7e528ec2c0f959a88ff063aeb4c707cb7c272 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 8 Oct 2013 09:16:39 -0400
Subject: [PATCH 004/236] Fix numbering

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/release-process.rst |   28 ++++++++++++++--------------
 1 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/doc/release-process.rst b/doc/release-process.rst
index 1501db2..4afe432 100644
--- a/doc/release-process.rst
+++ b/doc/release-process.rst
@@ -9,40 +9,40 @@ Release Process
    - Minimum supported libcurl (currently 7.19.0).
    - Most recent available libcurl (currently 7.32.0).
 
-4. Update version numbers in:
+3. Update version numbers in:
 
    - Changelog
    - setup.py
    - www/htdocs/index.php
 
-5. TODO: update setup_win32_ssl.py.
-6. Copy Changelog to www/htdocs.
-7. Rsync doc directory to www/htdocs::
+4. TODO: update setup_win32_ssl.py.
+5. Copy Changelog to www/htdocs.
+6. Rsync doc directory to www/htdocs::
 
         rsync doc/*html www/htdocs/doc
 
-8. Build the source distribution::
+7. Build the source distribution::
 
         python setup.py sdist
 
-9. Manually test install the built package.
-10. TODO: build windows packages.
-11. Tag the new version.
-12. Create new version on pypi::
+8. Manually test install the built package.
+9. TODO: build windows packages.
+10. Tag the new version.
+11. Create new version on pypi::
 
         python setup.py register
 
-13. Upload source distribution to pypi::
+12. Upload source distribution to pypi::
 
         python setup.py sdist upload
 
-14. Copy built source distribution to downloads repo on github.
-15. Rsync downloads repo to sourceforge::
+13. Copy built source distribution to downloads repo on github.
+14. Rsync downloads repo to sourceforge::
 
         rsync -av * user@web.sourceforge.net:/home/project-web/pycurl/htdocs/download
 
-16. Rsync www/htdocs to sourceforge::
+15. Rsync www/htdocs to sourceforge::
 
         rsync -av www/htdocs/ user@web.sourceforge.net:/home/project-web/pycurl/htdocs
 
-17. Announce release on mailing list.
+16. Announce release on mailing list.
-- 
1.7.1


From a518d37dd0c4c92965d745ed74d24001ac3b2d57 Mon Sep 17 00:00:00 2001
From: Oskari Saarenmaa <os@ohmu.fi>
Date: Sun, 13 Oct 2013 13:06:36 +0300
Subject: [PATCH 005/236] pycurl: make doc and version strings const and read-only

Signed-off-by: Oskari Saarenmaa <os@ohmu.fi>
Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   91 +++++++++++++++++++++++++++++++++++++++-------------------
 1 files changed, 61 insertions(+), 30 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 72bd00f..b700407 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -166,7 +166,7 @@ static void pycurl_ssl_cleanup(void);
     PYCURL_MEMGROUP_MULTI | PYCURL_MEMGROUP_SHARE)
 
 /* Keep some default variables around */
-static char *g_pycurl_useragent = "PycURL/" LIBCURL_VERSION;
+static const char g_pycurl_useragent [] = "PycURL/" LIBCURL_VERSION;
 
 /* Type objects */
 static PyObject *ErrorObject = NULL;
@@ -991,7 +991,7 @@ util_curl_init(CurlObject *self)
     }
 
     /* Set default USERAGENT */
-    res = curl_easy_setopt(self->handle, CURLOPT_USERAGENT, (char *) g_pycurl_useragent);
+    res = curl_easy_setopt(self->handle, CURLOPT_USERAGENT, g_pycurl_useragent);
     if (res != CURLE_OK) {
         return (-1);
     }
@@ -2551,7 +2551,8 @@ do_curl_pause(CurlObject *self, PyObject *args)
     }
 }
 
-static char co_pause_doc [] = "pause(bitmask) -> None.  "
+static const char co_pause_doc [] =
+    "pause(bitmask) -> None.  "
     "Pauses or unpauses a curl handle. Bitmask should be a value such as PAUSE_RECV or PAUSE_CONT.  "
     "Raises pycurl.error exception upon failure.\n";
 
@@ -3247,20 +3248,46 @@ do_multi_select(CurlMultiObject *self, PyObject *args)
 
 /* --------------- methods --------------- */
 
-static char cso_setopt_doc [] = "setopt(option, parameter) -> None.  Set curl share option.  Raises pycurl.error exception upon failure.\n";
-static char co_close_doc [] = "close() -> None.  Close handle and end curl session.\n";
-static char co_errstr_doc [] = "errstr() -> String.  Return the internal libcurl error buffer string.\n";
-static char co_getinfo_doc [] = "getinfo(info) -> Res.  Extract and return information from a curl session.  Raises pycurl.error exception upon failure.\n";
-static char co_perform_doc [] = "perform() -> None.  Perform a file transfer.  Raises pycurl.error exception upon failure.\n";
-static char co_setopt_doc [] = "setopt(option, parameter) -> None.  Set curl session option.  Raises pycurl.error exception upon failure.\n";
-static char co_unsetopt_doc [] = "unsetopt(option) -> None.  Reset curl session option to default value.  Raises pycurl.error exception upon failure.\n";
-static char co_reset_doc [] = "reset() -> None. Reset all options set on curl handle to default values, but preserves live connections, session ID cache, DNS cache, cookies, and shares.\n";
-
-static char co_multi_fdset_doc [] = "fdset() -> Tuple.  Returns a tuple of three lists that can be passed to the select.select() method .\n";
-static char co_multi_info_read_doc [] = "info_read([max_objects]) -> Tuple. Returns a tuple (number of queued handles, [curl objects]).\n";
-static char co_multi_select_doc [] = "select([timeout]) -> Int.  Returns result from doing a select() on the curl multi file descriptor with the given timeout.\n";
-static char co_multi_socket_action_doc [] = "socket_action(sockfd, ev_bitmask) -> Tuple.  Returns result from doing a socket_action() on the curl multi file descriptor with the given timeout.\n";
-static char co_multi_socket_all_doc [] = "socket_all() -> Tuple.  Returns result from doing a socket_all() on the curl multi file descriptor with the given timeout.\n";
+static const char cso_setopt_doc [] =
+    "setopt(option, parameter) -> None.  "
+    "Set curl share option.  Raises pycurl.error exception upon failure.\n";
+static const char co_close_doc [] =
+    "close() -> None.  "
+    "Close handle and end curl session.\n";
+static const char co_errstr_doc [] =
+    "errstr() -> String.  "
+    "Return the internal libcurl error buffer string.\n";
+static const char co_getinfo_doc [] =
+    "getinfo(info) -> Res.  "
+    "Extract and return information from a curl session.  Raises pycurl.error exception upon failure.\n";
+static const char co_perform_doc [] =
+    "perform() -> None.  "
+    "Perform a file transfer.  Raises pycurl.error exception upon failure.\n";
+static const char co_setopt_doc [] =
+    "setopt(option, parameter) -> None.  "
+    "Set curl session option.  Raises pycurl.error exception upon failure.\n";
+static const char co_unsetopt_doc [] =
+    "unsetopt(option) -> None.  "
+    "Reset curl session option to default value.  Raises pycurl.error exception upon failure.\n";
+static const char co_reset_doc [] =
+    "reset() -> None. "
+    "Reset all options set on curl handle to default values, but preserves live connections, session ID cache, DNS cache, cookies, and shares.\n";
+
+static const char co_multi_fdset_doc [] =
+    "fdset() -> Tuple.  "
+    "Returns a tuple of three lists that can be passed to the select.select() method .\n";
+static const char co_multi_info_read_doc [] =
+    "info_read([max_objects]) -> Tuple. "
+    "Returns a tuple (number of queued handles, [curl objects]).\n";
+static const char co_multi_select_doc [] =
+    "select([timeout]) -> Int.  "
+    "Returns result from doing a select() on the curl multi file descriptor with the given timeout.\n";
+static const char co_multi_socket_action_doc [] =
+    "socket_action(sockfd, ev_bitmask) -> Tuple.  "
+    "Returns result from doing a socket_action() on the curl multi file descriptor with the given timeout.\n";
+static const char co_multi_socket_all_doc [] =
+    "socket_all() -> Tuple.  "
+    "Returns result from doing a socket_all() on the curl multi file descriptor with the given timeout.\n";
 
 static PyMethodDef curlshareobject_methods[] = {
     {"setopt", (PyCFunction)do_curlshare_setopt, METH_VARARGS, cso_setopt_doc},
@@ -3605,23 +3632,27 @@ error:
 
 
 /* Per function docstrings */
-static char pycurl_global_init_doc [] =
-"global_init(option) -> None.  Initialize curl environment.\n";
+static const char pycurl_global_init_doc[] =
+    "global_init(option) -> None.  "
+    "Initialize curl environment.\n";
 
-static char pycurl_global_cleanup_doc [] =
-"global_cleanup() -> None.  Cleanup curl environment.\n";
+static const char pycurl_global_cleanup_doc[] =
+    "global_cleanup() -> None.  "
+    "Cleanup curl environment.\n";
 
-static char pycurl_version_info_doc [] =
-"version_info() -> tuple.  Returns a 12-tuple with the version info.\n";
+static const char pycurl_version_info_doc[] =
+    "version_info() -> tuple.  "
+    "Returns a 12-tuple with the version info.\n";
 
-static char pycurl_share_new_doc [] =
-"CurlShare() -> New CurlShare object.";
+static const char pycurl_share_new_doc[] =
+    "CurlShare() -> New CurlShare object.";
 
-static char pycurl_curl_new_doc [] =
-"Curl() -> New curl object.  Implicitly calls global_init() if not called.\n";
+static const char pycurl_curl_new_doc[] =
+    "Curl() -> New curl object.  "
+    "Implicitly calls global_init() if not called.\n";
 
-static char pycurl_multi_new_doc [] =
-"CurlMulti() -> New curl multi-object.\n";
+static const char pycurl_multi_new_doc[] =
+    "CurlMulti() -> New curl multi-object.\n";
 
 
 /* List of functions defined in this module */
@@ -3637,7 +3668,7 @@ static PyMethodDef curl_methods[] = {
 
 
 /* Module docstring */
-static char module_doc [] =
+static const char module_doc [] =
 "This module implements an interface to the cURL library.\n"
 "\n"
 "Types:\n"
-- 
1.7.1


From e7036c4fe019bd642b8140b27753802bf40d89f7 Mon Sep 17 00:00:00 2001
From: Oskari Saarenmaa <os@ohmu.fi>
Date: Sun, 13 Oct 2013 13:11:47 +0300
Subject: [PATCH 006/236] pycurl: make internal functions static

Signed-off-by: Oskari Saarenmaa <os@ohmu.fi>
Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   22 ++++++++++++----------
 1 files changed, 12 insertions(+), 10 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index b700407..11f3b17 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -716,7 +716,7 @@ share_lock_destroy(ShareLock *lock)
 }
 
 
-void
+static void
 share_lock_callback(CURL *handle, curl_lock_data data, curl_lock_access locktype, void *userptr)
 {
     CurlShareObject *share = (CurlShareObject*)userptr;
@@ -724,7 +724,7 @@ share_lock_callback(CURL *handle, curl_lock_data data, curl_lock_access locktype
 }
 
 
-void
+static void
 share_unlock_callback(CURL *handle, curl_lock_data data, void *userptr)
 {
     CurlShareObject *share = (CurlShareObject*)userptr;
@@ -2665,11 +2665,12 @@ do_multi_traverse(CurlMultiObject *self, visitproc visit, void *arg)
 
 /* --------------- setopt --------------- */
 
-int multi_socket_callback(CURL *easy,
-                          curl_socket_t s,
-                          int what,
-                          void *userp,
-                          void *socketp)
+static int
+multi_socket_callback(CURL *easy,
+                      curl_socket_t s,
+                      int what,
+                      void *userp,
+                      void *socketp)
 {
     CurlMultiObject *self;
     CurlObject *easy_self;
@@ -2714,9 +2715,10 @@ verbose_error:
 }
 
 
-int multi_timer_callback(CURLM *multi,
-                         long timeout_ms,
-                         void *userp)
+static int
+multi_timer_callback(CURLM *multi,
+                     long timeout_ms,
+                     void *userp)
 {
     CurlMultiObject *self;
     PyObject *arglist;
-- 
1.7.1


From 77690d9131b45ff54cda0fe3a39fb6e2ca421fc0 Mon Sep 17 00:00:00 2001
From: crass <crass@berlios.de>
Date: Thu, 15 Aug 2013 14:17:00 -0500
Subject: [PATCH 007/236] Pass resolved (address, port) to opensocket callback.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c              |   68 ++++++++++++++++++++++++++++++++++++++++++++-
 tests/socket_open_test.py |    8 ++++-
 2 files changed, 73 insertions(+), 3 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 11f3b17..6981a10 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -48,6 +48,7 @@
 #include <stdio.h>
 #include <string.h>
 #include <limits.h>
+#include <arpa/inet.h>
 #include <curl/curl.h>
 #include <curl/easy.h>
 #include <curl/multi.h>
@@ -1321,6 +1322,71 @@ header_callback(char *ptr, size_t size, size_t nmemb, void *stream)
     return util_write_callback(1, ptr, size, nmemb, stream);
 }
 
+/* convert protocol address from C to python, returns a tuple of protocol
+   specific values */
+static PyObject *
+convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
+{
+    PyObject *resObj;
+    
+    switch (saddr->sa_family)
+    {
+    case AF_INET:
+        {
+            /* an IPv4 address string can't be longer than 15 bytes */
+            struct sockaddr_in* sin = (struct sockaddr_in*)saddr;
+            char *addr_str = (char *)PyMem_Malloc(16);
+            
+            if (addr_str == NULL) {
+                PyErr_SetString(ErrorObject, "Out of memory");
+                resObj = NULL;
+                goto error;
+            }
+            
+            if (inet_ntop(saddr->sa_family, &sin->sin_addr, addr_str, 16) == NULL) {
+                PyErr_SetFromErrno(ErrorObject);
+                PyMem_Free(addr_str);
+                goto error;
+            }
+            resObj = Py_BuildValue("(si)", addr_str, ntohs(sin->sin_port));
+            PyMem_Free(addr_str);
+       }
+        break;
+    case AF_INET6:
+        {
+            /* an IPv6 address string can't be longer than 39 bytes */
+            struct sockaddr_in6* sin6 = (struct sockaddr_in6*)saddr;
+            char *addr_str = (char *)PyMem_Malloc(40);
+            
+            if (addr_str == NULL) {
+                PyErr_SetString(ErrorObject, "Out of memory");
+                resObj = NULL;
+                goto error;
+            }
+            
+            if (inet_ntop(saddr->sa_family, &sin6->sin6_addr, addr_str, 40) == NULL) {
+                PyErr_SetFromErrno(ErrorObject);
+                PyMem_Free(addr_str);
+                goto error;
+            }
+            resObj = Py_BuildValue("(si)", addr_str, ntohs(sin6->sin6_port));
+            PyMem_Free(addr_str);
+        }
+        break;
+    default:
+        /* We (currently) only support IPv4/6 addresses.  Can curl even be used
+           with anything else? */
+	PyErr_SetString(ErrorObject, "Unsupported address family.");
+        resObj = NULL;
+    }
+    
+    if (resObj == NULL)
+        goto error;
+    
+error:
+    return resObj;
+}
+
 /* curl_socket_t is just an int on unix/windows (with limitations that
  * are not important here) */
 static curl_socket_t
@@ -1337,7 +1403,7 @@ opensocket_callback(void *clientp, curlsocktype purpose,
     self = (CurlObject *)clientp;
     PYCURL_ACQUIRE_THREAD();
     
-    arglist = Py_BuildValue("(iii)", address->family, address->socktype, address->protocol);
+    arglist = Py_BuildValue("(iiiN)", address->family, address->socktype, address->protocol, convert_protocol_address(&address->addr, address->addrlen));
     if (arglist == NULL)
         goto verbose_error;
 
diff --git a/tests/socket_open_test.py b/tests/socket_open_test.py
index 3b76318..e0b6176 100644
--- a/tests/socket_open_test.py
+++ b/tests/socket_open_test.py
@@ -16,12 +16,15 @@ from . import util
 setup_module, teardown_module = appmanager.setup(('app', 8380))
 
 socket_open_called = False
+socket_open_address = None
 
-def socket_open(family, socktype, protocol):
+def socket_open(family, socktype, protocol, address):
     global socket_open_called
+    global socket_open_address
     socket_open_called = True
+    socket_open_address = address
     
-    #print(family, socktype, protocol)
+    #print(family, socktype, protocol, address)
     s = socket.socket(family, socktype, protocol)
     s.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
     return s
@@ -41,4 +44,5 @@ class SocketOpenTest(unittest.TestCase):
         self.curl.perform()
         
         assert socket_open_called
+        self.assertEqual(("127.0.0.1", 8380), socket_open_address)
         self.assertEqual('success', sio.getvalue())
-- 
1.7.1


From 517361b076e7fa7cc6cdb4f27b409aa836c75c87 Mon Sep 17 00:00:00 2001
From: crass <crass@berlios.de>
Date: Thu, 26 Sep 2013 21:19:34 -0500
Subject: [PATCH 008/236] Use *_ADDRSTRLEN constants as opposed to literals.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   10 +++++-----
 1 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 6981a10..78fc8b1 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1335,7 +1335,7 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
         {
             /* an IPv4 address string can't be longer than 15 bytes */
             struct sockaddr_in* sin = (struct sockaddr_in*)saddr;
-            char *addr_str = (char *)PyMem_Malloc(16);
+            char *addr_str = (char *)PyMem_Malloc(INET_ADDRSTRLEN);
             
             if (addr_str == NULL) {
                 PyErr_SetString(ErrorObject, "Out of memory");
@@ -1343,7 +1343,7 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
                 goto error;
             }
             
-            if (inet_ntop(saddr->sa_family, &sin->sin_addr, addr_str, 16) == NULL) {
+            if (inet_ntop(saddr->sa_family, &sin->sin_addr, addr_str, INET_ADDRSTRLEN) == NULL) {
                 PyErr_SetFromErrno(ErrorObject);
                 PyMem_Free(addr_str);
                 goto error;
@@ -1354,9 +1354,9 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
         break;
     case AF_INET6:
         {
-            /* an IPv6 address string can't be longer than 39 bytes */
+            /* an IPv6 address string can't be longer than 45 bytes */
             struct sockaddr_in6* sin6 = (struct sockaddr_in6*)saddr;
-            char *addr_str = (char *)PyMem_Malloc(40);
+            char *addr_str = (char *)PyMem_Malloc(INET6_ADDRSTRLEN);
             
             if (addr_str == NULL) {
                 PyErr_SetString(ErrorObject, "Out of memory");
@@ -1364,7 +1364,7 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
                 goto error;
             }
             
-            if (inet_ntop(saddr->sa_family, &sin6->sin6_addr, addr_str, 40) == NULL) {
+            if (inet_ntop(saddr->sa_family, &sin6->sin6_addr, addr_str, INET6_ADDRSTRLEN) == NULL) {
                 PyErr_SetFromErrno(ErrorObject);
                 PyMem_Free(addr_str);
                 goto error;
-- 
1.7.1


From 596e07757643660a0ad1d791afc4da19833bec64 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 14 Oct 2013 14:29:07 -0400
Subject: [PATCH 009/236] Add includes that freebsd wants for inet_ntop

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    4 +++-
 1 files changed, 3 insertions(+), 1 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 78fc8b1..a552b2f 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -42,12 +42,14 @@
 #endif
 #include <Python.h>
 #include <pythread.h>
-#include <sys/types.h>
 #include <stddef.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
 #include <limits.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
 #include <arpa/inet.h>
 #include <curl/curl.h>
 #include <curl/easy.h>
-- 
1.7.1


From 42c637bd31c93aaaf3be89c4b2bd7a4888031b7a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 14 Oct 2013 14:34:30 -0400
Subject: [PATCH 010/236] Delete comments that are no longer applicable

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 --
 1 files changed, 0 insertions(+), 2 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index a552b2f..7619bf3 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1335,7 +1335,6 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
     {
     case AF_INET:
         {
-            /* an IPv4 address string can't be longer than 15 bytes */
             struct sockaddr_in* sin = (struct sockaddr_in*)saddr;
             char *addr_str = (char *)PyMem_Malloc(INET_ADDRSTRLEN);
             
@@ -1356,7 +1355,6 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
         break;
     case AF_INET6:
         {
-            /* an IPv6 address string can't be longer than 45 bytes */
             struct sockaddr_in6* sin6 = (struct sockaddr_in6*)saddr;
             char *addr_str = (char *)PyMem_Malloc(INET6_ADDRSTRLEN);
             
-- 
1.7.1


From 77f2ed90afcde6f76bc3dd0bc67eda13fc6c2b02 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 14 Oct 2013 19:16:47 -0400
Subject: [PATCH 011/236] Delete unneeded code

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 --
 1 files changed, 0 insertions(+), 2 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 7619bf3..40b22b0 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -2739,14 +2739,12 @@ multi_socket_callback(CURL *easy,
                       void *socketp)
 {
     CurlMultiObject *self;
-    CurlObject *easy_self;
     PyObject *arglist;
     PyObject *result = NULL;
     PYCURL_DECLARE_THREAD_STATE;
 
     /* acquire thread */
     self = (CurlMultiObject *)userp;
-    curl_easy_getinfo(easy, CURLINFO_PRIVATE, &easy_self);
     if (!PYCURL_ACQUIRE_THREAD_MULTI())
         return 0;
 
-- 
1.7.1


From 61edc39876c36842570a72b784f6c11fed9ff95d Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 14 Oct 2013 19:26:55 -0400
Subject: [PATCH 012/236] Ensure resObj is always initialized

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    8 +-------
 1 files changed, 1 insertions(+), 7 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 40b22b0..8048e5a 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1329,7 +1329,7 @@ header_callback(char *ptr, size_t size, size_t nmemb, void *stream)
 static PyObject *
 convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
 {
-    PyObject *resObj;
+    PyObject *resObj = NULL;
     
     switch (saddr->sa_family)
     {
@@ -1340,7 +1340,6 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
             
             if (addr_str == NULL) {
                 PyErr_SetString(ErrorObject, "Out of memory");
-                resObj = NULL;
                 goto error;
             }
             
@@ -1360,7 +1359,6 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
             
             if (addr_str == NULL) {
                 PyErr_SetString(ErrorObject, "Out of memory");
-                resObj = NULL;
                 goto error;
             }
             
@@ -1377,12 +1375,8 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
         /* We (currently) only support IPv4/6 addresses.  Can curl even be used
            with anything else? */
 	PyErr_SetString(ErrorObject, "Unsupported address family.");
-        resObj = NULL;
     }
     
-    if (resObj == NULL)
-        goto error;
-    
 error:
     return resObj;
 }
-- 
1.7.1


From 2f58b60ce4a16e3d5b7f4ca0163e3a4fb8c2fbc3 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 14 Oct 2013 19:27:31 -0400
Subject: [PATCH 013/236] No camel case kthx

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    8 ++++----
 1 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 8048e5a..d94f3c1 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1329,7 +1329,7 @@ header_callback(char *ptr, size_t size, size_t nmemb, void *stream)
 static PyObject *
 convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
 {
-    PyObject *resObj = NULL;
+    PyObject *res_obj = NULL;
     
     switch (saddr->sa_family)
     {
@@ -1348,7 +1348,7 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
                 PyMem_Free(addr_str);
                 goto error;
             }
-            resObj = Py_BuildValue("(si)", addr_str, ntohs(sin->sin_port));
+            res_obj = Py_BuildValue("(si)", addr_str, ntohs(sin->sin_port));
             PyMem_Free(addr_str);
        }
         break;
@@ -1367,7 +1367,7 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
                 PyMem_Free(addr_str);
                 goto error;
             }
-            resObj = Py_BuildValue("(si)", addr_str, ntohs(sin6->sin6_port));
+            res_obj = Py_BuildValue("(si)", addr_str, ntohs(sin6->sin6_port));
             PyMem_Free(addr_str);
         }
         break;
@@ -1378,7 +1378,7 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
     }
     
 error:
-    return resObj;
+    return res_obj;
 }
 
 /* curl_socket_t is just an int on unix/windows (with limitations that
-- 
1.7.1


From c7dbc352fc107c7c7a574bf1c684a4bde9b38b92 Mon Sep 17 00:00:00 2001
From: Gisle Vanem <gvanem@yahoo.no>
Date: Mon, 14 Oct 2013 19:36:05 -0400
Subject: [PATCH 014/236] Allow dynamic linking on windows

http://curl.haxx.se/mail/curlpython-2013-10/0001.html

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index d94f3c1..5686b4e 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -37,7 +37,7 @@
 #if (defined(_WIN32) || defined(__WIN32__)) && !defined(WIN32)
 #  define WIN32 1
 #endif
-#if defined(WIN32)
+#if defined(WIN32) && !defined(PYCURL_USE_LIBCURL_DLL)
 #  define CURL_STATICLIB 1
 #endif
 #include <Python.h>
-- 
1.7.1


From 6907c49394607d5f6ce48cd8e932de559796b40c Mon Sep 17 00:00:00 2001
From: Gisle Vanem <gvanem@yahoo.no>
Date: Mon, 14 Oct 2013 19:47:29 -0400
Subject: [PATCH 015/236] Add CURLOPT_DNS_SERVERS option support.

http://curl.haxx.se/mail/curlpython-2013-10/0001.html

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    7 +++++++
 1 files changed, 7 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 5686b4e..2fe4e29 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1966,6 +1966,9 @@ do_curl_setopt(CurlObject *self, PyObject *args)
         case CURLOPT_SSH_HOST_PUBLIC_KEY_MD5:
         case CURLOPT_CRLFILE:
         case CURLOPT_ISSUERCERT:
+#if LIBCURL_VERSION_NUM >= 0x072100
+        case CURLOPT_DNS_SERVERS:
+#endif
 /* FIXME: check if more of these options allow binary data */
             str = PyString_AsString_NoNUL(obj);
             if (str == NULL)
@@ -4251,6 +4254,10 @@ initpycurl(void)
     insint_c(d, "PAUSE_CONT", CURLPAUSE_CONT);
 #endif
 
+#if LIBCURL_VERSION_NUM >= 0x072100
+    insint_c(d, "DNS_SERVERS", CURLOPT_DNS_SERVERS);
+#endif
+
     /* options for global_init() */
     insint(d, "GLOBAL_SSL", CURL_GLOBAL_SSL);
     insint(d, "GLOBAL_WIN32", CURL_GLOBAL_WIN32);
-- 
1.7.1


From f78171cb813f73d7a6ed3567ffcc0c5d81076747 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 14 Oct 2013 19:49:14 -0400
Subject: [PATCH 016/236] According to the manual these options were added in libcurl 7.24.0

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 2fe4e29..6e724c1 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1966,7 +1966,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
         case CURLOPT_SSH_HOST_PUBLIC_KEY_MD5:
         case CURLOPT_CRLFILE:
         case CURLOPT_ISSUERCERT:
-#if LIBCURL_VERSION_NUM >= 0x072100
+#if LIBCURL_VERSION_NUM >= 0x071800
         case CURLOPT_DNS_SERVERS:
 #endif
 /* FIXME: check if more of these options allow binary data */
@@ -4254,7 +4254,7 @@ initpycurl(void)
     insint_c(d, "PAUSE_CONT", CURLPAUSE_CONT);
 #endif
 
-#if LIBCURL_VERSION_NUM >= 0x072100
+#if LIBCURL_VERSION_NUM >= 0x071800
     insint_c(d, "DNS_SERVERS", CURLOPT_DNS_SERVERS);
 #endif
 
-- 
1.7.1


From a29eee95da0399f7c441192573fd61a00f350076 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 14 Oct 2013 19:52:55 -0400
Subject: [PATCH 017/236] Test coverage

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/curlopt_test.py |   12 ++++++++++++
 1 files changed, 12 insertions(+), 0 deletions(-)

diff --git a/tests/curlopt_test.py b/tests/curlopt_test.py
index fd30394..25d5a5c 100644
--- a/tests/curlopt_test.py
+++ b/tests/curlopt_test.py
@@ -18,3 +18,15 @@ class CurloptTest(unittest.TestCase):
         assert hasattr(pycurl, 'PASSWORD')
         assert hasattr(pycurl, 'PROXYUSERNAME')
         assert hasattr(pycurl, 'PROXYPASSWORD')
+    
+    def test_dns_servers(self):
+        # CURLOPT_DNS_SERVERS was introduced in libcurl-7.24.0
+        if util.pycurl_version_less_than(7, 24, 0):
+            raise nose.plugins.skip.SkipTest('libcurl < 7.24.0')
+        
+        assert hasattr(pycurl, 'DNS_SERVERS')
+        
+        # Does not work unless libcurl was built against c-ares
+        #c = pycurl.Curl()
+        #c.setopt(c.DNS_SERVERS, '1.2.3.4')
+        #c.close()
-- 
1.7.1


From 33c30010d8cea1838118814bf441415af6940f9b Mon Sep 17 00:00:00 2001
From: Oskari Saarenmaa <os@ohmu.fi>
Date: Tue, 25 Sep 2012 01:12:03 +0300
Subject: [PATCH 018/236] pycurl: add pycurl version to `pycurl.version` and user-agent.

Signed-off-by: Oskari Saarenmaa <os@ohmu.fi>
Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py     |    2 +-
 src/pycurl.c |    6 ++++--
 2 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/setup.py b/setup.py
index f770b30..bd9ea55 100644
--- a/setup.py
+++ b/setup.py
@@ -17,7 +17,7 @@ from distutils.util import split_quoted
 from distutils.version import LooseVersion
 
 include_dirs = []
-define_macros = []
+define_macros = [("PYCURL_VERSION", '"%s"' % VERSION)]
 library_dirs = []
 libraries = []
 runtime_library_dirs = []
diff --git a/src/pycurl.c b/src/pycurl.c
index 6e724c1..1f054d3 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -169,7 +169,8 @@ static void pycurl_ssl_cleanup(void);
     PYCURL_MEMGROUP_MULTI | PYCURL_MEMGROUP_SHARE)
 
 /* Keep some default variables around */
-static const char g_pycurl_useragent [] = "PycURL/" LIBCURL_VERSION;
+static const char g_pycurl_useragent [] =
+    "pycurl/" PYCURL_VERSION " libcurl/" LIBCURL_VERSION;
 
 /* Type objects */
 static PyObject *ErrorObject = NULL;
@@ -3858,7 +3859,8 @@ initpycurl(void)
     assert(curlobject_constants != NULL);
 
     /* Add version strings to the module */
-    insstr(d, "version", curl_version());
+    insobj2(d, NULL, "version",
+            PyString_FromFormat("pycurl/" PYCURL_VERSION " %s", curl_version()));
     insstr(d, "COMPILE_DATE", __DATE__ " " __TIME__);
     insint(d, "COMPILE_PY_VERSION_HEX", PY_VERSION_HEX);
     insint(d, "COMPILE_LIBCURL_VERSION_NUM", LIBCURL_VERSION_NUM);
-- 
1.7.1


From 9e59f02599feacf66d723ceacec072556ee37fa3 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 21 Oct 2013 13:04:10 -0400
Subject: [PATCH 019/236] Spell pycurl the same way it was spelled before

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c          |    4 ++--
 tests/version_test.py |   13 +++++++++++++
 2 files changed, 15 insertions(+), 2 deletions(-)
 create mode 100644 tests/version_test.py

diff --git a/src/pycurl.c b/src/pycurl.c
index 1f054d3..6df35a5 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -170,7 +170,7 @@ static void pycurl_ssl_cleanup(void);
 
 /* Keep some default variables around */
 static const char g_pycurl_useragent [] =
-    "pycurl/" PYCURL_VERSION " libcurl/" LIBCURL_VERSION;
+    "PycURL/" PYCURL_VERSION " libcurl/" LIBCURL_VERSION;
 
 /* Type objects */
 static PyObject *ErrorObject = NULL;
@@ -3860,7 +3860,7 @@ initpycurl(void)
 
     /* Add version strings to the module */
     insobj2(d, NULL, "version",
-            PyString_FromFormat("pycurl/" PYCURL_VERSION " %s", curl_version()));
+            PyString_FromFormat("PycURL/" PYCURL_VERSION " %s", curl_version()));
     insstr(d, "COMPILE_DATE", __DATE__ " " __TIME__);
     insint(d, "COMPILE_PY_VERSION_HEX", PY_VERSION_HEX);
     insint(d, "COMPILE_LIBCURL_VERSION_NUM", LIBCURL_VERSION_NUM);
diff --git a/tests/version_test.py b/tests/version_test.py
new file mode 100644
index 0000000..1e4dab7
--- /dev/null
+++ b/tests/version_test.py
@@ -0,0 +1,13 @@
+#! /usr/bin/env python
+# -*- coding: iso-8859-1 -*-
+# vi:ts=4:et
+
+import unittest
+import pycurl
+
+class VersionTest(unittest.TestCase):
+    def test_pycurl_presence_and_case(self):
+        assert pycurl.version.startswith('PycURL/')
+    
+    def test_libcurl_presence(self):
+        assert 'libcurl/' in pycurl.version
-- 
1.7.1


From 622a52f701ff61701f62552cdffc90603ef849b8 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 21 Oct 2013 13:16:44 -0400
Subject: [PATCH 020/236] Check that the correct user agent is sent

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/app.py                    |    4 ++++
 tests/user_agent_string_test.py |   27 +++++++++++++++++++++++++++
 2 files changed, 31 insertions(+), 0 deletions(-)
 create mode 100644 tests/user_agent_string_test.py

diff --git a/tests/app.py b/tests/app.py
index b44e066..7da4728 100644
--- a/tests/app.py
+++ b/tests/app.py
@@ -48,6 +48,10 @@ def files():
     files = [convert_file(key, bottle.request.files[key]) for key in bottle.request.files]
     return json.dumps(files)
 
+@app.route('/header')
+def header():
+    return bottle.request.headers[bottle.request.query['h']]
+
 def pause_writer():
     yield 'part1'
     _time.sleep(0.5)
diff --git a/tests/user_agent_string_test.py b/tests/user_agent_string_test.py
new file mode 100644
index 0000000..2741c2f
--- /dev/null
+++ b/tests/user_agent_string_test.py
@@ -0,0 +1,27 @@
+#! /usr/bin/env python
+# -*- coding: iso-8859-1 -*-
+# vi:ts=4:et
+
+import unittest
+import pycurl
+
+from . import appmanager
+from . import util
+
+setup_module, teardown_module = appmanager.setup(('app', 8380))
+
+class UserAgentStringTest(unittest.TestCase):
+    def setUp(self):
+        self.curl = pycurl.Curl()
+    
+    def tearDown(self):
+        self.curl.close()
+    
+    def test_pycurl_user_agent_string(self):
+        self.curl.setopt(pycurl.URL, 'http://localhost:8380/header?h=user-agent')
+        sio = util.StringIO()
+        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
+        self.curl.perform()
+        user_agent = sio.getvalue()
+        assert user_agent.startswith('PycURL/')
+        assert 'libcurl/' in user_agent
-- 
1.7.1


From 16b0f0da6c3c622a15952850e1fad26641e68c92 Mon Sep 17 00:00:00 2001
From: Kevin Ko <kevin.s.ko@gmail.com>
Date: Wed, 25 Sep 2013 21:47:45 -0400
Subject: [PATCH 021/236] Adds support for libcurl's BUFFER and BUFFERPTR form parameters.

This allows one to use a string as a POST parameter.

Example usage:

 ...
 params = [
 ('x', (pycurl.FORM_BUFFER, "filename", pycurl.FORM_BUFFERPTR, "data"))
 ]
 c = pycurl.Curl()
 c.setopt(pycurl.HTTPPOST, params)
 ...

Although the API docs say that the buffer should not be freed
until curl_easy_cleanup() is called, I followed the liveness of
CurlObject.httppost within pycurl.c, since the API makes identical
assumptions.

https://sourceforge.net/p/pycurl/patches/9/

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   67 +++++++++++++++++++++++++++++++++++++++++++++++++++++----
 1 files changed, 62 insertions(+), 5 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 6df35a5..9722d8f 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -157,12 +157,14 @@ static void pycurl_ssl_cleanup(void);
 #define PYCURL_MEMGROUP_FILE            8
 /* Share objects */
 #define PYCURL_MEMGROUP_SHARE           16
+/* httppost buffer references */
+#define PYCURL_MEMGROUP_HTTPPOST        32
 /* Postfields object */
 #define PYCURL_MEMGROUP_POSTFIELDS      64
 
 #define PYCURL_MEMGROUP_EASY \
-    (PYCURL_MEMGROUP_CALLBACK | \
-    PYCURL_MEMGROUP_FILE | PYCURL_MEMGROUP_POSTFIELDS)
+    (PYCURL_MEMGROUP_CALLBACK | PYCURL_MEMGROUP_FILE | \
+    PYCURL_MEMGROUP_HTTPPOST | PYCURL_MEMGROUP_POSTFIELDS)
 
 #define PYCURL_MEMGROUP_ALL \
     (PYCURL_MEMGROUP_ATTRDICT | PYCURL_MEMGROUP_EASY | \
@@ -217,6 +219,8 @@ typedef struct {
     CurlMultiObject *multi_stack;
     CurlShareObject *share;
     struct curl_httppost *httppost;
+    /* List of INC'ed references associated with httppost. */
+    PyObject *httppost_ref_list;
     struct curl_slist *httpheader;
     struct curl_slist *http200aliases;
     struct curl_slist *quote;
@@ -924,6 +928,7 @@ util_curl_new(void)
     self->share = NULL;
     self->multi_stack = NULL;
     self->httppost = NULL;
+    self->httppost_ref_list = NULL;
     self->httpheader = NULL;
     self->http200aliases = NULL;
     self->quote = NULL;
@@ -1088,6 +1093,11 @@ util_curl_xdecref(CurlObject *self, int flags, CURL *handle)
             Py_DECREF(share);
         }
     }
+
+    if (flags & PYCURL_MEMGROUP_HTTPPOST) {
+        /* Decrement refcounts for httppost related references. */
+        ZAP(self->httppost_ref_list);
+    }
 }
 
 
@@ -1808,6 +1818,7 @@ util_curl_unsetopt(CurlObject *self, int option)
     case CURLOPT_HTTPPOST:
         SETOPT((void *) 0);
         curl_formfree(self->httppost);
+        util_curl_xdecref(self, PYCURL_MEMGROUP_HTTPPOST, self->handle);
         self->httppost = NULL;
         /* FIXME: what about data->set.httpreq ?? */
         break;
@@ -2147,6 +2158,12 @@ do_curl_setopt(CurlObject *self, PyObject *args)
         if (option == CURLOPT_HTTPPOST) {
             struct curl_httppost *post = NULL;
             struct curl_httppost *last = NULL;
+            /* List of all references that have been INCed as a result of
+             * this operation */
+            PyObject *ref_params = PyList_New((Py_ssize_t)0);
+            if (ref_params == NULL) {
+                return NULL;
+            }
 
             for (i = 0; i < len; i++) {
                 char *nstr = NULL, *cstr = NULL;
@@ -2155,16 +2172,19 @@ do_curl_setopt(CurlObject *self, PyObject *args)
 
                 if (!PyTuple_Check(listitem)) {
                     curl_formfree(post);
+                    Py_DECREF(ref_params);
                     PyErr_SetString(PyExc_TypeError, "list items must be tuple objects");
                     return NULL;
                 }
                 if (PyTuple_GET_SIZE(listitem) != 2) {
                     curl_formfree(post);
+                    Py_DECREF(ref_params);
                     PyErr_SetString(PyExc_TypeError, "tuple must contain two elements (name, value)");
                     return NULL;
                 }
                 if (PyString_AsStringAndSize(PyTuple_GET_ITEM(listitem, 0), &nstr, &nlen) != 0) {
                     curl_formfree(post);
+                    Py_DECREF(ref_params);
                     PyErr_SetString(PyExc_TypeError, "tuple must contain string as first element");
                     return NULL;
                 }
@@ -2181,6 +2201,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                                        CURLFORM_END);
                     if (res != CURLE_OK) {
                         curl_formfree(post);
+                        Py_DECREF(ref_params);
                         CURLERROR_RETVAL();
                     }
                 }
@@ -2194,14 +2215,16 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                     /* Sanity check that there are at least two tuple items */
                     if (tlen < 2) {
                         curl_formfree(post);
+                        Py_DECREF(ref_params);
                         PyErr_SetString(PyExc_TypeError, "tuple must contain at least one option and one value");
                         return NULL;
                     }
 
-                    /* Allocate enough space to accommodate length options for content */
+                    /* Allocate enough space to accommodate length options for content or buffers, plus a terminator. */
                     forms = PyMem_Malloc(sizeof(struct curl_forms) * ((tlen*2) + 1));
                     if (forms == NULL) {
                         curl_formfree(post);
+                        Py_DECREF(ref_params);
                         PyErr_NoMemory();
                         return NULL;
                     }
@@ -2216,18 +2239,21 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                             PyErr_SetString(PyExc_TypeError, "expected value");
                             PyMem_Free(forms);
                             curl_formfree(post);
+                            Py_DECREF(ref_params);
                             return NULL;
                         }
                         if (!PyInt_Check(PyTuple_GET_ITEM(t, j))) {
                             PyErr_SetString(PyExc_TypeError, "option must be long");
                             PyMem_Free(forms);
                             curl_formfree(post);
+                            Py_DECREF(ref_params);
                             return NULL;
                         }
                         if (!PyString_Check(PyTuple_GET_ITEM(t, j+1))) {
                             PyErr_SetString(PyExc_TypeError, "value must be string");
                             PyMem_Free(forms);
                             curl_formfree(post);
+                            Py_DECREF(ref_params);
                             return NULL;
                         }
 
@@ -2235,11 +2261,14 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                         if (val != CURLFORM_COPYCONTENTS &&
                             val != CURLFORM_FILE &&
                             val != CURLFORM_FILENAME &&
-                            val != CURLFORM_CONTENTTYPE)
+                            val != CURLFORM_CONTENTTYPE &&
+                            val != CURLFORM_BUFFER &&
+                            val != CURLFORM_BUFFERPTR)
                         {
                             PyErr_SetString(PyExc_TypeError, "unsupported option");
                             PyMem_Free(forms);
                             curl_formfree(post);
+                            Py_DECREF(ref_params);
                             return NULL;
                         }
                         PyString_AsStringAndSize(PyTuple_GET_ITEM(t, j+1), &ostr, &olen);
@@ -2252,6 +2281,22 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                             forms[k].value = (const char *)olen;
                             ++k;
                         }
+                        else if (val == CURLFORM_BUFFERPTR) {
+                            PyObject *obj = PyTuple_GET_ITEM(t, j+1);
+
+                            /* As with CURLFORM_COPYCONTENTS, specify the length. */
+                            forms[k].option = CURLFORM_BUFFERLENGTH;
+                            forms[k].value = (const char *)olen;
+                            ++k;
+
+                            /* Ensure that the buffer remains alive until curl_easy_cleanup() */
+                            if (PyList_Append(ref_params, obj) != 0) {
+                                PyMem_Free(forms);
+                                curl_formfree(post);
+                                Py_DECREF(ref_params);
+                                return NULL;
+                            }
+                        }
                     }
                     forms[k].option = CURLFORM_END;
                     res = curl_formadd(&post, &last,
@@ -2262,11 +2307,13 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                     PyMem_Free(forms);
                     if (res != CURLE_OK) {
                         curl_formfree(post);
+                        Py_DECREF(ref_params);
                         CURLERROR_RETVAL();
                     }
                 } else {
                     /* Some other type was given, ignore */
                     curl_formfree(post);
+                    Py_DECREF(ref_params);
                     PyErr_SetString(PyExc_TypeError, "unsupported second type in tuple");
                     return NULL;
                 }
@@ -2275,12 +2322,20 @@ do_curl_setopt(CurlObject *self, PyObject *args)
             /* Check for errors */
             if (res != CURLE_OK) {
                 curl_formfree(post);
+                Py_DECREF(ref_params);
                 CURLERROR_RETVAL();
             }
-            /* Finally, free previously allocated httppost and update */
+            /* Finally, free previously allocated httppost, ZAP any
+             * buffer references, and update */
             curl_formfree(self->httppost);
+            util_curl_xdecref(self, PYCURL_MEMGROUP_HTTPPOST, self->handle);
             self->httppost = post;
 
+            /* The previous list of INCed references was ZAPed above; save
+             * the new one so that we can clean it up on the next
+             * self->httppost free. */
+            self->httppost_ref_list = ref_params;
+
             Py_RETURN_NONE;
         }
 
@@ -4000,6 +4055,8 @@ initpycurl(void)
     insint_c(d, "FTPAUTH_TLS", CURLFTPAUTH_TLS);
 
     /* curl_ftpauth: constants for setopt(FTPSSLAUTH, x) */
+    insint_c(d, "FORM_BUFFER", CURLFORM_BUFFER);
+    insint_c(d, "FORM_BUFFERPTR", CURLFORM_BUFFERPTR);
     insint_c(d, "FORM_CONTENTS", CURLFORM_COPYCONTENTS);
     insint_c(d, "FORM_FILE", CURLFORM_FILE);
     insint_c(d, "FORM_CONTENTTYPE", CURLFORM_CONTENTTYPE);
-- 
1.7.1


From 3a548c9e3c5084bb8d57e06add825573d8d9c0a3 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 19 Oct 2013 13:56:32 -0400
Subject: [PATCH 022/236] Test coverage

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/post_test.py |   12 ++++++++++++
 1 files changed, 12 insertions(+), 0 deletions(-)

diff --git a/tests/post_test.py b/tests/post_test.py
index d6f9678..d8d8f32 100644
--- a/tests/post_test.py
+++ b/tests/post_test.py
@@ -99,6 +99,18 @@ class PostTest(unittest.TestCase):
         }]
         self.check_post(send, expect, 'http://localhost:8380/files')
     
+    def test_post_buffer(self):
+        contents = 'hello, world!'
+        send = [
+            ('field2', (pycurl.FORM_BUFFER, 'uploaded.file', pycurl.FORM_BUFFERPTR, contents)),
+        ]
+        expect = [{
+            'name': 'field2',
+            'filename': 'uploaded.file',
+            'data': contents,
+        }]
+        self.check_post(send, expect, 'http://localhost:8380/files')
+    
     # XXX this test takes about a second to run, check keep-alives?
     def check_post(self, send, expect, endpoint):
         self.curl.setopt(pycurl.URL, endpoint)
-- 
1.7.1


From db53a7497ff0cd4ce9cbe3bdc073b6564e6b0466 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 20 Oct 2013 02:49:38 -0400
Subject: [PATCH 023/236] Allocate list storing buffer references on demand

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   48 ++++++++++++++++++++++++++----------------------
 1 files changed, 26 insertions(+), 22 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 9722d8f..7d795fb 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -2160,10 +2160,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
             struct curl_httppost *last = NULL;
             /* List of all references that have been INCed as a result of
              * this operation */
-            PyObject *ref_params = PyList_New((Py_ssize_t)0);
-            if (ref_params == NULL) {
-                return NULL;
-            }
+            PyObject *ref_params = NULL;
 
             for (i = 0; i < len; i++) {
                 char *nstr = NULL, *cstr = NULL;
@@ -2172,19 +2169,19 @@ do_curl_setopt(CurlObject *self, PyObject *args)
 
                 if (!PyTuple_Check(listitem)) {
                     curl_formfree(post);
-                    Py_DECREF(ref_params);
+                    Py_XDECREF(ref_params);
                     PyErr_SetString(PyExc_TypeError, "list items must be tuple objects");
                     return NULL;
                 }
                 if (PyTuple_GET_SIZE(listitem) != 2) {
                     curl_formfree(post);
-                    Py_DECREF(ref_params);
+                    Py_XDECREF(ref_params);
                     PyErr_SetString(PyExc_TypeError, "tuple must contain two elements (name, value)");
                     return NULL;
                 }
                 if (PyString_AsStringAndSize(PyTuple_GET_ITEM(listitem, 0), &nstr, &nlen) != 0) {
                     curl_formfree(post);
-                    Py_DECREF(ref_params);
+                    Py_XDECREF(ref_params);
                     PyErr_SetString(PyExc_TypeError, "tuple must contain string as first element");
                     return NULL;
                 }
@@ -2201,7 +2198,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                                        CURLFORM_END);
                     if (res != CURLE_OK) {
                         curl_formfree(post);
-                        Py_DECREF(ref_params);
+                        Py_XDECREF(ref_params);
                         CURLERROR_RETVAL();
                     }
                 }
@@ -2215,7 +2212,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                     /* Sanity check that there are at least two tuple items */
                     if (tlen < 2) {
                         curl_formfree(post);
-                        Py_DECREF(ref_params);
+                        Py_XDECREF(ref_params);
                         PyErr_SetString(PyExc_TypeError, "tuple must contain at least one option and one value");
                         return NULL;
                     }
@@ -2224,7 +2221,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                     forms = PyMem_Malloc(sizeof(struct curl_forms) * ((tlen*2) + 1));
                     if (forms == NULL) {
                         curl_formfree(post);
-                        Py_DECREF(ref_params);
+                        Py_XDECREF(ref_params);
                         PyErr_NoMemory();
                         return NULL;
                     }
@@ -2239,21 +2236,21 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                             PyErr_SetString(PyExc_TypeError, "expected value");
                             PyMem_Free(forms);
                             curl_formfree(post);
-                            Py_DECREF(ref_params);
+                            Py_XDECREF(ref_params);
                             return NULL;
                         }
                         if (!PyInt_Check(PyTuple_GET_ITEM(t, j))) {
                             PyErr_SetString(PyExc_TypeError, "option must be long");
                             PyMem_Free(forms);
                             curl_formfree(post);
-                            Py_DECREF(ref_params);
+                            Py_XDECREF(ref_params);
                             return NULL;
                         }
                         if (!PyString_Check(PyTuple_GET_ITEM(t, j+1))) {
                             PyErr_SetString(PyExc_TypeError, "value must be string");
                             PyMem_Free(forms);
                             curl_formfree(post);
-                            Py_DECREF(ref_params);
+                            Py_XDECREF(ref_params);
                             return NULL;
                         }
 
@@ -2268,7 +2265,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                             PyErr_SetString(PyExc_TypeError, "unsupported option");
                             PyMem_Free(forms);
                             curl_formfree(post);
-                            Py_DECREF(ref_params);
+                            Py_XDECREF(ref_params);
                             return NULL;
                         }
                         PyString_AsStringAndSize(PyTuple_GET_ITEM(t, j+1), &ostr, &olen);
@@ -2284,11 +2281,13 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                         else if (val == CURLFORM_BUFFERPTR) {
                             PyObject *obj = PyTuple_GET_ITEM(t, j+1);
 
-                            /* As with CURLFORM_COPYCONTENTS, specify the length. */
-                            forms[k].option = CURLFORM_BUFFERLENGTH;
-                            forms[k].value = (const char *)olen;
-                            ++k;
-
+                            ref_params = PyList_New((Py_ssize_t)0);
+                            if (ref_params == NULL) {
+                                PyMem_Free(forms);
+                                curl_formfree(post);
+                                return NULL;
+                            }
+                            
                             /* Ensure that the buffer remains alive until curl_easy_cleanup() */
                             if (PyList_Append(ref_params, obj) != 0) {
                                 PyMem_Free(forms);
@@ -2296,6 +2295,11 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                                 Py_DECREF(ref_params);
                                 return NULL;
                             }
+
+                            /* As with CURLFORM_COPYCONTENTS, specify the length. */
+                            forms[k].option = CURLFORM_BUFFERLENGTH;
+                            forms[k].value = (const char *)olen;
+                            ++k;
                         }
                     }
                     forms[k].option = CURLFORM_END;
@@ -2307,13 +2311,13 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                     PyMem_Free(forms);
                     if (res != CURLE_OK) {
                         curl_formfree(post);
-                        Py_DECREF(ref_params);
+                        Py_XDECREF(ref_params);
                         CURLERROR_RETVAL();
                     }
                 } else {
                     /* Some other type was given, ignore */
                     curl_formfree(post);
-                    Py_DECREF(ref_params);
+                    Py_XDECREF(ref_params);
                     PyErr_SetString(PyExc_TypeError, "unsupported second type in tuple");
                     return NULL;
                 }
@@ -2322,7 +2326,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
             /* Check for errors */
             if (res != CURLE_OK) {
                 curl_formfree(post);
-                Py_DECREF(ref_params);
+                Py_XDECREF(ref_params);
                 CURLERROR_RETVAL();
             }
             /* Finally, free previously allocated httppost, ZAP any
-- 
1.7.1


From c2fcb92a0f69eea4ab2d1d58f5dcae857f714f57 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 29 Oct 2013 13:44:31 -0400
Subject: [PATCH 024/236] Delete cvs ids

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/callbacks.html            |    1 -
 doc/curlmultiobject.html      |    1 -
 doc/curlobject.html           |    1 -
 doc/curlshareobject.html      |    1 -
 doc/pycurl.html               |    1 -
 examples/basicfirst.py        |    1 -
 examples/file_upload.py       |    1 -
 examples/retriever-multi.py   |    1 -
 examples/retriever.py         |    1 -
 examples/tests/test_gtk.py    |    1 -
 examples/tests/test_xmlrpc.py |    1 -
 examples/xmlrpc_curl.py       |    1 -
 setup.py                      |    1 -
 setup_win32_ssl.py            |    1 -
 src/pycurl.c                  |    2 --
 tests/util.py                 |    1 -
 16 files changed, 0 insertions(+), 17 deletions(-)

diff --git a/doc/callbacks.html b/doc/callbacks.html
index 19d287b..83b1445 100644
--- a/doc/callbacks.html
+++ b/doc/callbacks.html
@@ -141,7 +141,6 @@ and 'tests/test_getinfo.py' shows PROGRESSFUNCTION.</p>
   <a href="http://validator.w3.org/check/referer"><img align="right"
      src="http://www.w3.org/Icons/valid-xhtml10"
      alt="Valid XHTML 1.0!" height="31" width="88" border="0" /></a>
-  $Id$
 </p>
 
 </body>
diff --git a/doc/curlmultiobject.html b/doc/curlmultiobject.html
index 66191d3..f14827c 100644
--- a/doc/curlmultiobject.html
+++ b/doc/curlmultiobject.html
@@ -129,7 +129,6 @@ returned.</p>
   <a href="http://validator.w3.org/check/referer"><img align="right"
      src="http://www.w3.org/Icons/valid-xhtml10"
      alt="Valid XHTML 1.0!" height="31" width="88" border="0" /></a>
-  $Id$
 </p>
 
 </body>
diff --git a/doc/curlobject.html b/doc/curlobject.html
index f4bd5bc..4138e38 100644
--- a/doc/curlobject.html
+++ b/doc/curlobject.html
@@ -130,7 +130,6 @@ tuples.</p>
   <a href="http://validator.w3.org/check/referer"><img align="right"
      src="http://www.w3.org/Icons/valid-xhtml10"
      alt="Valid XHTML 1.0!" height="31" width="88" border="0" /></a>
-  $Id$
 </p>
 
 </body>
diff --git a/doc/curlshareobject.html b/doc/curlshareobject.html
index 2043e48..a624f48 100644
--- a/doc/curlshareobject.html
+++ b/doc/curlshareobject.html
@@ -47,7 +47,6 @@ curl.close()
   <a href="http://validator.w3.org/check/referer"><img align="right"
      src="http://www.w3.org/Icons/valid-xhtml10"
      alt="Valid XHTML 1.0!" height="31" width="88" border="0" /></a>
-  $Id$
 </p>
 
 </body>
diff --git a/doc/pycurl.html b/doc/pycurl.html
index 567231f..a49960a 100644
--- a/doc/pycurl.html
+++ b/doc/pycurl.html
@@ -123,7 +123,6 @@ pass as an argument to the SHARE option on Curl objects.</p>
   <a href="http://validator.w3.org/check/referer"><img align="right"
      src="http://www.w3.org/Icons/valid-xhtml10"
      alt="Valid XHTML 1.0!" height="31" width="88" border="0" /></a>
-  $Id$
 </p>
 
 </body>
diff --git a/examples/basicfirst.py b/examples/basicfirst.py
index 44060af..d225018 100644
--- a/examples/basicfirst.py
+++ b/examples/basicfirst.py
@@ -1,7 +1,6 @@
 #! /usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 # vi:ts=4:et
-# $Id$
 
 import sys
 import pycurl
diff --git a/examples/file_upload.py b/examples/file_upload.py
index 7750865..0b4b457 100644
--- a/examples/file_upload.py
+++ b/examples/file_upload.py
@@ -1,7 +1,6 @@
 #! /usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 # vi:ts=4:et
-# $Id$
 
 import os, sys
 import pycurl
diff --git a/examples/retriever-multi.py b/examples/retriever-multi.py
index ad4cebd..39a9eae 100644
--- a/examples/retriever-multi.py
+++ b/examples/retriever-multi.py
@@ -1,7 +1,6 @@
 #! /usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 # vi:ts=4:et
-# $Id$
 
 #
 # Usage: python retriever-multi.py <file with URLs to fetch> [<# of
diff --git a/examples/retriever.py b/examples/retriever.py
index be1b6ea..ab84962 100644
--- a/examples/retriever.py
+++ b/examples/retriever.py
@@ -1,7 +1,6 @@
 #! /usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 # vi:ts=4:et
-# $Id$
 
 #
 # Usage: python retriever.py <file with URLs to fetch> [<# of
diff --git a/examples/tests/test_gtk.py b/examples/tests/test_gtk.py
index da8c22a..b2835fa 100644
--- a/examples/tests/test_gtk.py
+++ b/examples/tests/test_gtk.py
@@ -1,7 +1,6 @@
 #! /usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 # vi:ts=4:et
-# $Id$
 
 import sys, threading
 import pycurl
diff --git a/examples/tests/test_xmlrpc.py b/examples/tests/test_xmlrpc.py
index d64794e..166c0fa 100644
--- a/examples/tests/test_xmlrpc.py
+++ b/examples/tests/test_xmlrpc.py
@@ -1,7 +1,6 @@
 #! /usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 # vi:ts=4:et
-# $Id$
 
 ## XML-RPC lib included in python2.2
 try:
diff --git a/examples/xmlrpc_curl.py b/examples/xmlrpc_curl.py
index 21418b5..55627fa 100644
--- a/examples/xmlrpc_curl.py
+++ b/examples/xmlrpc_curl.py
@@ -1,7 +1,6 @@
 #! /usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 # vi:ts=4:et
-# $Id$
 
 # We should ignore SIGPIPE when using pycurl.NOSIGNAL - see
 # the libcurl tutorial for more info.
diff --git a/setup.py b/setup.py
index bd9ea55..7ec7c84 100644
--- a/setup.py
+++ b/setup.py
@@ -1,7 +1,6 @@
 #! /usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 # vi:ts=4:et
-# $Id$
 
 """Setup script for the PycURL module distribution."""
 
diff --git a/setup_win32_ssl.py b/setup_win32_ssl.py
index 0ecc399..612ba3a 100644
--- a/setup_win32_ssl.py
+++ b/setup_win32_ssl.py
@@ -1,7 +1,6 @@
 #! /usr/bin/env python
 # -*- coding: iso-8859-1 -*-
 # vi:ts=4:et
-# $Id$
 
 import os, sys, string
 assert sys.platform == "win32", "Only for building on Win32 with SSL and zlib"
diff --git a/src/pycurl.c b/src/pycurl.c
index 7d795fb..348f5ba 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1,5 +1,3 @@
-/* $Id$ */
-
 /* PycURL -- cURL Python module
  *
  * Authors:
diff --git a/tests/util.py b/tests/util.py
index eef636f..7d66f24 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -1,6 +1,5 @@
 # -*- coding: iso-8859-1 -*-
 # vi:ts=4:et
-# $Id$
 
 import os, sys, socket
 import time as _time
-- 
1.7.1


From ab9020b0cc950d07a7a109035f0233c459668829 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 29 Oct 2013 14:14:00 -0400
Subject: [PATCH 025/236] Do not call curl-config --static-libs if --libs succeeded.

Fixes #52

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   34 +++++++++++++++++++++++++++-------
 1 files changed, 27 insertions(+), 7 deletions(-)

diff --git a/setup.py b/setup.py
index 7ec7c84..fd480c1 100644
--- a/setup.py
+++ b/setup.py
@@ -15,6 +15,15 @@ from distutils.extension import Extension
 from distutils.util import split_quoted
 from distutils.version import LooseVersion
 
+try:
+    # python 2
+    exception_base = StandardError
+except NameError:
+    # python 3
+    exception_base = Exception
+class ConfigurationError(exception_base):
+    pass
+
 include_dirs = []
 define_macros = [("PYCURL_VERSION", '"%s"' % VERSION)]
 library_dirs = []
@@ -139,19 +148,30 @@ else:
         else:
             extra_compile_args.append(e)
 
-    # Run curl-config --libs and --static-libs.  Some platforms may not
-    # support one or the other of these curl-config options, so gracefully
-    # tolerate failure of either, but not both.
+    # Obtain linker flags/libraries to link against.
+    # In theory, all we should need is `curl-config --libs`.
+    # Apparently on some platforms --libs fails and --static-libs works,
+    # so try that.
+    # If --libs succeeds do not try --static libs; see
+    # https://github.com/pycurl/pycurl/issues/52 for more details.
+    # If neither --libs nor --static-libs work, fail.
     optbuf = ""
+    errtext = ''
     for option in ["--libs", "--static-libs"]:
         p = subprocess.Popen("'%s' %s" % (CURL_CONFIG, option), shell=True,
-            stdout=subprocess.PIPE)
+            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
         (stdout, stderr) = p.communicate()
         if p.wait() == 0:
-            optbuf += stdout.decode()
+            optbuf = stdout.decode()
+            break
+        else:
+            errtext += stderr.decode()
     if optbuf == "":
-        raise Exception("Neither curl-config --libs nor curl-config --static-libs" +
-            " produced output")
+        msg = "Neither curl-config --libs nor curl-config --static-libs" +\
+            " succeeded and produced output"
+        if errtext:
+            msg += ":\n" + errtext
+        raise ConfigurationError(msg)
     libs = split_quoted(optbuf)
 
     for e in libs:
-- 
1.7.1


From 2f1fea9391be6a0a2a1bb701112cd314aecc717c Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 29 Oct 2013 16:10:24 -0400
Subject: [PATCH 026/236] Get rid of shell syntax, use subprocess appropriately

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/setup.py b/setup.py
index fd480c1..986509f 100644
--- a/setup.py
+++ b/setup.py
@@ -158,7 +158,7 @@ else:
     optbuf = ""
     errtext = ''
     for option in ["--libs", "--static-libs"]:
-        p = subprocess.Popen("'%s' %s" % (CURL_CONFIG, option), shell=True,
+        p = subprocess.Popen((CURL_CONFIG, option),
             stdout=subprocess.PIPE, stderr=subprocess.PIPE)
         (stdout, stderr) = p.communicate()
         if p.wait() == 0:
-- 
1.7.1


From fad9c61e641155e150ca01aa939b2663e5dab169 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 29 Oct 2013 16:12:22 -0400
Subject: [PATCH 027/236] Drop optional parens

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/setup.py b/setup.py
index 986509f..4fe3d0c 100644
--- a/setup.py
+++ b/setup.py
@@ -160,7 +160,7 @@ else:
     for option in ["--libs", "--static-libs"]:
         p = subprocess.Popen((CURL_CONFIG, option),
             stdout=subprocess.PIPE, stderr=subprocess.PIPE)
-        (stdout, stderr) = p.communicate()
+        stdout, stderr = p.communicate()
         if p.wait() == 0:
             optbuf = stdout.decode()
             break
-- 
1.7.1


From bf31b3591b28581691b3dff7c632adc4bdc5900e Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 29 Oct 2013 16:15:23 -0400
Subject: [PATCH 028/236] Replace os.popen with subprocess for curl-config --version

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   14 +++++++++-----
 1 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/setup.py b/setup.py
index 4fe3d0c..e7189e8 100644
--- a/setup.py
+++ b/setup.py
@@ -134,11 +134,15 @@ else:
         include_dirs.append(os.path.join(OPENSSL_DIR, "include"))
     CURL_CONFIG = os.environ.get('PYCURL_CURL_CONFIG', "curl-config")
     CURL_CONFIG = scan_argv("--curl-config=", CURL_CONFIG)
-    d = os.popen("'%s' --version" % CURL_CONFIG).read()
-    if d:
-        d = str.strip(d)
-    if not d:
-        raise Exception("`%s' not found -- please install the libcurl development files or specify --curl-config=/path/to/curl-config" % CURL_CONFIG)
+    p = subprocess.Popen((CURL_CONFIG, '--version'),
+        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+    stdout, stderr = p.communicate()
+    if p.wait() != 0:
+        msg = "`%s' not found -- please install the libcurl development files or specify --curl-config=/path/to/curl-config" % CURL_CONFIG
+        if stderr:
+            msg += ":\n" + stderr.decode()
+        raise ConfigurationError(msg)
+    d = stdout.decode().strip()
     print("Using %s (%s)" % (CURL_CONFIG, d))
     for e in split_quoted(os.popen("'%s' --cflags" % CURL_CONFIG).read()):
         if e[:2] == "-I":
-- 
1.7.1


From ada4866443a2af60f87649c3a1a91a22cf6afc54 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 29 Oct 2013 16:18:22 -0400
Subject: [PATCH 029/236] Replace os.popen with subprocess for curl-config --cflags

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   10 +++++++++-
 1 files changed, 9 insertions(+), 1 deletions(-)

diff --git a/setup.py b/setup.py
index e7189e8..b7a3fc3 100644
--- a/setup.py
+++ b/setup.py
@@ -144,7 +144,15 @@ else:
         raise ConfigurationError(msg)
     d = stdout.decode().strip()
     print("Using %s (%s)" % (CURL_CONFIG, d))
-    for e in split_quoted(os.popen("'%s' --cflags" % CURL_CONFIG).read()):
+    p = subprocess.Popen((CURL_CONFIG, '--cflags'),
+        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+    stdout, stderr = p.communicate()
+    if p.wait() != 0:
+        msg = "Problem running `%s' --cflags" % CURL_CONFIG
+        if stderr:
+            msg += ":\n" + stderr.decode()
+        raise ConfigurationError(msg)
+    for e in split_quoted(stdout.decode()):
         if e[:2] == "-I":
             # do not add /usr/include
             if not re.search(r"^\/+usr\/+include\/*$", e[2:]):
-- 
1.7.1


From 788b67b014de457a735b9b7b73005d77345d4730 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 29 Oct 2013 16:19:55 -0400
Subject: [PATCH 030/236] Use descriptive variable names

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   36 ++++++++++++++++++------------------
 1 files changed, 18 insertions(+), 18 deletions(-)

diff --git a/setup.py b/setup.py
index b7a3fc3..384981d 100644
--- a/setup.py
+++ b/setup.py
@@ -142,8 +142,8 @@ else:
         if stderr:
             msg += ":\n" + stderr.decode()
         raise ConfigurationError(msg)
-    d = stdout.decode().strip()
-    print("Using %s (%s)" % (CURL_CONFIG, d))
+    libcurl_version = stdout.decode().strip()
+    print("Using %s (%s)" % (CURL_CONFIG, libcurl_version))
     p = subprocess.Popen((CURL_CONFIG, '--cflags'),
         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
     stdout, stderr = p.communicate()
@@ -152,13 +152,13 @@ else:
         if stderr:
             msg += ":\n" + stderr.decode()
         raise ConfigurationError(msg)
-    for e in split_quoted(stdout.decode()):
-        if e[:2] == "-I":
+    for arg in split_quoted(stdout.decode()):
+        if arg[:2] == "-I":
             # do not add /usr/include
-            if not re.search(r"^\/+usr\/+include\/*$", e[2:]):
-                include_dirs.append(e[2:])
+            if not re.search(r"^\/+usr\/+include\/*$", arg[2:]):
+                include_dirs.append(arg[2:])
         else:
-            extra_compile_args.append(e)
+            extra_compile_args.append(arg)
 
     # Obtain linker flags/libraries to link against.
     # In theory, all we should need is `curl-config --libs`.
@@ -186,21 +186,21 @@ else:
         raise ConfigurationError(msg)
     libs = split_quoted(optbuf)
 
-    for e in libs:
-        if e[:2] == "-l":
-            libraries.append(e[2:])
-            if e[2:] == 'ssl':
+    for arg in libs:
+        if arg[:2] == "-l":
+            libraries.append(arg[2:])
+            if arg[2:] == 'ssl':
                 define_macros.append(('HAVE_CURL_OPENSSL', 1))
-            if e[2:] == 'gnutls':
+            if arg[2:] == 'gnutls':
                 define_macros.append(('HAVE_CURL_GNUTLS', 1))
-            if e[2:] == 'ssl3':
+            if arg[2:] == 'ssl3':
                 define_macros.append(('HAVE_CURL_NSS', 1))
-        elif e[:2] == "-L":
-            library_dirs.append(e[2:])
+        elif arg[:2] == "-L":
+            library_dirs.append(arg[2:])
         else:
-            extra_link_args.append(e)
-    for e in split_quoted(os.popen("'%s' --features" % CURL_CONFIG).read()):
-        if e == 'SSL':
+            extra_link_args.append(arg)
+    for feature in split_quoted(os.popen("'%s' --features" % CURL_CONFIG).read()):
+        if feature == 'SSL':
             define_macros.append(('HAVE_CURL_SSL', 1))
     if not libraries:
         libraries.append("curl")
-- 
1.7.1


From 785b1695efe378531303d431b4e2853e0ce051c4 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 29 Oct 2013 19:02:58 -0400
Subject: [PATCH 031/236] Use subprocess for curl-config --features call

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   10 +++++++++-
 1 files changed, 9 insertions(+), 1 deletions(-)

diff --git a/setup.py b/setup.py
index 384981d..3ab172f 100644
--- a/setup.py
+++ b/setup.py
@@ -199,7 +199,15 @@ else:
             library_dirs.append(arg[2:])
         else:
             extra_link_args.append(arg)
-    for feature in split_quoted(os.popen("'%s' --features" % CURL_CONFIG).read()):
+    p = subprocess.Popen((CURL_CONFIG, '--features'),
+        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+    stdout, stderr = p.communicate()
+    if p.wait() != 0:
+        msg = "Problem running `%s' --features" % CURL_CONFIG
+        if stderr:
+            msg += ":\n" + stderr.decode()
+        raise ConfigurationError(msg)
+    for feature in split_quoted(stdout.decode()):
         if feature == 'SSL':
             define_macros.append(('HAVE_CURL_SSL', 1))
     if not libraries:
-- 
1.7.1


From 5f0a155cb56e852b371998d5d4ccdc3ebc09c6c7 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 29 Oct 2013 16:28:55 -0400
Subject: [PATCH 032/236] Explain curl-config options in readme

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 README.rst |   23 +++++++++++++++++++++++
 1 files changed, 23 insertions(+), 0 deletions(-)

diff --git a/README.rst b/README.rst
index 5889043..be5f29b 100644
--- a/README.rst
+++ b/README.rst
@@ -45,6 +45,29 @@ or `pip`_::
 
     pip install pycurl
 
+Installing from source is performed via ``setup.py``::
+
+    python setup.py install
+
+You will need libcurl headers and libraries installed to install PycURL
+from source. PycURL uses ``curl-config`` to determine correct flags/libraries
+to use during compilation; you can override the location of ``curl-config``
+if it is not in PATH or you want to use a custom libcurl installation::
+
+    python setup.py --curl-config=/path/to/curl-config install
+
+Sometimes it is more convenient to use an environment variable, if
+you are not directly invoking ``setup.py``::
+
+    PYCURL_CURL_CONFIG=/path/to/curl-config python setup.py install
+
+``curl-config`` is expected to support the following options:
+
+- ``--version``
+- ``--cflags``
+- ``--libs``
+- ``--static-libs`` (if ``--libs`` does not work)
+
 
 .. _easy_install: http://peak.telecommunity.com/DevCenter/EasyInstall
 .. _pip: http://pypi.python.org/pypi/pip
-- 
1.7.1


From 27c5efaa95d7721b69af631a249a7c4e628e94c8 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 4 Nov 2013 19:12:25 -0500
Subject: [PATCH 033/236] Delete imports of exceptions and mimetools.

The modules are not used and they do not exist in python 3.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 python/curl/__init__.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/python/curl/__init__.py b/python/curl/__init__.py
index 7f307b1..b9d0942 100644
--- a/python/curl/__init__.py
+++ b/python/curl/__init__.py
@@ -6,7 +6,7 @@
 #
 # By Eric S. Raymond, April 2003.
 
-import sys, exceptions, mimetools, pycurl
+import sys, pycurl
 try:
     import urllib.parse as urllib_parse
     from urllib.parse import urljoin
-- 
1.7.1


From d6b45a5f318dca9d811ce9e66b7e24d1e6392b2a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 4 Nov 2013 19:53:58 -0500
Subject: [PATCH 034/236] Document current pycurl exception behavior

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/error_test.py |   55 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 55 insertions(+), 0 deletions(-)
 create mode 100644 tests/error_test.py

diff --git a/tests/error_test.py b/tests/error_test.py
new file mode 100644
index 0000000..66231ec
--- /dev/null
+++ b/tests/error_test.py
@@ -0,0 +1,55 @@
+#! /usr/bin/env python
+# -*- coding: iso-8859-1 -*-
+# vi:ts=4:et
+
+import pycurl
+import sys
+import unittest
+
+class ErrorTest(unittest.TestCase):
+    def setUp(self):
+        self.curl = pycurl.Curl()
+
+    def tearDown(self):
+        self.curl.close()
+
+    # error originating in libcurl
+    def test_pycurl_error_libcurl(self):
+        try:
+            # perform without a url
+            self.curl.perform()
+        except pycurl.error:
+            exc_type, exc = sys.exc_info()[:2]
+            assert exc_type == pycurl.error
+            # pycurl.error's arguments are libcurl errno and message
+            self.assertEqual(2, len(exc.args))
+            self.assertEqual(int, type(exc.args[0]))
+            self.assertEqual(str, type(exc.args[1]))
+            # unpack
+            err, msg = exc
+            self.assertEqual(pycurl.E_URL_MALFORMAT, err)
+            # possibly fragile
+            self.assertEqual('No URL set!', msg)
+
+    # pycurl raises standard library exceptions in some cases
+    def test_pycurl_error_stdlib(self):
+        try:
+            # set an option of the wrong type
+            self.curl.setopt(pycurl.WRITEFUNCTION, True)
+        except TypeError:
+            exc_type, exc = sys.exc_info()[:2]
+
+    # error originating in pycurl
+    def test_pycurl_error_pycurl(self):
+        try:
+            # invalid option combination
+            self.curl.setopt(pycurl.WRITEFUNCTION, lambda x: x)
+            with open(__file__) as f:
+                self.curl.setopt(pycurl.WRITEHEADER, f)
+        except pycurl.error:
+            exc_type, exc = sys.exc_info()[:2]
+            assert exc_type == pycurl.error
+            # for non-libcurl errors, arguments are just the error string
+            self.assertEqual(1, len(exc.args))
+            self.assertEqual(str, type(exc.args[0]))
+            self.assertEqual('cannot combine WRITEHEADER with WRITEFUNCTION.', exc.args[0])
-- 
1.7.1


From 557e2911b492d2355386a79c91018e1642a63522 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 4 Nov 2013 20:01:25 -0500
Subject: [PATCH 035/236] Cannot use with statement due to python 2.4

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/error_test.py |    5 ++++-
 1 files changed, 4 insertions(+), 1 deletions(-)

diff --git a/tests/error_test.py b/tests/error_test.py
index 66231ec..04773b0 100644
--- a/tests/error_test.py
+++ b/tests/error_test.py
@@ -44,8 +44,11 @@ class ErrorTest(unittest.TestCase):
         try:
             # invalid option combination
             self.curl.setopt(pycurl.WRITEFUNCTION, lambda x: x)
-            with open(__file__) as f:
+            f = open(__file__)
+            try:
                 self.curl.setopt(pycurl.WRITEHEADER, f)
+            finally:
+                f.close()
         except pycurl.error:
             exc_type, exc = sys.exc_info()[:2]
             assert exc_type == pycurl.error
-- 
1.7.1


From ba6a2a51024b046234c8848cc9c82a4c65e49b6e Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 4 Nov 2013 19:10:48 -0500
Subject: [PATCH 036/236] Silence gc test

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/internals_test.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/tests/internals_test.py b/tests/internals_test.py
index 0133da0..82cbf6a 100644
--- a/tests/internals_test.py
+++ b/tests/internals_test.py
@@ -200,7 +200,7 @@ class InternalsTest(unittest.TestCase):
             #flags |= gc.DEBUG_OBJECTS
         #if opts.verbose >= 1:
             #flags = flags | gc.DEBUG_STATS
-        gc.set_debug(flags)
+        #gc.set_debug(flags)
         gc.collect()
         ##print gc.get_referrers(c)
         ##print gc.get_objects()
-- 
1.7.1


From ed6538d6ac10b45c7d170b4a3298b54c77265e7a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 14 Nov 2013 09:27:27 -0500
Subject: [PATCH 037/236] Document test matrix

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 README.rst |   34 ++++++++++++++++++++++++++++++++++
 1 files changed, 34 insertions(+), 0 deletions(-)

diff --git a/README.rst b/README.rst
index be5f29b..b888a49 100644
--- a/README.rst
+++ b/README.rst
@@ -92,10 +92,44 @@ vsftpd tests you must explicitly set PYCURL_VSFTPD_PATH variable like so::
     # specify full path to vsftpd
     export PYCURL_VSFTPD_PATH=/usr/local/libexec/vsftpd
 
+These instructions work for Python 2.5, 2.6 and 2.7.
+
 .. _nose: https://nose.readthedocs.org/
 .. _bottle: http://bottlepy.org/
 .. _cherrypy: http://www.cherrypy.org/
 
+Test Matrix
+-----------
+
+The test matrix is a separate framework that runs tests on more esoteric
+configurations. It supports:
+
+- Testing against Python 2.4, which bottle does not support.
+- Testing against Python compiled without threads, which requires an out of
+  process test server.
+- Testing against locally compiled libcurl with arbitrary options.
+
+To use the test matrix, first you need to start the test server from
+Python 2.5+ by running:::
+
+    python -m tests.appmanager
+
+Then in a different shell, and preferably in a separate user account,
+run the test matrix:::
+
+    # run ftp tests, etc.
+    export PYCURL_VSFTPD_PATH=vsftpd
+    # create a new work directory, preferably not under pycurl tree
+    mkdir testmatrix
+    cd testmatrix
+    # run the matrix specifying absolute path
+    python /path/to/pycurl/tests/matrix.py
+
+The test matrix will download, build and install supported Python versions
+and supported libcurl versions, then run pycurl tests against each combination.
+To see what the combinations are, look in
+`tests/matrix.py <tests/matrix.py>`_.
+
 Contribute
 ----------
 
-- 
1.7.1


From aa9d9bbfb5965d4818e3de6cf9046268575c15aa Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 14 Nov 2013 09:32:22 -0500
Subject: [PATCH 038/236] Document requirements in readme

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 README.rst |    6 ++++++
 1 files changed, 6 insertions(+), 0 deletions(-)

diff --git a/README.rst b/README.rst
index b888a49..b3661fc 100644
--- a/README.rst
+++ b/README.rst
@@ -34,6 +34,12 @@ Overview
 .. _companies: http://curl.haxx.se/docs/companies.html
 .. _applications: http://curl.haxx.se/libcurl/using/apps.html
 
+Requirements
+------------
+
+- Python 2.4 through 2.7.
+- libcurl 7.19.0 or better.
+
 Installation
 ------------
 
-- 
1.7.1


From 75961723a08252ebcc7cb5d87aac82bfffdccb29 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 14 Nov 2013 09:32:46 -0500
Subject: [PATCH 039/236] Move ci status to the top

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 README.rst |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/README.rst b/README.rst
index b3661fc..43cef02 100644
--- a/README.rst
+++ b/README.rst
@@ -1,6 +1,9 @@
 PycURL: Python interface to libcurl
 ====================================
 
+.. image:: https://api.travis-ci.org/pycurl/pycurl.png
+	   :target: https://travis-ci.org/pycurl/pycurl
+
 PycURL is a Python interface to `libcurl`_. PycURL can be used to fetch objects
 identified by a URL from a Python program, similar to the `urllib`_ Python module.
 PycURL is mature, very fast, and supports a lot of features.
@@ -154,9 +157,6 @@ For larger changes:
 #. Discuss your proposal on the mailing list.
 #. When consensus is reached, implement it as described above.
 
-.. image:: https://api.travis-ci.org/pycurl/pycurl.png
-	   :target: https://travis-ci.org/pycurl/pycurl
-
 License
 -------
 
-- 
1.7.1


From df6430ae43275aaa1cfce4adde6996b1060a1afe Mon Sep 17 00:00:00 2001
From: Gisle Vanem <gvanem@yahoo.no>
Date: Mon, 18 Nov 2013 17:26:05 -0500
Subject: [PATCH 040/236] Implement inet_ntop on windows less than vista where it does not exist.

Fixes #50.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   43 +++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 43 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 348f5ba..9d880cd 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -46,15 +46,31 @@
 #include <string.h>
 #include <limits.h>
 #include <sys/types.h>
+
+#if !defined(WIN32)
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
+#endif
+
 #include <curl/curl.h>
 #include <curl/easy.h>
 #include <curl/multi.h>
 #undef NDEBUG
 #include <assert.h>
 
+/* The inet_ntop() was added in ws2_32.dll on Windows Vista [1]. Hence the
+ * Windows SDK targeting lesser OS'es doesn't provide that prototype.
+ * Maybe we should use the local hidden inet_ntop() for all OS'es thus
+ * making a pycurl.pyd work across OS'es w/o rebuilding?
+ *
+ * [1] http://msdn.microsoft.com/en-us/library/windows/desktop/cc805843(v=vs.85).aspx
+ */
+#if defined(WIN32) && ((_WIN32_WINNT <= 0x0600) || (NTDDI_VERSION < NTDDI_VISTA))
+  static const char * pycurl_inet_ntop (int family, void *addr, char *string, size_t string_size);
+  #define inet_ntop(fam,addr,string,size) pycurl_inet_ntop(fam,addr,string,size)
+#endif
+
 /* Ensure we have updated versions */
 #if !defined(PY_VERSION_HEX) || (PY_VERSION_HEX < 0x02040000)
 #  error "Need Python version 2.4 or greater to compile pycurl."
@@ -4417,5 +4433,32 @@ initpycurl(void)
 
 }
 
+#if defined(WIN32) && ((_WIN32_WINNT <= 0x0600) || (NTDDI_VERSION < NTDDI_VISTA))
+/*
+ * Only Winsock on Vista+ has inet_ntop().
+ */
+static const char * pycurl_inet_ntop (int family, void *addr, char *string, size_t string_size)
+{
+  SOCKADDR *sa;
+  int       sa_len;
+
+  if (family == AF_INET6) {
+    struct sockaddr_in6 sa6;
+    memcpy (&sa6.sin6_addr, addr, sizeof(sa6.sin6_addr));
+    sa = (SOCKADDR*)&sa6;
+    sa_len = sizeof(sa6);
+  }
+  else {
+    struct sockaddr_in sa4;
+    memcpy (&sa4.sin_addr, addr, sizeof(sa4.sin_addr));
+    sa = (SOCKADDR*)&sa4;
+    sa_len = sizeof(sa4);
+  }
+  if (WSAAddressToString(sa, sa_len, NULL, string, &string_size))
+     return (NULL);
+  return (string);
+}
+#endif
+
 /* vi:ts=4:et:nowrap
  */
-- 
1.7.1


From 0cd177efa0119ec526fe3cbd5e4759dc9d4f113c Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 18 Nov 2013 17:30:35 -0500
Subject: [PATCH 041/236] Initialize sa_family and zero the remaining members in sockaddrs

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    4 ++++
 1 files changed, 4 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 9d880cd..92a75cd 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -4444,12 +4444,16 @@ static const char * pycurl_inet_ntop (int family, void *addr, char *string, size
 
   if (family == AF_INET6) {
     struct sockaddr_in6 sa6;
+    memset(&sa6, 0, sizeof sa6);
+    sa6.sa_family = AF_INET6;
     memcpy (&sa6.sin6_addr, addr, sizeof(sa6.sin6_addr));
     sa = (SOCKADDR*)&sa6;
     sa_len = sizeof(sa6);
   }
   else {
     struct sockaddr_in sa4;
+    memset(&sa4, 0, sizeof sa4);
+    sa4.sa_family = AF_INET;
     memcpy (&sa4.sin_addr, addr, sizeof(sa4.sin_addr));
     sa = (SOCKADDR*)&sa4;
     sa_len = sizeof(sa4);
-- 
1.7.1


From 2c3370a19f03e84893cb154d97ec7ea1a9e28963 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 18 Nov 2013 17:32:00 -0500
Subject: [PATCH 042/236] Indentation and coding style

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   47 +++++++++++++++++++++++------------------------
 1 files changed, 23 insertions(+), 24 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 92a75cd..0447320 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -67,8 +67,8 @@
  * [1] http://msdn.microsoft.com/en-us/library/windows/desktop/cc805843(v=vs.85).aspx
  */
 #if defined(WIN32) && ((_WIN32_WINNT <= 0x0600) || (NTDDI_VERSION < NTDDI_VISTA))
-  static const char * pycurl_inet_ntop (int family, void *addr, char *string, size_t string_size);
-  #define inet_ntop(fam,addr,string,size) pycurl_inet_ntop(fam,addr,string,size)
+    static const char * pycurl_inet_ntop (int family, void *addr, char *string, size_t string_size);
+    #define inet_ntop(fam,addr,string,size) pycurl_inet_ntop(fam,addr,string,size)
 #endif
 
 /* Ensure we have updated versions */
@@ -4439,28 +4439,27 @@ initpycurl(void)
  */
 static const char * pycurl_inet_ntop (int family, void *addr, char *string, size_t string_size)
 {
-  SOCKADDR *sa;
-  int       sa_len;
-
-  if (family == AF_INET6) {
-    struct sockaddr_in6 sa6;
-    memset(&sa6, 0, sizeof sa6);
-    sa6.sa_family = AF_INET6;
-    memcpy (&sa6.sin6_addr, addr, sizeof(sa6.sin6_addr));
-    sa = (SOCKADDR*)&sa6;
-    sa_len = sizeof(sa6);
-  }
-  else {
-    struct sockaddr_in sa4;
-    memset(&sa4, 0, sizeof sa4);
-    sa4.sa_family = AF_INET;
-    memcpy (&sa4.sin_addr, addr, sizeof(sa4.sin_addr));
-    sa = (SOCKADDR*)&sa4;
-    sa_len = sizeof(sa4);
-  }
-  if (WSAAddressToString(sa, sa_len, NULL, string, &string_size))
-     return (NULL);
-  return (string);
+    SOCKADDR *sa;
+    int       sa_len;
+
+    if (family == AF_INET6) {
+        struct sockaddr_in6 sa6;
+        memset(&sa6, 0, sizeof(sa6));
+        sa6.sa_family = AF_INET6;
+        memcpy(&sa6.sin6_addr, addr, sizeof(sa6.sin6_addr));
+        sa = (SOCKADDR*) &sa6;
+        sa_len = sizeof(sa6);
+    } else {
+        struct sockaddr_in sa4;
+        memset(&sa4, 0, sizeof(sa4));
+        sa4.sa_family = AF_INET;
+        memcpy(&sa4.sin_addr, addr, sizeof(sa4.sin_addr));
+        sa = (SOCKADDR*) &sa4;
+        sa_len = sizeof(sa4);
+    }
+    if (WSAAddressToString(sa, sa_len, NULL, string, &string_size))
+        return NULL;
+    return string;
 }
 #endif
 
-- 
1.7.1


From 36edad9cd7e8c9800cf0e956df3ec140d141fbd2 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 18 Nov 2013 17:38:41 -0500
Subject: [PATCH 043/236] Handle bogus address families in our inet_ntop implementation

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   12 +++++++++++-
 1 files changed, 11 insertions(+), 1 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 0447320..a7098b0 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -59,6 +59,13 @@
 #undef NDEBUG
 #include <assert.h>
 
+#if defined(WIN32)
+/* supposedly not present in errno.h provided with VC */
+# if !defined(EAFNOSUPPORT)
+#  define EAFNOSUPPORT 97
+# endif
+#endif
+
 /* The inet_ntop() was added in ws2_32.dll on Windows Vista [1]. Hence the
  * Windows SDK targeting lesser OS'es doesn't provide that prototype.
  * Maybe we should use the local hidden inet_ntop() for all OS'es thus
@@ -4449,13 +4456,16 @@ static const char * pycurl_inet_ntop (int family, void *addr, char *string, size
         memcpy(&sa6.sin6_addr, addr, sizeof(sa6.sin6_addr));
         sa = (SOCKADDR*) &sa6;
         sa_len = sizeof(sa6);
-    } else {
+    } else if (family == AF_INET) {
         struct sockaddr_in sa4;
         memset(&sa4, 0, sizeof(sa4));
         sa4.sa_family = AF_INET;
         memcpy(&sa4.sin_addr, addr, sizeof(sa4.sin_addr));
         sa = (SOCKADDR*) &sa4;
         sa_len = sizeof(sa4);
+    } else {
+        errno = EAFNOSUPPORT;
+        return NULL;
     }
     if (WSAAddressToString(sa, sa_len, NULL, string, &string_size))
         return NULL;
-- 
1.7.1


From 7279ddd1789ad07bfd1d791be10603d0062469a2 Mon Sep 17 00:00:00 2001
From: Gisle Vanem <gvanem@yahoo.no>
Date: Thu, 21 Nov 2013 19:28:25 -0500
Subject: [PATCH 044/236] _WIN32_WINNT < 0x0600, since 0x0600 is Vista

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index a7098b0..62e6cf6 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -73,7 +73,7 @@
  *
  * [1] http://msdn.microsoft.com/en-us/library/windows/desktop/cc805843(v=vs.85).aspx
  */
-#if defined(WIN32) && ((_WIN32_WINNT <= 0x0600) || (NTDDI_VERSION < NTDDI_VISTA))
+#if defined(WIN32) && ((_WIN32_WINNT < 0x0600) || (NTDDI_VERSION < NTDDI_VISTA))
     static const char * pycurl_inet_ntop (int family, void *addr, char *string, size_t string_size);
     #define inet_ntop(fam,addr,string,size) pycurl_inet_ntop(fam,addr,string,size)
 #endif
@@ -4440,7 +4440,7 @@ initpycurl(void)
 
 }
 
-#if defined(WIN32) && ((_WIN32_WINNT <= 0x0600) || (NTDDI_VERSION < NTDDI_VISTA))
+#if defined(WIN32) && ((_WIN32_WINNT < 0x0600) || (NTDDI_VERSION < NTDDI_VISTA))
 /*
  * Only Winsock on Vista+ has inet_ntop().
  */
-- 
1.7.1


From 61cf72873bb64a15c3d3f01c1854641de660dd1c Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 21 Nov 2013 19:50:17 -0500
Subject: [PATCH 045/236] Try to fix socket events test not producing a consistent number of events

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/app.py                      |    5 +++++
 tests/multi_socket_select_test.py |   10 ++++++----
 2 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/tests/app.py b/tests/app.py
index 7da4728..adae4db 100644
--- a/tests/app.py
+++ b/tests/app.py
@@ -12,6 +12,11 @@ app.debug = True
 def ok():
     return 'success'
 
+@app.route('/short_wait')
+def ok():
+    _time.sleep(0.1)
+    return 'success'
+
 @app.route('/status/403')
 def forbidden():
     return bottle.HTTPResponse('forbidden', 403)
diff --git a/tests/multi_socket_select_test.py b/tests/multi_socket_select_test.py
index 7011bb0..47b361f 100644
--- a/tests/multi_socket_select_test.py
+++ b/tests/multi_socket_select_test.py
@@ -29,9 +29,12 @@ class MultiSocketSelectTest(unittest.TestCase):
         timeout = 0
 
         urls = [
-            'http://localhost:8380/success',
-            'http://localhost:8381/success',
-            'http://localhost:8382/success',
+            # we need libcurl to actually wait on the handles,
+            # and initiate polling.
+            # thus use urls that sleep for a bit.
+            'http://localhost:8380/short_wait',
+            'http://localhost:8381/short_wait',
+            'http://localhost:8382/short_wait',
         ]
 
         socket_events = []
@@ -49,7 +52,6 @@ class MultiSocketSelectTest(unittest.TestCase):
 
         # init
         m = pycurl.CurlMulti()
-        m.setopt(pycurl.M_PIPELINING, 1)
         m.setopt(pycurl.M_SOCKETFUNCTION, socket)
         m.handles = []
         for url in urls:
-- 
1.7.1


From 4534e81cb745e52eb66dce2a19d89b5ed83ef9e6 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 21 Nov 2013 19:52:31 -0500
Subject: [PATCH 046/236] Try to fix socket test not producing a consistent number of events, not sure why this works though

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/multi_socket_test.py |    9 ++++++---
 1 files changed, 6 insertions(+), 3 deletions(-)

diff --git a/tests/multi_socket_test.py b/tests/multi_socket_test.py
index 106132e..e594851 100644
--- a/tests/multi_socket_test.py
+++ b/tests/multi_socket_test.py
@@ -25,9 +25,12 @@ def teardown_module(mod):
 class MultiSocketTest(unittest.TestCase):
     def test_multi_socket(self):
         urls = [
-            'http://localhost:8380/success',
-            'http://localhost:8381/success',
-            'http://localhost:8382/success',
+            # not sure why requesting /success produces no events.
+            # see multi_socket_select_test.py for a longer explanation
+            # why short wait is used there.
+            'http://localhost:8380/short_wait',
+            'http://localhost:8381/short_wait',
+            'http://localhost:8382/short_wait',
         ]
 
         socket_events = []
-- 
1.7.1


From 9f3b220546ff06f21b9862e5e6fe019e3f0b8508 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 21 Nov 2013 19:54:06 -0500
Subject: [PATCH 047/236] Fix failing multi test on linux - same as previous commit

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/multi_test.py |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/tests/multi_test.py b/tests/multi_test.py
index 974c364..97bba18 100644
--- a/tests/multi_test.py
+++ b/tests/multi_test.py
@@ -297,9 +297,9 @@ class MultiTest(unittest.TestCase):
         c1 = pycurl.Curl()
         c2 = pycurl.Curl()
         c3 = pycurl.Curl()
-        c1.setopt(c1.URL, "http://localhost:8380/success")
-        c2.setopt(c2.URL, "http://localhost:8381/success")
-        c3.setopt(c3.URL, "http://localhost:8382/success")
+        c1.setopt(c1.URL, "http://localhost:8380/short_wait")
+        c2.setopt(c2.URL, "http://localhost:8381/short_wait")
+        c3.setopt(c3.URL, "http://localhost:8382/short_wait")
         c1.body = util.StringIO()
         c2.body = util.StringIO()
         c3.body = util.StringIO()
-- 
1.7.1


From 93840801f11a94087e834d31fcaa547ed380a253 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 21 Nov 2013 19:57:32 -0500
Subject: [PATCH 048/236] Why do these tests set pipelining?

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/multi_socket_test.py |    1 -
 tests/multi_timer_test.py  |    1 -
 tests/reset_test.py        |    3 ---
 3 files changed, 0 insertions(+), 5 deletions(-)

diff --git a/tests/multi_socket_test.py b/tests/multi_socket_test.py
index e594851..6e3c25f 100644
--- a/tests/multi_socket_test.py
+++ b/tests/multi_socket_test.py
@@ -42,7 +42,6 @@ class MultiSocketTest(unittest.TestCase):
 
         # init
         m = pycurl.CurlMulti()
-        m.setopt(pycurl.M_PIPELINING, 1)
         m.setopt(pycurl.M_SOCKETFUNCTION, socket)
         m.handles = []
         for url in urls:
diff --git a/tests/multi_timer_test.py b/tests/multi_timer_test.py
index 64dc497..6e61552 100644
--- a/tests/multi_timer_test.py
+++ b/tests/multi_timer_test.py
@@ -39,7 +39,6 @@ class MultiSocketTest(unittest.TestCase):
 
         # init
         m = pycurl.CurlMulti()
-        m.setopt(pycurl.M_PIPELINING, 1)
         m.setopt(pycurl.M_TIMERFUNCTION, timer)
         m.handles = []
         for url in urls:
diff --git a/tests/reset_test.py b/tests/reset_test.py
index 8482e2f..52af981 100644
--- a/tests/reset_test.py
+++ b/tests/reset_test.py
@@ -20,9 +20,6 @@ class ResetTest(unittest.TestCase):
         outf = util.StringIO()
         cm = pycurl.CurlMulti()
 
-        # Set multi handle's options
-        cm.setopt(pycurl.M_PIPELINING, 1)
-
         eh = pycurl.Curl()
 
         for x in range(1, 20):
-- 
1.7.1


From f5f6b550ff7df0b00fcdc00cb21d710912010cd4 Mon Sep 17 00:00:00 2001
From: Romulo A. Ceccon <romuloceccon@gmail.com>
Date: Mon, 25 Nov 2013 12:04:02 -0200
Subject: [PATCH 049/236] Simplified check for libcurl 7.19.1

Simplified check for libcurl 7.19.1 or greater,
necessary for options CURLOPT_USERNAME,
CURLOPT_PROXYUSERNAME and CURLOPT_CERTINFO.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    4 +---
 1 files changed, 1 insertions(+), 3 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 62e6cf6..196d009 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -86,9 +86,7 @@
 #  error "Need libcurl version 7.19.0 or greater to compile pycurl."
 #endif
 
-#if LIBCURL_VERSION_MAJOR >= 8 || \
-    LIBCURL_VERSION_MAJOR == 7 && LIBCURL_VERSION_MINOR >= 20 || \
-    LIBCURL_VERSION_MAJOR == 7 && LIBCURL_VERSION_MINOR == 19 && LIBCURL_VERSION_PATCH >= 1
+#if LIBCURL_VERSION_NUM >= 0x071301 /* check for 7.19.1 or greater */
 #define HAVE_CURLOPT_USERNAME
 #define HAVE_CURLOPT_PROXYUSERNAME
 #define HAVE_CURLOPT_CERTINFO
-- 
1.7.1


From 06a8cf0f1e622460243df2bd8395238fd7d0f91a Mon Sep 17 00:00:00 2001
From: Romulo A. Ceccon <romuloceccon@gmail.com>
Date: Mon, 25 Nov 2013 12:07:24 -0200
Subject: [PATCH 050/236] Safer define for Py_TYPE()

Define Py_TYPE() only for Python 2.6 or greater.
If it's not defined and Python version is correct
then something else is wrong.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 196d009..2715740 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -104,7 +104,7 @@ typedef int Py_ssize_t;
 #endif
 
 /* Py_TYPE is defined by Python 2.6+ */
-#if !defined(Py_TYPE)
+#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TYPE)
 #  define Py_TYPE(x) (x)->ob_type
 #endif
 
-- 
1.7.1


From f3e4f3ad514ea710c2d57d509a94e00523d90e73 Mon Sep 17 00:00:00 2001
From: Romulo A. Ceccon <romuloceccon@gmail.com>
Date: Mon, 25 Nov 2013 12:10:53 -0200
Subject: [PATCH 051/236] Removed unnecessary check for Python 2.2 or older

Defining PY_LONG_LONG is not needed anymore since
pycurl already requires Python 2.4 or greater.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    4 ----
 1 files changed, 0 insertions(+), 4 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 2715740..592cb3b 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -297,10 +297,6 @@ typedef struct {
 // python utility functions
 **************************************************************************/
 
-#if (PY_VERSION_HEX < 0x02030000) && !defined(PY_LONG_LONG)
-#  define PY_LONG_LONG LONG_LONG
-#endif
-
 /* Like PyString_AsString(), but set an exception if the string contains
  * embedded NULs. Actually PyString_AsStringAndSize() already does that for
  * us if the `len' parameter is NULL - see Objects/stringobject.c.
-- 
1.7.1


From b9993d7d26ced62ce4495791459a54ab3b64217d Mon Sep 17 00:00:00 2001
From: Romulo A. Ceccon <romuloceccon@gmail.com>
Date: Mon, 25 Nov 2013 12:16:42 -0200
Subject: [PATCH 052/236] Removed defines for PY_SSIZE_T_MAX/MIN

Removed unnecessary defines for PY_SSIZE_T_MAX
and PY_SSIZE_T_MIN.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    4 +---
 1 files changed, 1 insertions(+), 3 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 592cb3b..9668fe1 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -97,10 +97,8 @@
 #endif
 
 /* Python < 2.5 compat for Py_ssize_t */
-#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
+#if PY_VERSION_HEX < 0x02050000
 typedef int Py_ssize_t;
-#define PY_SSIZE_T_MAX INT_MAX
-#define PY_SSIZE_T_MIN INT_MIN
 #endif
 
 /* Py_TYPE is defined by Python 2.6+ */
-- 
1.7.1


From 892f34b39eb702da9eb04a8dbaa73bd1d3b17eae Mon Sep 17 00:00:00 2001
From: Romulo A. Ceccon <romuloceccon@gmail.com>
Date: Mon, 25 Nov 2013 13:53:48 -0200
Subject: [PATCH 053/236] ZAP() replaced by equivalent Py_CLEAR()

ZAP() define is equivalent to Py_CLEAR(),
introduced by Python 2.4, which is already
required by the current pycurl version.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   70 +++++++++++++++++++++++++--------------------------------
 1 files changed, 31 insertions(+), 39 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 9668fe1..bbeae64 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -283,14 +283,6 @@ typedef struct {
 } while (0)
 
 
-/* Safe XDECREF for object states that handles nested deallocations */
-#define ZAP(v) do {\
-    PyObject *tmp = (PyObject *)(v); \
-    (v) = NULL; \
-    Py_XDECREF(tmp); \
-} while (0)
-
-
 /*************************************************************************
 // python utility functions
 **************************************************************************/
@@ -835,7 +827,7 @@ do_share_traverse(CurlShareObject *self, visitproc visit, void *arg)
 static int
 do_share_clear(CurlShareObject *self)
 {
-    ZAP(self->dict);
+    Py_CLEAR(self->dict);
     return 0;
 }
 
@@ -854,7 +846,7 @@ do_share_dealloc(CurlShareObject *self){
     PyObject_GC_UnTrack(self);
     Py_TRASHCAN_SAFE_BEGIN(self);
 
-    ZAP(self->dict);
+    Py_CLEAR(self->dict);
     util_share_close(self);
 
     PyObject_GC_Del(self);
@@ -1058,7 +1050,7 @@ util_curl_xdecref(CurlObject *self, int flags, CURL *handle)
 {
     if (flags & PYCURL_MEMGROUP_ATTRDICT) {
         /* Decrement refcount for attributes dictionary. */
-        ZAP(self->dict);
+        Py_CLEAR(self->dict);
     }
 
     if (flags & PYCURL_MEMGROUP_MULTI) {
@@ -1075,24 +1067,24 @@ util_curl_xdecref(CurlObject *self, int flags, CURL *handle)
 
     if (flags & PYCURL_MEMGROUP_CALLBACK) {
         /* Decrement refcount for python callbacks. */
-        ZAP(self->w_cb);
-        ZAP(self->h_cb);
-        ZAP(self->r_cb);
-        ZAP(self->pro_cb);
-        ZAP(self->debug_cb);
-        ZAP(self->ioctl_cb);
+        Py_CLEAR(self->w_cb);
+        Py_CLEAR(self->h_cb);
+        Py_CLEAR(self->r_cb);
+        Py_CLEAR(self->pro_cb);
+        Py_CLEAR(self->debug_cb);
+        Py_CLEAR(self->ioctl_cb);
     }
 
     if (flags & PYCURL_MEMGROUP_FILE) {
         /* Decrement refcount for python file objects. */
-        ZAP(self->readdata_fp);
-        ZAP(self->writedata_fp);
-        ZAP(self->writeheader_fp);
+        Py_CLEAR(self->readdata_fp);
+        Py_CLEAR(self->writedata_fp);
+        Py_CLEAR(self->writeheader_fp);
     }
 
     if (flags & PYCURL_MEMGROUP_POSTFIELDS) {
         /* Decrement refcount for postfields object */
-        ZAP(self->postfields_obj);
+        Py_CLEAR(self->postfields_obj);
     }
     
     if (flags & PYCURL_MEMGROUP_SHARE) {
@@ -1109,7 +1101,7 @@ util_curl_xdecref(CurlObject *self, int flags, CURL *handle)
 
     if (flags & PYCURL_MEMGROUP_HTTPPOST) {
         /* Decrement refcounts for httppost related references. */
-        ZAP(self->httppost_ref_list);
+        Py_CLEAR(self->httppost_ref_list);
     }
 }
 
@@ -1177,7 +1169,7 @@ do_curl_dealloc(CurlObject *self)
     PyObject_GC_UnTrack(self);
     Py_TRASHCAN_SAFE_BEGIN(self)
 
-    ZAP(self->dict);
+    Py_CLEAR(self->dict);
     util_curl_close(self);
 
     PyObject_GC_Del(self);
@@ -1840,7 +1832,7 @@ util_curl_unsetopt(CurlObject *self, int option)
         break;
     case CURLOPT_WRITEHEADER:
         SETOPT((void *) 0);
-        ZAP(self->writeheader_fp);
+        Py_CLEAR(self->writeheader_fp);
         break;
     case CURLOPT_CAINFO:
     case CURLOPT_CAPATH:
@@ -2109,15 +2101,15 @@ do_curl_setopt(CurlObject *self, PyObject *args)
 
         switch (option) {
         case CURLOPT_READDATA:
-            ZAP(self->readdata_fp);
+            Py_CLEAR(self->readdata_fp);
             self->readdata_fp = obj;
             break;
         case CURLOPT_WRITEDATA:
-            ZAP(self->writedata_fp);
+            Py_CLEAR(self->writedata_fp);
             self->writedata_fp = obj;
             break;
         case CURLOPT_WRITEHEADER:
-            ZAP(self->writeheader_fp);
+            Py_CLEAR(self->writeheader_fp);
             self->writeheader_fp = obj;
             break;
         default:
@@ -2419,58 +2411,58 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                 return NULL;
             }
             Py_INCREF(obj);
-            ZAP(self->writedata_fp);
-            ZAP(self->w_cb);
+            Py_CLEAR(self->writedata_fp);
+            Py_CLEAR(self->w_cb);
             self->w_cb = obj;
             curl_easy_setopt(self->handle, CURLOPT_WRITEFUNCTION, w_cb);
             curl_easy_setopt(self->handle, CURLOPT_WRITEDATA, self);
             break;
         case CURLOPT_HEADERFUNCTION:
             Py_INCREF(obj);
-            ZAP(self->h_cb);
+            Py_CLEAR(self->h_cb);
             self->h_cb = obj;
             curl_easy_setopt(self->handle, CURLOPT_HEADERFUNCTION, h_cb);
             curl_easy_setopt(self->handle, CURLOPT_WRITEHEADER, self);
             break;
         case CURLOPT_READFUNCTION:
             Py_INCREF(obj);
-            ZAP(self->readdata_fp);
-            ZAP(self->r_cb);
+            Py_CLEAR(self->readdata_fp);
+            Py_CLEAR(self->r_cb);
             self->r_cb = obj;
             curl_easy_setopt(self->handle, CURLOPT_READFUNCTION, r_cb);
             curl_easy_setopt(self->handle, CURLOPT_READDATA, self);
             break;
         case CURLOPT_PROGRESSFUNCTION:
             Py_INCREF(obj);
-            ZAP(self->pro_cb);
+            Py_CLEAR(self->pro_cb);
             self->pro_cb = obj;
             curl_easy_setopt(self->handle, CURLOPT_PROGRESSFUNCTION, pro_cb);
             curl_easy_setopt(self->handle, CURLOPT_PROGRESSDATA, self);
             break;
         case CURLOPT_DEBUGFUNCTION:
             Py_INCREF(obj);
-            ZAP(self->debug_cb);
+            Py_CLEAR(self->debug_cb);
             self->debug_cb = obj;
             curl_easy_setopt(self->handle, CURLOPT_DEBUGFUNCTION, debug_cb);
             curl_easy_setopt(self->handle, CURLOPT_DEBUGDATA, self);
             break;
         case CURLOPT_IOCTLFUNCTION:
             Py_INCREF(obj);
-            ZAP(self->ioctl_cb);
+            Py_CLEAR(self->ioctl_cb);
             self->ioctl_cb = obj;
             curl_easy_setopt(self->handle, CURLOPT_IOCTLFUNCTION, ioctl_cb);
             curl_easy_setopt(self->handle, CURLOPT_IOCTLDATA, self);
             break;
         case CURLOPT_OPENSOCKETFUNCTION:
             Py_INCREF(obj);
-            ZAP(self->opensocket_cb);
+            Py_CLEAR(self->opensocket_cb);
             self->opensocket_cb = obj;
             curl_easy_setopt(self->handle, CURLOPT_OPENSOCKETFUNCTION, opensocket_cb);
             curl_easy_setopt(self->handle, CURLOPT_OPENSOCKETDATA, self);
             break;
         case CURLOPT_SEEKFUNCTION:
             Py_INCREF(obj);
-            ZAP(self->seek_cb);
+            Py_CLEAR(self->seek_cb);
             self->seek_cb = obj;
             curl_easy_setopt(self->handle, CURLOPT_SEEKFUNCTION, seek_cb);
             curl_easy_setopt(self->handle, CURLOPT_SEEKDATA, self);
@@ -2756,7 +2748,7 @@ do_multi_dealloc(CurlMultiObject *self)
     PyObject_GC_UnTrack(self);
     Py_TRASHCAN_SAFE_BEGIN(self)
 
-    ZAP(self->dict);
+    Py_CLEAR(self->dict);
     util_multi_close(self);
 
     PyObject_GC_Del(self);
@@ -2781,7 +2773,7 @@ do_multi_close(CurlMultiObject *self)
 static int
 do_multi_clear(CurlMultiObject *self)
 {
-    ZAP(self->dict);
+    Py_CLEAR(self->dict);
     return 0;
 }
 
-- 
1.7.1


From 97e2b446d2271533fe4f6637a3b8aa99c3bb2f25 Mon Sep 17 00:00:00 2001
From: Romulo A. Ceccon <romuloceccon@gmail.com>
Date: Mon, 25 Nov 2013 15:46:21 -0200
Subject: [PATCH 054/236] Silence warning about unused pycurl_ssl_*()

pycurl_ssl_init() and pycurl_ssl_cleanup() should
be conditionally declared even if thread support
is not available.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index bbeae64..fe6c76e 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -746,6 +746,7 @@ share_unlock_callback(CURL *handle, curl_lock_data data, void *userptr)
 
 #else /* WITH_THREAD */
 
+#if defined(PYCURL_NEED_SSL_TSL)
 static void pycurl_ssl_init(void)
 {
     return;
@@ -755,6 +756,7 @@ static void pycurl_ssl_cleanup(void)
 {
     return;
 }
+#endif
 
 #endif /* WITH_THREAD */
 
-- 
1.7.1


From 198ca8d5f26c52046d225cd71e72abad90d1cafd Mon Sep 17 00:00:00 2001
From: Romulo A. Ceccon <romuloceccon@gmail.com>
Date: Tue, 26 Nov 2013 10:14:30 -0200
Subject: [PATCH 055/236] Disable conditional compilation of 'pause' feature

PycURL already requires cURL 7.19.0. Checking for
cURL 7.18.0 is therefore not required to enable
curl_easy_pause() function and related options.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   24 ++----------------------
 1 files changed, 2 insertions(+), 22 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index fe6c76e..ec43e39 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1581,24 +1581,14 @@ read_callback(char *ptr, size_t size, size_t nmemb, void *stream)
     }
     else if (PyInt_Check(result)) {
         long r = PyInt_AsLong(result);
-        if (r != CURL_READFUNC_ABORT
-#if LIBCURL_VERSION_NUM >= 0x071200  /* CURL_READFUNC_PAUSE appeared in libcurl 7.18.0 */
-            && r != CURL_READFUNC_PAUSE
-#endif
-            ) {
+        if (r != CURL_READFUNC_ABORT && r != CURL_READFUNC_PAUSE)
             goto type_error;
-        }
         ret = r; /* either CURL_READFUNC_ABORT or CURL_READFUNC_PAUSE */
     }
     else if (PyLong_Check(result)) {
         long r = PyLong_AsLong(result);
-        if (r != CURL_READFUNC_ABORT
-#if LIBCURL_VERSION_NUM >= 0x071200  /* CURL_READFUNC_PAUSE appeared in libcurl 7.18.0 */
-            && r != CURL_READFUNC_PAUSE
-#endif
-            ) {
+        if (r != CURL_READFUNC_ABORT && r != CURL_READFUNC_PAUSE)
             goto type_error;
-        }
         ret = r; /* either CURL_READFUNC_ABORT or CURL_READFUNC_PAUSE */
     }
     else {
@@ -2635,8 +2625,6 @@ do_curl_getinfo(CurlObject *self, PyObject *args)
     return NULL;
 }
 
-#if LIBCURL_VERSION_NUM >= 0x071200  /* curl_easy_pause() appeared in libcurl 7.18.0 */
-
 /* curl_easy_pause() can be called from inside a callback or outside */
 static PyObject *
 do_curl_pause(CurlObject *self, PyObject *args)
@@ -2686,8 +2674,6 @@ static const char co_pause_doc [] =
     "Pauses or unpauses a curl handle. Bitmask should be a value such as PAUSE_RECV or PAUSE_CONT.  "
     "Raises pycurl.error exception upon failure.\n";
 
-#endif
-
 /*************************************************************************
 // CurlMultiObject
 **************************************************************************/
@@ -3428,9 +3414,7 @@ static PyMethodDef curlobject_methods[] = {
     {"close", (PyCFunction)do_curl_close, METH_NOARGS, co_close_doc},
     {"errstr", (PyCFunction)do_curl_errstr, METH_NOARGS, co_errstr_doc},
     {"getinfo", (PyCFunction)do_curl_getinfo, METH_VARARGS, co_getinfo_doc},
-#if LIBCURL_VERSION_NUM >= 0x071200  /* curl_easy_pause() appeared in libcurl 7.18.0 */
     {"pause", (PyCFunction)do_curl_pause, METH_VARARGS, co_pause_doc},
-#endif
     {"perform", (PyCFunction)do_curl_perform, METH_NOARGS, co_perform_doc},
     {"setopt", (PyCFunction)do_curl_setopt, METH_VARARGS, co_setopt_doc},
     {"unsetopt", (PyCFunction)do_curl_unsetopt, METH_VARARGS, co_unsetopt_doc},
@@ -3937,9 +3921,7 @@ initpycurl(void)
 
     /* Abort curl_read_callback(). */
     insint_c(d, "READFUNC_ABORT", CURL_READFUNC_ABORT);
-#if LIBCURL_VERSION_NUM >= 0x071200  /* CURL_READFUNC_PAUSE appeared in libcurl 7.18.0 */
     insint_c(d, "READFUNC_PAUSE", CURL_READFUNC_PAUSE);
-#endif
 
     /* Pause curl_write_callback(). */
     insint_c(d, "WRITEFUNC_PAUSE", CURL_WRITEFUNC_PAUSE);
@@ -4316,13 +4298,11 @@ initpycurl(void)
     insint_c(d, "INFO_CERTINFO", CURLINFO_CERTINFO);
 #endif
 
-#if LIBCURL_VERSION_NUM >= 0x071200  /* curl_easy_pause() appeared in libcurl 7.18.0 */
     /* CURLPAUSE: symbolic constants for pause(bitmask) */
     insint_c(d, "PAUSE_RECV", CURLPAUSE_RECV);
     insint_c(d, "PAUSE_SEND", CURLPAUSE_SEND);
     insint_c(d, "PAUSE_ALL",  CURLPAUSE_ALL);
     insint_c(d, "PAUSE_CONT", CURLPAUSE_CONT);
-#endif
 
 #if LIBCURL_VERSION_NUM >= 0x071800
     insint_c(d, "DNS_SERVERS", CURLOPT_DNS_SERVERS);
-- 
1.7.1


From 39513b785250ec4ac592e1b8a21acaa4466db8c6 Mon Sep 17 00:00:00 2001
From: Romulo A. Ceccon <romuloceccon@gmail.com>
Date: Tue, 26 Nov 2013 10:22:58 -0200
Subject: [PATCH 056/236] Define helper HAVE_CURLOPT_DNS_SERVERS

Instead of checking against LIBCURL_VERSION_NUM
every time define the helper
HAVE_CURLOPT_DNS_SERVERS.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    8 ++++++--
 1 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index ec43e39..5c687ca 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -96,6 +96,10 @@
 #define HAVE_CURLOPT_RESOLVE
 #endif
 
+#if LIBCURL_VERSION_NUM >= 0x071800 /* check for 7.24.0 or greater */
+#define HAVE_CURLOPT_DNS_SERVERS
+#endif
+
 /* Python < 2.5 compat for Py_ssize_t */
 #if PY_VERSION_HEX < 0x02050000
 typedef int Py_ssize_t;
@@ -1975,7 +1979,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
         case CURLOPT_SSH_HOST_PUBLIC_KEY_MD5:
         case CURLOPT_CRLFILE:
         case CURLOPT_ISSUERCERT:
-#if LIBCURL_VERSION_NUM >= 0x071800
+#ifdef HAVE_CURLOPT_DNS_SERVERS
         case CURLOPT_DNS_SERVERS:
 #endif
 /* FIXME: check if more of these options allow binary data */
@@ -4304,7 +4308,7 @@ initpycurl(void)
     insint_c(d, "PAUSE_ALL",  CURLPAUSE_ALL);
     insint_c(d, "PAUSE_CONT", CURLPAUSE_CONT);
 
-#if LIBCURL_VERSION_NUM >= 0x071800
+#ifdef HAVE_CURLOPT_DNS_SERVERS
     insint_c(d, "DNS_SERVERS", CURLOPT_DNS_SERVERS);
 #endif
 
-- 
1.7.1


From 27c1ab2966de6107df4ae0f611c07d9f16fb324e Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 3 Dec 2013 16:14:10 -0500
Subject: [PATCH 057/236] Add contributing file to guide people to the mailing list

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 CONTRIBUTING |   16 ++++++++++++++++
 1 files changed, 16 insertions(+), 0 deletions(-)
 create mode 100644 CONTRIBUTING

diff --git a/CONTRIBUTING b/CONTRIBUTING
new file mode 100644
index 0000000..7ae75e8
--- /dev/null
+++ b/CONTRIBUTING
@@ -0,0 +1,16 @@
+Please take a moment to consider whether your issue is a bug report or a
+support request.
+
+A bug report should contain code to reproduce the bug, patch to fix the bug,
+or at the very least a pointer to some code in PycURL that you suspect to be
+the problem. If you don't have any of these, your issue is likely a support
+request.
+
+Please send support requests to our mailing list:
+
+http://cool.haxx.se/mailman/listinfo/curl-and-python
+
+People have also had success with getting help at Stack Overflow.
+
+If you are not sure whether your issue is a support request or a bug report,
+please post it to the mailing list.
-- 
1.7.1


From 9da5e62bf84b74f0035e36e0df13b52c4b52af25 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 3 Dec 2013 16:15:47 -0500
Subject: [PATCH 058/236] Change to markdown to hyperlink links

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 CONTRIBUTING    |   16 ----------------
 CONTRIBUTING.md |   16 ++++++++++++++++
 2 files changed, 16 insertions(+), 16 deletions(-)
 delete mode 100644 CONTRIBUTING
 create mode 100644 CONTRIBUTING.md

diff --git a/CONTRIBUTING b/CONTRIBUTING
deleted file mode 100644
index 7ae75e8..0000000
--- a/CONTRIBUTING
+++ /dev/null
@@ -1,16 +0,0 @@
-Please take a moment to consider whether your issue is a bug report or a
-support request.
-
-A bug report should contain code to reproduce the bug, patch to fix the bug,
-or at the very least a pointer to some code in PycURL that you suspect to be
-the problem. If you don't have any of these, your issue is likely a support
-request.
-
-Please send support requests to our mailing list:
-
-http://cool.haxx.se/mailman/listinfo/curl-and-python
-
-People have also had success with getting help at Stack Overflow.
-
-If you are not sure whether your issue is a support request or a bug report,
-please post it to the mailing list.
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
new file mode 100644
index 0000000..7ae75e8
--- /dev/null
+++ b/CONTRIBUTING.md
@@ -0,0 +1,16 @@
+Please take a moment to consider whether your issue is a bug report or a
+support request.
+
+A bug report should contain code to reproduce the bug, patch to fix the bug,
+or at the very least a pointer to some code in PycURL that you suspect to be
+the problem. If you don't have any of these, your issue is likely a support
+request.
+
+Please send support requests to our mailing list:
+
+http://cool.haxx.se/mailman/listinfo/curl-and-python
+
+People have also had success with getting help at Stack Overflow.
+
+If you are not sure whether your issue is a support request or a bug report,
+please post it to the mailing list.
-- 
1.7.1


From 6c06f96a9a5013b98aa1523790dbaace8183815a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 16:11:14 -0500
Subject: [PATCH 059/236] Comment out unused variable, leave in code for future debugging

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/util.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/tests/util.py b/tests/util.py
index 7d66f24..87f15a6 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -45,7 +45,7 @@ def wait_for_network_service(netloc, check_interval, num_attempts):
         try:
             conn = create_connection(netloc, check_interval)
         except socket.error:
-            e = sys.exc_info()[1]
+            #e = sys.exc_info()[1]
             _time.sleep(check_interval)
         else:
             conn.close()
-- 
1.7.1


From e1a000d0830229103da9ca2357ebdd6b50a3a9a0 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 10 Dec 2013 21:47:31 -0500
Subject: [PATCH 060/236] Add missing python objects to curl object traverse function

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    5 +++++
 1 files changed, 5 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 5c687ca..cdd57ab 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1228,6 +1228,7 @@ do_curl_traverse(CurlObject *self, visitproc visit, void *arg)
 
     VISIT(self->dict);
     VISIT((PyObject *) self->multi_stack);
+    VISIT((PyObject *) self->share);
 
     VISIT(self->w_cb);
     VISIT(self->h_cb);
@@ -1235,10 +1236,14 @@ do_curl_traverse(CurlObject *self, visitproc visit, void *arg)
     VISIT(self->pro_cb);
     VISIT(self->debug_cb);
     VISIT(self->ioctl_cb);
+    VISIT(self->opensocket_cb);
+    VISIT(self->seek_cb);
 
     VISIT(self->readdata_fp);
     VISIT(self->writedata_fp);
     VISIT(self->writeheader_fp);
+    
+    VISIT(self->postfields_obj);
 
     return 0;
 #undef VISIT
-- 
1.7.1


From 1721f243b767431e7bfeffbca1d2e6201d49b957 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 10 Dec 2013 21:52:41 -0500
Subject: [PATCH 061/236] Extract debug flag

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/memleak_test.py |   32 +++++++++++++++++++-------------
 1 files changed, 19 insertions(+), 13 deletions(-)

diff --git a/tests/memleak_test.py b/tests/memleak_test.py
index 1b1bbd5..0ebf7f3 100644
--- a/tests/memleak_test.py
+++ b/tests/memleak_test.py
@@ -6,19 +6,21 @@ import pycurl
 import unittest
 import gc
 
+debug = False
+
 class MemleakTest(unittest.TestCase):
     def test_collection(self):
         gc.collect()
-        flags = gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE
-        # python 3 has no DEBUG_OBJECTS
-        #if hasattr(gc, 'DEBUG_OBJECTS'):
-            #flags |= gc.DEBUG_OBJECTS
-        #if 1:
-            #flags = flags | gc.DEBUG_STATS
-        #gc.set_debug(flags)
-        gc.collect()
+        if debug:
+            flags = gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE
+            # python 3 has no DEBUG_OBJECTS
+            if hasattr(gc, 'DEBUG_OBJECTS'):
+                flags |= gc.DEBUG_OBJECTS
+                flags |= gc.DEBUG_STATS
+            gc.set_debug(flags)
+            gc.collect()
 
-        #print("Tracked objects:", len(gc.get_objects()))
+            print("Tracked objects:", len(gc.get_objects()))
 
         multi = pycurl.CurlMulti()
         t = []
@@ -33,21 +35,25 @@ class MemleakTest(unittest.TestCase):
         m_id = id(multi)
         searches.append(m_id)
 
-        #print("Tracked objects:", len(gc.get_objects()))
+        if debug:
+            print("Tracked objects:", len(gc.get_objects()))
 
         for curl in t:
             curl.close()
             multi.remove_handle(curl)
 
-        #print("Tracked objects:", len(gc.get_objects()))
+        if debug:
+            print("Tracked objects:", len(gc.get_objects()))
 
         del curl
         del t
         del multi
 
-        #print("Tracked objects:", len(gc.get_objects()))
+        if debug:
+            print("Tracked objects:", len(gc.get_objects()))
         gc.collect()
-        #print("Tracked objects:", len(gc.get_objects()))
+        if debug:
+            print("Tracked objects:", len(gc.get_objects()))
         
         objects = gc.get_objects()
         for search in searches:
-- 
1.7.1


From 6f8fdc60439dd439b309359ee5cee25a48b229d8 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 10 Dec 2013 21:54:42 -0500
Subject: [PATCH 062/236] DRY

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/memleak_test.py |   23 +++++++++++++----------
 1 files changed, 13 insertions(+), 10 deletions(-)

diff --git a/tests/memleak_test.py b/tests/memleak_test.py
index 0ebf7f3..6b8c33e 100644
--- a/tests/memleak_test.py
+++ b/tests/memleak_test.py
@@ -9,8 +9,7 @@ import gc
 debug = False
 
 class MemleakTest(unittest.TestCase):
-    def test_collection(self):
-        gc.collect()
+    def maybe_enable_debug(self):
         if debug:
             flags = gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE
             # python 3 has no DEBUG_OBJECTS
@@ -21,6 +20,14 @@ class MemleakTest(unittest.TestCase):
             gc.collect()
 
             print("Tracked objects:", len(gc.get_objects()))
+    
+    def maybe_print_objects(self):
+        if debug:
+            print("Tracked objects:", len(gc.get_objects()))
+    
+    def test_collection(self):
+        gc.collect()
+        self.maybe_enable_debug()
 
         multi = pycurl.CurlMulti()
         t = []
@@ -35,25 +42,21 @@ class MemleakTest(unittest.TestCase):
         m_id = id(multi)
         searches.append(m_id)
 
-        if debug:
-            print("Tracked objects:", len(gc.get_objects()))
+        self.maybe_print_objects()
 
         for curl in t:
             curl.close()
             multi.remove_handle(curl)
 
-        if debug:
-            print("Tracked objects:", len(gc.get_objects()))
+        self.maybe_print_objects()
 
         del curl
         del t
         del multi
 
-        if debug:
-            print("Tracked objects:", len(gc.get_objects()))
+        self.maybe_print_objects()
         gc.collect()
-        if debug:
-            print("Tracked objects:", len(gc.get_objects()))
+        self.maybe_print_objects()
         
         objects = gc.get_objects()
         for search in searches:
-- 
1.7.1


From 416e8f66b30163312e56e476a7332ec86ea68dc1 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 10 Dec 2013 21:55:49 -0500
Subject: [PATCH 063/236] Ensure debug flags are cleared after each test

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/memleak_test.py |    3 +++
 1 files changed, 3 insertions(+), 0 deletions(-)

diff --git a/tests/memleak_test.py b/tests/memleak_test.py
index 6b8c33e..77b22c8 100644
--- a/tests/memleak_test.py
+++ b/tests/memleak_test.py
@@ -25,6 +25,9 @@ class MemleakTest(unittest.TestCase):
         if debug:
             print("Tracked objects:", len(gc.get_objects()))
     
+    def tearDown(self):
+        gc.set_debug(0)
+    
     def test_collection(self):
         gc.collect()
         self.maybe_enable_debug()
-- 
1.7.1


From 7ade8500b2b5e77a9b8e52b8d1558919aae6986d Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 10 Dec 2013 22:05:11 -0500
Subject: [PATCH 064/236] Add a test for garbage collection of easy + share objects

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/memleak_test.py |   40 +++++++++++++++++++++++++++++++++++++++-
 1 files changed, 39 insertions(+), 1 deletions(-)

diff --git a/tests/memleak_test.py b/tests/memleak_test.py
index 77b22c8..5eff83e 100644
--- a/tests/memleak_test.py
+++ b/tests/memleak_test.py
@@ -28,7 +28,7 @@ class MemleakTest(unittest.TestCase):
     def tearDown(self):
         gc.set_debug(0)
     
-    def test_collection(self):
+    def test_multi_collection(self):
         gc.collect()
         self.maybe_enable_debug()
 
@@ -65,3 +65,41 @@ class MemleakTest(unittest.TestCase):
         for search in searches:
             for object in objects:
                 assert search != id(object)
+    
+    def test_share_collection(self):
+        gc.collect()
+        self.maybe_enable_debug()
+
+        share = pycurl.CurlShare()
+        t = []
+        searches = []
+        for a in range(100):
+            curl = pycurl.Curl()
+            curl.setopt(curl.SHARE, share)
+            t.append(curl)
+            
+            c_id = id(curl)
+            searches.append(c_id)
+        m_id = id(share)
+        searches.append(m_id)
+
+        self.maybe_print_objects()
+
+        for curl in t:
+            curl.unsetopt(curl.SHARE)
+            curl.close()
+
+        self.maybe_print_objects()
+
+        del curl
+        del t
+        del share
+
+        self.maybe_print_objects()
+        gc.collect()
+        self.maybe_print_objects()
+        
+        objects = gc.get_objects()
+        for search in searches:
+            for object in objects:
+                assert search != id(object)
-- 
1.7.1


From 0df1452da44efe391bccdcebcb0bfc5bc5b75bfc Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 10 Dec 2013 22:06:16 -0500
Subject: [PATCH 065/236] Test share and multi cycle gc

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/memleak_test.py |   64 +++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 64 insertions(+), 0 deletions(-)

diff --git a/tests/memleak_test.py b/tests/memleak_test.py
index 5eff83e..0c11fdf 100644
--- a/tests/memleak_test.py
+++ b/tests/memleak_test.py
@@ -66,6 +66,38 @@ class MemleakTest(unittest.TestCase):
             for object in objects:
                 assert search != id(object)
     
+    def test_multi_cycle(self):
+        gc.collect()
+        self.maybe_enable_debug()
+
+        multi = pycurl.CurlMulti()
+        t = []
+        searches = []
+        for a in range(100):
+            curl = pycurl.Curl()
+            multi.add_handle(curl)
+            t.append(curl)
+            
+            c_id = id(curl)
+            searches.append(c_id)
+        m_id = id(multi)
+        searches.append(m_id)
+
+        self.maybe_print_objects()
+
+        del curl
+        del t
+        del multi
+
+        self.maybe_print_objects()
+        gc.collect()
+        self.maybe_print_objects()
+        
+        objects = gc.get_objects()
+        for search in searches:
+            for object in objects:
+                assert search != id(object)
+    
     def test_share_collection(self):
         gc.collect()
         self.maybe_enable_debug()
@@ -103,3 +135,35 @@ class MemleakTest(unittest.TestCase):
         for search in searches:
             for object in objects:
                 assert search != id(object)
+    
+    def test_share_cycle(self):
+        gc.collect()
+        self.maybe_enable_debug()
+
+        share = pycurl.CurlShare()
+        t = []
+        searches = []
+        for a in range(100):
+            curl = pycurl.Curl()
+            curl.setopt(curl.SHARE, share)
+            t.append(curl)
+            
+            c_id = id(curl)
+            searches.append(c_id)
+        m_id = id(share)
+        searches.append(m_id)
+
+        self.maybe_print_objects()
+
+        del curl
+        del t
+        del share
+
+        self.maybe_print_objects()
+        gc.collect()
+        self.maybe_print_objects()
+        
+        objects = gc.get_objects()
+        for search in searches:
+            for object in objects:
+                assert search != id(object)
-- 
1.7.1


From e292a32868b017822a529b69cb98da552ea6473d Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 11 Dec 2013 10:02:24 -0500
Subject: [PATCH 066/236] Rename test to memory management test for reorganization in the following commit

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/memleak_test.py     |  169 ---------------------------------------------
 tests/memory_mgmt_test.py |  169 +++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 169 insertions(+), 169 deletions(-)
 delete mode 100644 tests/memleak_test.py
 create mode 100644 tests/memory_mgmt_test.py

diff --git a/tests/memleak_test.py b/tests/memleak_test.py
deleted file mode 100644
index 0c11fdf..0000000
--- a/tests/memleak_test.py
+++ /dev/null
@@ -1,169 +0,0 @@
-#! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
-# vi:ts=4:et
-
-import pycurl
-import unittest
-import gc
-
-debug = False
-
-class MemleakTest(unittest.TestCase):
-    def maybe_enable_debug(self):
-        if debug:
-            flags = gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE
-            # python 3 has no DEBUG_OBJECTS
-            if hasattr(gc, 'DEBUG_OBJECTS'):
-                flags |= gc.DEBUG_OBJECTS
-                flags |= gc.DEBUG_STATS
-            gc.set_debug(flags)
-            gc.collect()
-
-            print("Tracked objects:", len(gc.get_objects()))
-    
-    def maybe_print_objects(self):
-        if debug:
-            print("Tracked objects:", len(gc.get_objects()))
-    
-    def tearDown(self):
-        gc.set_debug(0)
-    
-    def test_multi_collection(self):
-        gc.collect()
-        self.maybe_enable_debug()
-
-        multi = pycurl.CurlMulti()
-        t = []
-        searches = []
-        for a in range(100):
-            curl = pycurl.Curl()
-            multi.add_handle(curl)
-            t.append(curl)
-            
-            c_id = id(curl)
-            searches.append(c_id)
-        m_id = id(multi)
-        searches.append(m_id)
-
-        self.maybe_print_objects()
-
-        for curl in t:
-            curl.close()
-            multi.remove_handle(curl)
-
-        self.maybe_print_objects()
-
-        del curl
-        del t
-        del multi
-
-        self.maybe_print_objects()
-        gc.collect()
-        self.maybe_print_objects()
-        
-        objects = gc.get_objects()
-        for search in searches:
-            for object in objects:
-                assert search != id(object)
-    
-    def test_multi_cycle(self):
-        gc.collect()
-        self.maybe_enable_debug()
-
-        multi = pycurl.CurlMulti()
-        t = []
-        searches = []
-        for a in range(100):
-            curl = pycurl.Curl()
-            multi.add_handle(curl)
-            t.append(curl)
-            
-            c_id = id(curl)
-            searches.append(c_id)
-        m_id = id(multi)
-        searches.append(m_id)
-
-        self.maybe_print_objects()
-
-        del curl
-        del t
-        del multi
-
-        self.maybe_print_objects()
-        gc.collect()
-        self.maybe_print_objects()
-        
-        objects = gc.get_objects()
-        for search in searches:
-            for object in objects:
-                assert search != id(object)
-    
-    def test_share_collection(self):
-        gc.collect()
-        self.maybe_enable_debug()
-
-        share = pycurl.CurlShare()
-        t = []
-        searches = []
-        for a in range(100):
-            curl = pycurl.Curl()
-            curl.setopt(curl.SHARE, share)
-            t.append(curl)
-            
-            c_id = id(curl)
-            searches.append(c_id)
-        m_id = id(share)
-        searches.append(m_id)
-
-        self.maybe_print_objects()
-
-        for curl in t:
-            curl.unsetopt(curl.SHARE)
-            curl.close()
-
-        self.maybe_print_objects()
-
-        del curl
-        del t
-        del share
-
-        self.maybe_print_objects()
-        gc.collect()
-        self.maybe_print_objects()
-        
-        objects = gc.get_objects()
-        for search in searches:
-            for object in objects:
-                assert search != id(object)
-    
-    def test_share_cycle(self):
-        gc.collect()
-        self.maybe_enable_debug()
-
-        share = pycurl.CurlShare()
-        t = []
-        searches = []
-        for a in range(100):
-            curl = pycurl.Curl()
-            curl.setopt(curl.SHARE, share)
-            t.append(curl)
-            
-            c_id = id(curl)
-            searches.append(c_id)
-        m_id = id(share)
-        searches.append(m_id)
-
-        self.maybe_print_objects()
-
-        del curl
-        del t
-        del share
-
-        self.maybe_print_objects()
-        gc.collect()
-        self.maybe_print_objects()
-        
-        objects = gc.get_objects()
-        for search in searches:
-            for object in objects:
-                assert search != id(object)
diff --git a/tests/memory_mgmt_test.py b/tests/memory_mgmt_test.py
new file mode 100644
index 0000000..9eada4b
--- /dev/null
+++ b/tests/memory_mgmt_test.py
@@ -0,0 +1,169 @@
+#! /usr/bin/env python
+# -*- coding: iso-8859-1 -*-
+# vi:ts=4:et
+
+import pycurl
+import unittest
+import gc
+
+debug = False
+
+class MemoryMgmtTest(unittest.TestCase):
+    def maybe_enable_debug(self):
+        if debug:
+            flags = gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE
+            # python 3 has no DEBUG_OBJECTS
+            if hasattr(gc, 'DEBUG_OBJECTS'):
+                flags |= gc.DEBUG_OBJECTS
+                flags |= gc.DEBUG_STATS
+            gc.set_debug(flags)
+            gc.collect()
+
+            print("Tracked objects:", len(gc.get_objects()))
+    
+    def maybe_print_objects(self):
+        if debug:
+            print("Tracked objects:", len(gc.get_objects()))
+    
+    def tearDown(self):
+        gc.set_debug(0)
+    
+    def test_multi_collection(self):
+        gc.collect()
+        self.maybe_enable_debug()
+
+        multi = pycurl.CurlMulti()
+        t = []
+        searches = []
+        for a in range(100):
+            curl = pycurl.Curl()
+            multi.add_handle(curl)
+            t.append(curl)
+            
+            c_id = id(curl)
+            searches.append(c_id)
+        m_id = id(multi)
+        searches.append(m_id)
+
+        self.maybe_print_objects()
+
+        for curl in t:
+            curl.close()
+            multi.remove_handle(curl)
+
+        self.maybe_print_objects()
+
+        del curl
+        del t
+        del multi
+
+        self.maybe_print_objects()
+        gc.collect()
+        self.maybe_print_objects()
+        
+        objects = gc.get_objects()
+        for search in searches:
+            for object in objects:
+                assert search != id(object)
+    
+    def test_multi_cycle(self):
+        gc.collect()
+        self.maybe_enable_debug()
+
+        multi = pycurl.CurlMulti()
+        t = []
+        searches = []
+        for a in range(100):
+            curl = pycurl.Curl()
+            multi.add_handle(curl)
+            t.append(curl)
+            
+            c_id = id(curl)
+            searches.append(c_id)
+        m_id = id(multi)
+        searches.append(m_id)
+
+        self.maybe_print_objects()
+
+        del curl
+        del t
+        del multi
+
+        self.maybe_print_objects()
+        gc.collect()
+        self.maybe_print_objects()
+        
+        objects = gc.get_objects()
+        for search in searches:
+            for object in objects:
+                assert search != id(object)
+    
+    def test_share_collection(self):
+        gc.collect()
+        self.maybe_enable_debug()
+
+        share = pycurl.CurlShare()
+        t = []
+        searches = []
+        for a in range(100):
+            curl = pycurl.Curl()
+            curl.setopt(curl.SHARE, share)
+            t.append(curl)
+            
+            c_id = id(curl)
+            searches.append(c_id)
+        m_id = id(share)
+        searches.append(m_id)
+
+        self.maybe_print_objects()
+
+        for curl in t:
+            curl.unsetopt(curl.SHARE)
+            curl.close()
+
+        self.maybe_print_objects()
+
+        del curl
+        del t
+        del share
+
+        self.maybe_print_objects()
+        gc.collect()
+        self.maybe_print_objects()
+        
+        objects = gc.get_objects()
+        for search in searches:
+            for object in objects:
+                assert search != id(object)
+    
+    def test_share_cycle(self):
+        gc.collect()
+        self.maybe_enable_debug()
+
+        share = pycurl.CurlShare()
+        t = []
+        searches = []
+        for a in range(100):
+            curl = pycurl.Curl()
+            curl.setopt(curl.SHARE, share)
+            t.append(curl)
+            
+            c_id = id(curl)
+            searches.append(c_id)
+        m_id = id(share)
+        searches.append(m_id)
+
+        self.maybe_print_objects()
+
+        del curl
+        del t
+        del share
+
+        self.maybe_print_objects()
+        gc.collect()
+        self.maybe_print_objects()
+        
+        objects = gc.get_objects()
+        for search in searches:
+            for object in objects:
+                assert search != id(object)
-- 
1.7.1


From c49513587431720c5b5ef56d1d30c3233b238651 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 11 Dec 2013 10:04:14 -0500
Subject: [PATCH 067/236] Move refcounting tests to memory management test case

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/internals_test.py   |   64 ---------------------------------------------
 tests/memory_mgmt_test.py |   59 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 59 insertions(+), 64 deletions(-)

diff --git a/tests/internals_test.py b/tests/internals_test.py
index 82cbf6a..d09e881 100644
--- a/tests/internals_test.py
+++ b/tests/internals_test.py
@@ -10,7 +10,6 @@ try:
 except ImportError:
     cPickle = None
 import pickle
-import gc
 import copy
 
 class InternalsTest(unittest.TestCase):
@@ -163,66 +162,3 @@ class InternalsTest(unittest.TestCase):
             else:
                 assert 0, "No exception when trying to pickle a CurlMulti handle via cPickle"
             del m, fp, p
-
-    # /***********************************************************************
-    # // test refcounts
-    # ************************************************************************/
-
-    # basic check of reference counting (use a memory checker like valgrind)
-    def test_reference_counting(self):
-        c = pycurl.Curl()
-        m = pycurl.CurlMulti()
-        m.add_handle(c)
-        del m
-        m = pycurl.CurlMulti()
-        c.close()
-        del m, c
-    
-    def test_cyclic_gc(self):
-        gc.collect()
-        c = pycurl.Curl()
-        c.m = pycurl.CurlMulti()
-        c.m.add_handle(c)
-        # create some nasty cyclic references
-        c.c = c
-        c.c.c1 = c
-        c.c.c2 = c
-        c.c.c3 = c.c
-        c.c.c4 = c.m
-        c.m.c = c
-        c.m.m = c.m
-        c.m.c = c
-        # delete
-        gc.collect()
-        flags = gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE
-        # python 3 has no DEBUG_OBJECTS
-        #if hasattr(gc, 'DEBUG_OBJECTS'):
-            #flags |= gc.DEBUG_OBJECTS
-        #if opts.verbose >= 1:
-            #flags = flags | gc.DEBUG_STATS
-        #gc.set_debug(flags)
-        gc.collect()
-        ##print gc.get_referrers(c)
-        ##print gc.get_objects()
-        #if opts.verbose >= 1:
-            #print("Tracked objects:", len(gc.get_objects()))
-        c_id = id(c)
-        # The `del' below should delete these 4 objects:
-        #   Curl + internal dict, CurlMulti + internal dict
-        del c
-        gc.collect()
-        objects = gc.get_objects()
-        for object in objects:
-            assert id(object) != c_id
-        #if opts.verbose >= 1:
-            #print("Tracked objects:", len(gc.get_objects()))
-    
-    def test_refcounting_bug_in_reset(self):
-        try:
-            range_generator = xrange
-        except NameError:
-            range_generator = range
-        # Ensure that the refcounting error in "reset" is fixed:
-        for i in range_generator(100000):
-            c = pycurl.Curl()
-            c.reset()
diff --git a/tests/memory_mgmt_test.py b/tests/memory_mgmt_test.py
index 9eada4b..ed6289f 100644
--- a/tests/memory_mgmt_test.py
+++ b/tests/memory_mgmt_test.py
@@ -167,3 +167,62 @@ class MemoryMgmtTest(unittest.TestCase):
         for search in searches:
             for object in objects:
                 assert search != id(object)
+
+    # basic check of reference counting (use a memory checker like valgrind)
+    def test_reference_counting(self):
+        c = pycurl.Curl()
+        m = pycurl.CurlMulti()
+        m.add_handle(c)
+        del m
+        m = pycurl.CurlMulti()
+        c.close()
+        del m, c
+    
+    def test_cyclic_gc(self):
+        gc.collect()
+        c = pycurl.Curl()
+        c.m = pycurl.CurlMulti()
+        c.m.add_handle(c)
+        # create some nasty cyclic references
+        c.c = c
+        c.c.c1 = c
+        c.c.c2 = c
+        c.c.c3 = c.c
+        c.c.c4 = c.m
+        c.m.c = c
+        c.m.m = c.m
+        c.m.c = c
+        # delete
+        gc.collect()
+        flags = gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE
+        # python 3 has no DEBUG_OBJECTS
+        #if hasattr(gc, 'DEBUG_OBJECTS'):
+            #flags |= gc.DEBUG_OBJECTS
+        #if opts.verbose >= 1:
+            #flags = flags | gc.DEBUG_STATS
+        #gc.set_debug(flags)
+        gc.collect()
+        ##print gc.get_referrers(c)
+        ##print gc.get_objects()
+        #if opts.verbose >= 1:
+            #print("Tracked objects:", len(gc.get_objects()))
+        c_id = id(c)
+        # The `del' below should delete these 4 objects:
+        #   Curl + internal dict, CurlMulti + internal dict
+        del c
+        gc.collect()
+        objects = gc.get_objects()
+        for object in objects:
+            assert id(object) != c_id
+        #if opts.verbose >= 1:
+            #print("Tracked objects:", len(gc.get_objects()))
+    
+    def test_refcounting_bug_in_reset(self):
+        try:
+            range_generator = xrange
+        except NameError:
+            range_generator = range
+        # Ensure that the refcounting error in "reset" is fixed:
+        for i in range_generator(100000):
+            c = pycurl.Curl()
+            c.reset()
-- 
1.7.1


From 82476f6831cc42c2d8b202d5df687443c578784c Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 11 Dec 2013 10:05:25 -0500
Subject: [PATCH 068/236] Use the helper

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/memory_mgmt_test.py |    9 +--------
 1 files changed, 1 insertions(+), 8 deletions(-)

diff --git a/tests/memory_mgmt_test.py b/tests/memory_mgmt_test.py
index ed6289f..0d7678d 100644
--- a/tests/memory_mgmt_test.py
+++ b/tests/memory_mgmt_test.py
@@ -194,14 +194,7 @@ class MemoryMgmtTest(unittest.TestCase):
         c.m.c = c
         # delete
         gc.collect()
-        flags = gc.DEBUG_COLLECTABLE | gc.DEBUG_UNCOLLECTABLE
-        # python 3 has no DEBUG_OBJECTS
-        #if hasattr(gc, 'DEBUG_OBJECTS'):
-            #flags |= gc.DEBUG_OBJECTS
-        #if opts.verbose >= 1:
-            #flags = flags | gc.DEBUG_STATS
-        #gc.set_debug(flags)
-        gc.collect()
+        self.maybe_enable_debug()
         ##print gc.get_referrers(c)
         ##print gc.get_objects()
         #if opts.verbose >= 1:
-- 
1.7.1


From 750640b4b1f2dc724ddc0619020973977f34a78e Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 11 Dec 2013 10:13:46 -0500
Subject: [PATCH 069/236] libcurl 7.19.0+ is required now

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/curlobject.html |    4 ----
 1 files changed, 0 insertions(+), 4 deletions(-)

diff --git a/doc/curlobject.html b/doc/curlobject.html
index 4138e38..0de0730 100644
--- a/doc/curlobject.html
+++ b/doc/curlobject.html
@@ -102,10 +102,6 @@ in libcurl. The argument should be derived from
 the <code>PAUSE_RECV</code>, <code>PAUSE_SEND</code>, <code>PAUSE_ALL</code>
 and <code>PAUSE_CONT</code> constants.</p>
 
-<p>The <code>pause()</code> method (and its associated constants) is only
-available if the version of libcurl with which pycurl was built is at
-least version 7.18.0.</p>
-
 <dt><code>errstr()</code> -&gt; <em>String</em></dt>
 <dd>
 <p>Returns the internal libcurl error buffer of this handle as a string.</p>
-- 
1.7.1


From f29aef66191a2003851c0b8862b8e403c6fec664 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 11 Dec 2013 10:16:59 -0500
Subject: [PATCH 070/236] Current libcurl version is 7.33.0

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/release-process.rst |    2 +-
 tests/matrix.py         |    2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/doc/release-process.rst b/doc/release-process.rst
index 4afe432..e4f7488 100644
--- a/doc/release-process.rst
+++ b/doc/release-process.rst
@@ -7,7 +7,7 @@ Release Process
 
    - Python 2.4, 2.5, 2.6, 2.7.
    - Minimum supported libcurl (currently 7.19.0).
-   - Most recent available libcurl (currently 7.32.0).
+   - Most recent available libcurl (currently 7.33.0).
 
 3. Update version numbers in:
 
diff --git a/tests/matrix.py b/tests/matrix.py
index 4bb613b..1c3e56a 100644
--- a/tests/matrix.py
+++ b/tests/matrix.py
@@ -1,7 +1,7 @@
 import os, os.path, urllib, subprocess, shutil, re
 
 python_versions = ['2.4.6', '2.5.6', '2.6.8', '2.7.5']
-libcurl_versions = ['7.19.0', '7.32.0']
+libcurl_versions = ['7.19.0', '7.33.0']
 
 python_meta = {
     '2.5.6': {
-- 
1.7.1


From 1d92159aa0af614ff31f16f6f2bdd6a03b3bfbea Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 15:04:19 -0500
Subject: [PATCH 071/236] Tests for close() working on all pycurl objects

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/easy_test.py  |   11 +++++++++++
 tests/multi_test.py |    4 ++++
 tests/share_test.py |    4 ++++
 3 files changed, 19 insertions(+), 0 deletions(-)
 create mode 100644 tests/easy_test.py

diff --git a/tests/easy_test.py b/tests/easy_test.py
new file mode 100644
index 0000000..b723222
--- /dev/null
+++ b/tests/easy_test.py
@@ -0,0 +1,11 @@
+#! /usr/bin/env python
+# -*- coding: iso-8859-1 -*-
+# vi:ts=4:et
+
+import pycurl
+import unittest
+
+class EasyTest(unittest.TestCase):
+    def test_easy_close(self):
+        c = pycurl.Curl()
+        c.close()
diff --git a/tests/multi_test.py b/tests/multi_test.py
index 97bba18..f1e3c7e 100644
--- a/tests/multi_test.py
+++ b/tests/multi_test.py
@@ -358,3 +358,7 @@ class MultiTest(unittest.TestCase):
         self.assertEqual('success', c1.body.getvalue())
         self.assertEqual('success', c2.body.getvalue())
         self.assertEqual('success', c3.body.getvalue())
+    
+    def test_multi_close(self):
+        m = pycurl.CurlMulti()
+        m.close()
diff --git a/tests/share_test.py b/tests/share_test.py
index a7cc7f0..692d91e 100644
--- a/tests/share_test.py
+++ b/tests/share_test.py
@@ -48,3 +48,7 @@ class ShareTest(unittest.TestCase):
         
         self.assertEqual('success', t1.sio.getvalue())
         self.assertEqual('success', t2.sio.getvalue())
+    
+    def test_share_close(self):
+        s = pycurl.CurlShare()
+        s.close()
-- 
1.7.1


From 192465376892cb47b4990714b60d33b60049cf1e Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 15:14:41 -0500
Subject: [PATCH 072/236] Check that pycurl objects can be closed repeatedly

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/easy_test.py  |    5 +++++
 tests/multi_test.py |    5 +++++
 tests/share_test.py |    5 +++++
 3 files changed, 15 insertions(+), 0 deletions(-)

diff --git a/tests/easy_test.py b/tests/easy_test.py
index b723222..7f5867e 100644
--- a/tests/easy_test.py
+++ b/tests/easy_test.py
@@ -9,3 +9,8 @@ class EasyTest(unittest.TestCase):
     def test_easy_close(self):
         c = pycurl.Curl()
         c.close()
+    
+    def test_easy_close_twice(self):
+        c = pycurl.Curl()
+        c.close()
+        c.close()
diff --git a/tests/multi_test.py b/tests/multi_test.py
index f1e3c7e..11a8c82 100644
--- a/tests/multi_test.py
+++ b/tests/multi_test.py
@@ -362,3 +362,8 @@ class MultiTest(unittest.TestCase):
     def test_multi_close(self):
         m = pycurl.CurlMulti()
         m.close()
+    
+    def test_multi_close_twice(self):
+        m = pycurl.CurlMulti()
+        m.close()
+        m.close()
diff --git a/tests/share_test.py b/tests/share_test.py
index 692d91e..6644f2e 100644
--- a/tests/share_test.py
+++ b/tests/share_test.py
@@ -52,3 +52,8 @@ class ShareTest(unittest.TestCase):
     def test_share_close(self):
         s = pycurl.CurlShare()
         s.close()
+    
+    def test_share_close_twice(self):
+        s = pycurl.CurlShare()
+        s.close()
+        s.close()
-- 
1.7.1


From 5504c4b0161f37951fd5d70aae0911b94f9277ad Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 16:47:10 -0500
Subject: [PATCH 073/236] Tabs to spaces

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   32 ++++++++++++++++----------------
 1 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index cdd57ab..717f7a1 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1401,7 +1401,7 @@ convert_protocol_address(struct sockaddr* saddr, unsigned int saddrlen)
     default:
         /* We (currently) only support IPv4/6 addresses.  Can curl even be used
            with anything else? */
-	PyErr_SetString(ErrorObject, "Unsupported address family.");
+        PyErr_SetString(ErrorObject, "Unsupported address family.");
     }
     
 error:
@@ -1412,7 +1412,7 @@ error:
  * are not important here) */
 static curl_socket_t
 opensocket_callback(void *clientp, curlsocktype purpose,
-		    struct curl_sockaddr *address)
+                    struct curl_sockaddr *address)
 {
     PyObject *arglist;
     PyObject *result = NULL;
@@ -1436,21 +1436,21 @@ opensocket_callback(void *clientp, curlsocktype purpose,
     }
 
     if (PyObject_HasAttrString(result, "fileno")) {
-	fileno_result = PyObject_CallMethod(result, "fileno", NULL);
-
-	if (fileno_result == NULL) {
-	    ret = CURL_SOCKET_BAD;
-	    goto verbose_error;
-	}
-	// normal operation:
-	if (PyInt_Check(fileno_result)) {
-	    ret = dup(PyInt_AsLong(fileno_result));
-	    goto done;
-	}
+        fileno_result = PyObject_CallMethod(result, "fileno", NULL);
+
+        if (fileno_result == NULL) {
+            ret = CURL_SOCKET_BAD;
+            goto verbose_error;
+        }
+        // normal operation:
+        if (PyInt_Check(fileno_result)) {
+            ret = dup(PyInt_AsLong(fileno_result));
+            goto done;
+        }
     } else {
-	PyErr_SetString(ErrorObject, "Return value must be a socket.");
-	ret = CURL_SOCKET_BAD;
-	goto verbose_error;
+        PyErr_SetString(ErrorObject, "Return value must be a socket.");
+        ret = CURL_SOCKET_BAD;
+        goto verbose_error;
     }
 
 silent_error:
-- 
1.7.1


From 7a0e90a60030d17592f541a81fb8645bcd629d42 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 22:48:07 -0500
Subject: [PATCH 074/236] Select lib directory matching current python version if there is more than one present

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 Makefile |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/Makefile b/Makefile
index cb12aaf..48cc0e8 100644
--- a/Makefile
+++ b/Makefile
@@ -17,7 +17,8 @@ build-7.10.8:
 
 test: build
 	mkdir -p tests/tmp
-	PYTHONPATH=$$(ls -d build/lib.*):$$PYTHONPATH \
+	PYTHONSUFFIX=$$(python -V 2>&1 |awk '{print $$2}' |awk -F. '{print $$1 "." $$2}') && \
+	PYTHONPATH=$$(ls -d build/lib.*$$PYTHONSUFFIX):$$PYTHONPATH \
 	$(NOSETESTS)
 
 # (needs GNU binutils)
-- 
1.7.1


From cf44ad816766a67a43f64cf48392ce9a6d5326ac Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 18:48:44 -0500
Subject: [PATCH 075/236] Handle the possibility of other tests failing in Python code called from C

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/write_abort_test.py |    7 +++++++
 1 files changed, 7 insertions(+), 0 deletions(-)

diff --git a/tests/write_abort_test.py b/tests/write_abort_test.py
index 957fe78..ddddc4a 100644
--- a/tests/write_abort_test.py
+++ b/tests/write_abort_test.py
@@ -19,6 +19,13 @@ class WriteAbortTest(unittest.TestCase):
             # this should cause pycurl.WRITEFUNCTION (without any range errors)
             return -1
 
+        try:
+            # set when running full test suite if any earlier tests
+            # failed in Python code called from C
+            del sys.last_value
+        except AttributeError:
+            pass
+
         # download the script itself through the file:// protocol into write_cb
         self.curl.setopt(pycurl.URL, 'file://' + os.path.abspath(sys.argv[0]))
         self.curl.setopt(pycurl.WRITEFUNCTION, write_cb)
-- 
1.7.1


From 9b246eccf362ea9b2670e669338a113baf7e4b43 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 16:11:28 -0500
Subject: [PATCH 076/236] Avoid treating exception as a tuple as this no longer works in python 3

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/error_test.py          |    2 +-
 tests/write_abort_test.py    |    2 +-
 tests/write_cb_bogus_test.py |    2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/tests/error_test.py b/tests/error_test.py
index 04773b0..f908efb 100644
--- a/tests/error_test.py
+++ b/tests/error_test.py
@@ -26,7 +26,7 @@ class ErrorTest(unittest.TestCase):
             self.assertEqual(int, type(exc.args[0]))
             self.assertEqual(str, type(exc.args[1]))
             # unpack
-            err, msg = exc
+            err, msg = exc.args
             self.assertEqual(pycurl.E_URL_MALFORMAT, err)
             # possibly fragile
             self.assertEqual('No URL set!', msg)
diff --git a/tests/write_abort_test.py b/tests/write_abort_test.py
index ddddc4a..6bfc2a8 100644
--- a/tests/write_abort_test.py
+++ b/tests/write_abort_test.py
@@ -32,7 +32,7 @@ class WriteAbortTest(unittest.TestCase):
         try:
             self.curl.perform()
         except pycurl.error:
-            err, msg = sys.exc_info()[1]
+            err, msg = sys.exc_info()[1].args
             # we expect pycurl.E_WRITE_ERROR as the response
             assert pycurl.E_WRITE_ERROR == err
 
diff --git a/tests/write_cb_bogus_test.py b/tests/write_cb_bogus_test.py
index ef709db..0cff608 100644
--- a/tests/write_cb_bogus_test.py
+++ b/tests/write_cb_bogus_test.py
@@ -34,7 +34,7 @@ class WriteAbortTest(unittest.TestCase):
         try:
             self.curl.perform()
         except pycurl.error:
-            err, msg = sys.exc_info()[1]
+            err, msg = sys.exc_info()[1].args
             # we expect pycurl.E_WRITE_ERROR as the response
             assert pycurl.E_WRITE_ERROR == err
 
-- 
1.7.1


From 0c1200a1a2942b908d5aaac12d665a7592748d18 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 17:00:44 -0500
Subject: [PATCH 077/236] Apparently "del m.handles" does not work in python 3

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/multi_test.py |    9 ++++-----
 1 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/tests/multi_test.py b/tests/multi_test.py
index 11a8c82..24be0df 100644
--- a/tests/multi_test.py
+++ b/tests/multi_test.py
@@ -28,7 +28,7 @@ class MultiTest(unittest.TestCase):
         io1 = util.StringIO()
         io2 = util.StringIO()
         m = pycurl.CurlMulti()
-        m.handles = []
+        handles = []
         c1 = pycurl.Curl()
         c2 = pycurl.Curl()
         c1.setopt(c1.URL, 'http://localhost:8380/success')
@@ -37,10 +37,10 @@ class MultiTest(unittest.TestCase):
         c2.setopt(c1.WRITEFUNCTION, io2.write)
         m.add_handle(c1)
         m.add_handle(c2)
-        m.handles.append(c1)
-        m.handles.append(c2)
+        handles.append(c1)
+        handles.append(c2)
 
-        num_handles = len(m.handles)
+        num_handles = len(handles)
         while num_handles:
             while 1:
                 ret, num_handles = m.perform()
@@ -50,7 +50,6 @@ class MultiTest(unittest.TestCase):
 
         m.remove_handle(c2)
         m.remove_handle(c1)
-        del m.handles
         m.close()
         c1.close()
         c2.close()
-- 
1.7.1


From 01217601bb8f87f68fb5bdea9706e5eea0812cba Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 9 Dec 2013 13:32:32 -0500
Subject: [PATCH 078/236] Add a test for general object behavior as it seems to be changed by python 3 patch

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/pycurl_object_test.py |   32 ++++++++++++++++++++++++++++++++
 1 files changed, 32 insertions(+), 0 deletions(-)
 create mode 100644 tests/pycurl_object_test.py

diff --git a/tests/pycurl_object_test.py b/tests/pycurl_object_test.py
new file mode 100644
index 0000000..68d2fc8
--- /dev/null
+++ b/tests/pycurl_object_test.py
@@ -0,0 +1,32 @@
+#! /usr/bin/env python
+# -*- coding: iso-8859-1 -*-
+# vi:ts=4:et
+
+import pycurl
+import unittest
+import sys
+
+class PycurlObjectTest(unittest.TestCase):
+    def setUp(self):
+        self.curl = pycurl.Curl()
+    
+    def tearDown(self):
+        self.curl.close()
+    
+    def test_set_attribute(self):
+        assert not hasattr(self.curl, 'attr')
+        self.curl.attr = 1
+        assert hasattr(self.curl, 'attr')
+    
+    def test_get_attribute(self):
+        assert not hasattr(self.curl, 'attr')
+        self.curl.attr = 1
+        self.assertEqual(1, self.curl.attr)
+    
+    def test_delete_attribute(self):
+        assert not hasattr(self.curl, 'attr')
+        self.curl.attr = 1
+        self.assertEqual(1, self.curl.attr)
+        assert hasattr(self.curl, 'attr')
+        del self.curl.attr
+        assert not hasattr(self.curl, 'attr')
-- 
1.7.1


From dd58f6829eb0332619457e87989553be42fe0dfd Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 15:00:43 -0500
Subject: [PATCH 079/236] Check multi and share objects for attribute assignment behavior

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/pycurl_object_test.py |   69 ++++++++++++++++++++++++++++++++----------
 1 files changed, 52 insertions(+), 17 deletions(-)

diff --git a/tests/pycurl_object_test.py b/tests/pycurl_object_test.py
index 68d2fc8..f6049a8 100644
--- a/tests/pycurl_object_test.py
+++ b/tests/pycurl_object_test.py
@@ -13,20 +13,55 @@ class PycurlObjectTest(unittest.TestCase):
     def tearDown(self):
         self.curl.close()
     
-    def test_set_attribute(self):
-        assert not hasattr(self.curl, 'attr')
-        self.curl.attr = 1
-        assert hasattr(self.curl, 'attr')
-    
-    def test_get_attribute(self):
-        assert not hasattr(self.curl, 'attr')
-        self.curl.attr = 1
-        self.assertEqual(1, self.curl.attr)
-    
-    def test_delete_attribute(self):
-        assert not hasattr(self.curl, 'attr')
-        self.curl.attr = 1
-        self.assertEqual(1, self.curl.attr)
-        assert hasattr(self.curl, 'attr')
-        del self.curl.attr
-        assert not hasattr(self.curl, 'attr')
+    def test_set_attribute_curl(self):
+        self.instantiate_and_check(self.check_set_attribute, 'Curl')
+    
+    def test_get_attribute_curl(self):
+        self.instantiate_and_check(self.check_get_attribute, 'Curl')
+    
+    def test_delete_attribute_curl(self):
+        self.instantiate_and_check(self.check_delete_attribute, 'Curl')
+    
+    def test_set_attribute_multi(self):
+        self.instantiate_and_check(self.check_set_attribute, 'CurlMulti')
+    
+    def test_get_attribute_multi(self):
+        self.instantiate_and_check(self.check_get_attribute, 'CurlMulti')
+    
+    def test_delete_attribute_multi(self):
+        self.instantiate_and_check(self.check_delete_attribute, 'CurlMulti')
+    
+    def test_set_attribute_share(self):
+        self.instantiate_and_check(self.check_set_attribute, 'CurlShare')
+    
+    def test_get_attribute_share(self):
+        self.instantiate_and_check(self.check_get_attribute, 'CurlShare')
+    
+    def test_delete_attribute_share(self):
+        self.instantiate_and_check(self.check_delete_attribute, 'CurlShare')
+    
+    def instantiate_and_check(self, fn, cls_name):
+        cls = getattr(pycurl, cls_name)
+        instance = cls()
+        try:
+            fn(instance)
+        finally:
+            instance.close()
+    
+    def check_set_attribute(self, pycurl_obj):
+        assert not hasattr(pycurl_obj, 'attr')
+        pycurl_obj.attr = 1
+        assert hasattr(pycurl_obj, 'attr')
+    
+    def check_get_attribute(self, pycurl_obj):
+        assert not hasattr(pycurl_obj, 'attr')
+        pycurl_obj.attr = 1
+        self.assertEqual(1, pycurl_obj.attr)
+    
+    def check_delete_attribute(self, pycurl_obj):
+        assert not hasattr(pycurl_obj, 'attr')
+        pycurl_obj.attr = 1
+        self.assertEqual(1, pycurl_obj.attr)
+        assert hasattr(pycurl_obj, 'attr')
+        del pycurl_obj.attr
+        assert not hasattr(pycurl_obj, 'attr')
-- 
1.7.1


From 659eeec510fe30f3f7d3c4578c67f228791e9273 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 16:17:33 -0500
Subject: [PATCH 080/236] Test overwriting pycurl constants in pycurl objects

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/pycurl_object_test.py |   26 ++++++++++++++++++++++++++
 1 files changed, 26 insertions(+), 0 deletions(-)

diff --git a/tests/pycurl_object_test.py b/tests/pycurl_object_test.py
index f6049a8..8f7d231 100644
--- a/tests/pycurl_object_test.py
+++ b/tests/pycurl_object_test.py
@@ -65,3 +65,29 @@ class PycurlObjectTest(unittest.TestCase):
         assert hasattr(pycurl_obj, 'attr')
         del pycurl_obj.attr
         assert not hasattr(pycurl_obj, 'attr')
+    
+    def test_modify_attribute_curl(self):
+        self.check_modify_attribute(pycurl.Curl, 'READFUNC_PAUSE')
+    
+    def test_modify_attribute_multi(self):
+        self.check_modify_attribute(pycurl.CurlMulti, 'E_MULTI_OK')
+    
+    def test_modify_attribute_share(self):
+        self.check_modify_attribute(pycurl.CurlShare, 'SH_SHARE')
+    
+    def check_modify_attribute(self, cls, name):
+        obj1 = cls()
+        obj2 = cls()
+        old_value = getattr(obj1, name)
+        self.assertNotEqual('helloworld', old_value)
+        # value should be identical to pycurl global
+        self.assertEqual(old_value, getattr(pycurl, name))
+        setattr(obj1, name, 'helloworld')
+        self.assertEqual('helloworld', getattr(obj1, name))
+        
+        # change does not affect other existing objects
+        self.assertEqual(old_value, getattr(obj2, name))
+        
+        # change does not affect objects created later
+        obj3 = cls()
+        self.assertEqual(old_value, getattr(obj3, name))
-- 
1.7.1


From 4a4542ca43562df3b6137042b979a893ac5700d2 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 16:22:46 -0500
Subject: [PATCH 081/236] Fix curl multi constants not existing on curl multi objects.

curlmultiobject_constants was never set to a dictionary but remained NULL.
Therefore insint_m never populated it. As a result, multi object instances
never had any of the constants they were supposed to have.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 717f7a1..971c544 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -4376,6 +4376,8 @@ initpycurl(void)
      **/
 
     /* CURLMcode: multi error codes */
+    curlmultiobject_constants = PyDict_New();
+    assert(curlmultiobject_constants != NULL);
     insint_m(d, "E_CALL_MULTI_PERFORM", CURLM_CALL_MULTI_PERFORM);
     insint_m(d, "E_MULTI_OK", CURLM_OK);
     insint_m(d, "E_MULTI_BAD_HANDLE", CURLM_BAD_HANDLE);
-- 
1.7.1


From 5a220cfb38d5d6d39d507a2bc1cef080de457b5c Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 18:48:52 -0500
Subject: [PATCH 082/236] Make it possible to run test app without pycurl being installed

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/__init__.py |    8 ++++++--
 1 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/tests/__init__.py b/tests/__init__.py
index c1ff976..840f94c 100644
--- a/tests/__init__.py
+++ b/tests/__init__.py
@@ -1,4 +1,8 @@
-import pycurl
-
 def setup_package():
+    # import here, not globally, so that running
+    # python -m tests.appmanager
+    # to launch the app manager is possible without having pycurl installed
+    # (as the test app does not depend on pycurl)
+    import pycurl
+    
     print('Testing %s' % pycurl.version)
-- 
1.7.1


From dc2df6a1464004d96c056022824f763626c3d9f0 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 17:55:27 -0500
Subject: [PATCH 083/236] Decorator to only run tests on python 3

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/util.py |   13 +++++++++++++
 1 files changed, 13 insertions(+), 0 deletions(-)

diff --git a/tests/util.py b/tests/util.py
index 87f15a6..5ff105f 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -27,6 +27,19 @@ def pycurl_version_less_than(*spec):
     version = [int(part) for part in pycurl.version_info()[1].split('.')]
     return version_less_than_spec(version, spec)
 
+def only_python3(fn):
+    import nose.plugins.skip
+    import functools
+    
+    @functools.wraps(fn)
+    def decorated(*args, **kwargs):
+        if sys.version_info[0] < 3:
+            raise nose.plugins.skip.SkipTest('python < 3')
+        
+        return fn(*args, **kwargs)
+    
+    return decorated
+
 try:
     create_connection = socket.create_connection
 except AttributeError:
-- 
1.7.1


From 95e114fbbf258262d968c2cde57391c2959fcd5b Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 19:42:23 -0500
Subject: [PATCH 084/236] Updating tests to handle responses being of bytes type under python 3

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/certinfo_test.py            |    8 ++++----
 tests/debug_test.py               |    2 +-
 tests/ftp_test.py                 |   12 ++++++------
 tests/getinfo_test.py             |    4 ++--
 tests/header_function_test.py     |    4 ++--
 tests/multi_socket_select_test.py |    4 ++--
 tests/multi_socket_test.py        |    4 ++--
 tests/pause_test.py               |    4 ++--
 tests/share_test.py               |    6 +++---
 tests/socket_open_test.py         |    4 ++--
 tests/user_agent_string_test.py   |    4 ++--
 tests/util.py                     |   14 +++++++++-----
 tests/write_to_file_test.py       |    2 +-
 13 files changed, 38 insertions(+), 34 deletions(-)

diff --git a/tests/certinfo_test.py b/tests/certinfo_test.py
index 73a238a..58e638e 100644
--- a/tests/certinfo_test.py
+++ b/tests/certinfo_test.py
@@ -31,12 +31,12 @@ class CertinfoTest(unittest.TestCase):
             raise nose.plugins.skip.SkipTest('libcurl < 7.19.1')
         
         self.curl.setopt(pycurl.URL, 'https://localhost:8383/success')
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         # self signed certificate
         self.curl.setopt(pycurl.SSL_VERIFYPEER, 0)
         self.curl.perform()
-        assert sio.getvalue() == 'success'
+        assert sio.getvalue().decode() == 'success'
         
         certinfo = self.curl.getinfo(pycurl.INFO_CERTINFO)
         self.assertEqual([], certinfo)
@@ -50,13 +50,13 @@ class CertinfoTest(unittest.TestCase):
             raise nose.plugins.skip.SkipTest('libcurl does not use openssl')
         
         self.curl.setopt(pycurl.URL, 'https://localhost:8383/success')
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.setopt(pycurl.OPT_CERTINFO, 1)
         # self signed certificate
         self.curl.setopt(pycurl.SSL_VERIFYPEER, 0)
         self.curl.perform()
-        assert sio.getvalue() == 'success'
+        assert sio.getvalue().decode() == 'success'
         
         certinfo = self.curl.getinfo(pycurl.INFO_CERTINFO)
         # self signed certificate, one certificate in chain
diff --git a/tests/debug_test.py b/tests/debug_test.py
index e6303c2..9a5b7e7 100644
--- a/tests/debug_test.py
+++ b/tests/debug_test.py
@@ -25,7 +25,7 @@ class DebugTest(unittest.TestCase):
         self.curl.setopt(pycurl.VERBOSE, 1)
         self.curl.setopt(pycurl.DEBUGFUNCTION, self.debug_function)
         self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
         
diff --git a/tests/ftp_test.py b/tests/ftp_test.py
index 5ee380c..520ebdc 100644
--- a/tests/ftp_test.py
+++ b/tests/ftp_test.py
@@ -21,33 +21,33 @@ class FtpTest(unittest.TestCase):
     
     def test_get_ftp(self):
         self.curl.setopt(pycurl.URL, 'ftp://localhost:8321')
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
         
-        result = sio.getvalue()
+        result = sio.getvalue().decode()
         assert 'README.rst' in result
         assert 'INSTALL' in result
     
     # XXX this test needs to be fixed
     def test_quote(self):
         self.curl.setopt(pycurl.URL, 'ftp://localhost:8321')
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.setopt(pycurl.QUOTE, ['CWD tests'])
         self.curl.perform()
         
-        result = sio.getvalue()
+        result = sio.getvalue().decode()
         assert 'README.rst' not in result
         assert 'ftp_test.py' in result
     
     def test_epsv(self):
         self.curl.setopt(pycurl.URL, 'ftp://localhost:8321')
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.setopt(pycurl.FTP_USE_EPSV, 1)
         self.curl.perform()
         
-        result = sio.getvalue()
+        result = sio.getvalue().decode()
         assert 'README.rst' in result
         assert 'INSTALL' in result
diff --git a/tests/getinfo_test.py b/tests/getinfo_test.py
index 7df1287..46a3a87 100644
--- a/tests/getinfo_test.py
+++ b/tests/getinfo_test.py
@@ -19,10 +19,10 @@ class GetinfoTest(unittest.TestCase):
     
     def test_getinfo(self):
         self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
-        self.assertEqual('success', sio.getvalue())
+        self.assertEqual('success', sio.getvalue().decode())
         
         self.assertEqual(200, self.curl.getinfo(pycurl.HTTP_CODE))
         assert type(self.curl.getinfo(pycurl.TOTAL_TIME)) is float
diff --git a/tests/header_function_test.py b/tests/header_function_test.py
index ae1062f..35cd9de 100644
--- a/tests/header_function_test.py
+++ b/tests/header_function_test.py
@@ -24,11 +24,11 @@ class HeaderFunctionTest(unittest.TestCase):
     
     def test_get(self):
         self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.setopt(pycurl.HEADERFUNCTION, self.header_function)
         self.curl.perform()
-        self.assertEqual('success', sio.getvalue())
+        self.assertEqual('success', sio.getvalue().decode())
         
         assert len(self.header_lines) > 0
         self.assertEqual("HTTP/1.0 200 OK\r\n", self.header_lines[0])
diff --git a/tests/multi_socket_select_test.py b/tests/multi_socket_select_test.py
index 47b361f..0936d4b 100644
--- a/tests/multi_socket_select_test.py
+++ b/tests/multi_socket_select_test.py
@@ -58,7 +58,7 @@ class MultiSocketSelectTest(unittest.TestCase):
             c = pycurl.Curl()
             # save info in standard Python attributes
             c.url = url
-            c.body = util.StringIO()
+            c.body = util.BytesIO()
             c.http_code = -1
             m.handles.append(c)
             # pycurl API calls
@@ -99,7 +99,7 @@ class MultiSocketSelectTest(unittest.TestCase):
 
         # print result
         for c in m.handles:
-            self.assertEqual('success', c.body.getvalue())
+            self.assertEqual('success', c.body.getvalue().decode())
             self.assertEqual(200, c.http_code)
             
             # multi, not curl handle
diff --git a/tests/multi_socket_test.py b/tests/multi_socket_test.py
index 6e3c25f..a2d6702 100644
--- a/tests/multi_socket_test.py
+++ b/tests/multi_socket_test.py
@@ -48,7 +48,7 @@ class MultiSocketTest(unittest.TestCase):
             c = pycurl.Curl()
             # save info in standard Python attributes
             c.url = url
-            c.body = util.StringIO()
+            c.body = util.BytesIO()
             c.http_code = -1
             m.handles.append(c)
             # pycurl API calls
@@ -76,7 +76,7 @@ class MultiSocketTest(unittest.TestCase):
 
         # print result
         for c in m.handles:
-            self.assertEqual('success', c.body.getvalue())
+            self.assertEqual('success', c.body.getvalue().decode())
             self.assertEqual(200, c.http_code)
             
             # multi, not curl handle
diff --git a/tests/pause_test.py b/tests/pause_test.py
index 1567718..5e9d74f 100644
--- a/tests/pause_test.py
+++ b/tests/pause_test.py
@@ -27,7 +27,7 @@ class PauseTest(unittest.TestCase):
     def check_pause(self, call):
         # the app sleeps for 0.5 seconds
         self.curl.setopt(pycurl.URL, 'http://localhost:8380/pause')
-        sio = util.StringIO()
+        sio = util.BytesIO()
         state = dict(paused=False, resumed=False)
         if call:
             def writefunc(data):
@@ -85,7 +85,7 @@ class PauseTest(unittest.TestCase):
         m.remove_handle(self.curl)
         m.close()
         
-        self.assertEqual('part1part2', sio.getvalue())
+        self.assertEqual('part1part2', sio.getvalue().decode())
         end = _time.time()
         # check that client side waited
         self.assertTrue(end-start > 1)
diff --git a/tests/share_test.py b/tests/share_test.py
index 6644f2e..b8f8c18 100644
--- a/tests/share_test.py
+++ b/tests/share_test.py
@@ -22,7 +22,7 @@ class WorkerThread(threading.Thread):
         self.curl = pycurl.Curl()
         self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
         self.curl.setopt(pycurl.SHARE, share)
-        self.sio = util.StringIO()
+        self.sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, self.sio.write)
 
     def run(self):
@@ -46,8 +46,8 @@ class ShareTest(unittest.TestCase):
         
         del s
         
-        self.assertEqual('success', t1.sio.getvalue())
-        self.assertEqual('success', t2.sio.getvalue())
+        self.assertEqual('success', t1.sio.getvalue().decode())
+        self.assertEqual('success', t2.sio.getvalue().decode())
     
     def test_share_close(self):
         s = pycurl.CurlShare()
diff --git a/tests/socket_open_test.py b/tests/socket_open_test.py
index e0b6176..c31c218 100644
--- a/tests/socket_open_test.py
+++ b/tests/socket_open_test.py
@@ -39,10 +39,10 @@ class SocketOpenTest(unittest.TestCase):
     def test_socket_open(self):
         self.curl.setopt(pycurl.OPENSOCKETFUNCTION, socket_open)
         self.curl.setopt(self.curl.URL, 'http://localhost:8380/success')
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
         
         assert socket_open_called
         self.assertEqual(("127.0.0.1", 8380), socket_open_address)
-        self.assertEqual('success', sio.getvalue())
+        self.assertEqual('success', sio.getvalue().decode())
diff --git a/tests/user_agent_string_test.py b/tests/user_agent_string_test.py
index 2741c2f..12f97ba 100644
--- a/tests/user_agent_string_test.py
+++ b/tests/user_agent_string_test.py
@@ -19,9 +19,9 @@ class UserAgentStringTest(unittest.TestCase):
     
     def test_pycurl_user_agent_string(self):
         self.curl.setopt(pycurl.URL, 'http://localhost:8380/header?h=user-agent')
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
-        user_agent = sio.getvalue()
+        user_agent = sio.getvalue().decode()
         assert user_agent.startswith('PycURL/')
         assert 'libcurl/' in user_agent
diff --git a/tests/util.py b/tests/util.py
index 5ff105f..c71e83f 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -5,13 +5,17 @@ import os, sys, socket
 import time as _time
 import pycurl
 
-try:
-    from cStringIO import StringIO
-except ImportError:
+py3 = sys.version_info[0] == 3
+
+# python 2/3 compatibility
+if py3:
+    from io import StringIO, BytesIO
+else:
     try:
-        from StringIO import StringIO
+        from cStringIO import StringIO
     except ImportError:
-        from io import StringIO
+        from StringIO import StringIO
+    BytesIO = StringIO
 
 def version_less_than_spec(version_tuple, spec_tuple):
     # spec_tuple may have 2 elements, expect version_tuple to have 3 elements
diff --git a/tests/write_to_file_test.py b/tests/write_to_file_test.py
index a4b3070..cce7330 100644
--- a/tests/write_to_file_test.py
+++ b/tests/write_to_file_test.py
@@ -27,4 +27,4 @@ class WriteToFileTest(unittest.TestCase):
             body = f.read()
         finally:
             f.close()
-        self.assertEqual('success', body)
+        self.assertEqual('success', body.decode())
-- 
1.7.1


From e898e064d93001ac35be57008586066a447e33e3 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 20:33:10 -0500
Subject: [PATCH 085/236] Update high level interface for pycurl returning body and headers as bytes now

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 python/curl/__init__.py    |   29 +++++++++++++++--------------
 tests/relative_url_test.py |    2 +-
 2 files changed, 16 insertions(+), 15 deletions(-)

diff --git a/python/curl/__init__.py b/python/curl/__init__.py
index b9d0942..eb6c06a 100644
--- a/python/curl/__init__.py
+++ b/python/curl/__init__.py
@@ -7,19 +7,21 @@
 # By Eric S. Raymond, April 2003.
 
 import sys, pycurl
-try:
+
+py3 = sys.version_info[0] == 3
+
+# python 2/3 compatibility
+if py3:
     import urllib.parse as urllib_parse
     from urllib.parse import urljoin
-except ImportError:
+    from io import BytesIO
+else:
     import urllib as urllib_parse
     from urlparse import urljoin
-try:
-    from cStringIO import StringIO
-except ImportError:
     try:
-        from StringIO import StringIO
+        from cStringIO import StringIO as BytesIO
     except ImportError:
-        from io import StringIO
+        from StringIO import StringIO as BytesIO
 
 try:
     import signal
@@ -38,7 +40,8 @@ class Curl:
         self.verbosity = 0
         self.fakeheaders = fakeheaders
         # Nothing past here should be modified by the caller.
-        self.payload = ""
+        self.payload = None
+        self.payload_io = BytesIO()
         self.hrd = ""
         # Verify that we've got the right site; harmless on a non-SSL connect.
         self.set_option(pycurl.SSL_VERIFYHOST, 2)
@@ -53,12 +56,9 @@ class Curl:
         self.set_timeout(30)
         # Use password identification from .netrc automatically
         self.set_option(pycurl.NETRC, 1)
-        # Set up a callback to capture the payload
-        def payload_callback(x):
-            self.payload += x
-        self.set_option(pycurl.WRITEFUNCTION, payload_callback)
+        self.set_option(pycurl.WRITEFUNCTION, self.payload_io.write)
         def header_callback(x):
-            self.hdr += x
+            self.hdr += x.decode('ascii')
         self.set_option(pycurl.HEADERFUNCTION, header_callback)
 
     def set_timeout(self, timeout):
@@ -84,9 +84,10 @@ class Curl:
             self.set_option(pycurl.HTTPHEADER, self.fakeheaders)
         if relative_url:
             self.set_option(pycurl.URL, urljoin(self.base_url, relative_url))
-        self.payload = ""
+        self.payload = None
         self.hdr = ""
         self.handle.perform()
+        self.payload = self.payload_io.getvalue()
         return self.payload
 
     def get(self, url="", params=None):
diff --git a/tests/relative_url_test.py b/tests/relative_url_test.py
index ef8b132..4cce45f 100644
--- a/tests/relative_url_test.py
+++ b/tests/relative_url_test.py
@@ -19,4 +19,4 @@ class RelativeUrlTest(unittest.TestCase):
     
     def test_get_relative(self):
         self.curl.get('/success')
-        self.assertEqual('success', self.curl.body())
+        self.assertEqual('success', self.curl.body().decode())
-- 
1.7.1


From 4e5687550eca7434b526c81b01bdc6e2351a1f28 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 20:33:24 -0500
Subject: [PATCH 086/236] Update remaining tests for pycurl returning body as bytes

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/header_function_test.py         |    2 +-
 tests/multi_test.py                   |   60 ++++++++++++++++----------------
 tests/multi_timer_test.py             |    4 +-
 tests/post_test.py                    |    8 ++--
 tests/post_with_read_callback_test.py |    4 +-
 tests/reset_test.py                   |    2 +-
 tests/setopt_lifecycle_test.py        |    4 +-
 tests/write_cb_bogus_test.py          |    2 +
 tests/write_to_stringio_test.py       |    6 ++--
 9 files changed, 47 insertions(+), 45 deletions(-)

diff --git a/tests/header_function_test.py b/tests/header_function_test.py
index 35cd9de..7c8c446 100644
--- a/tests/header_function_test.py
+++ b/tests/header_function_test.py
@@ -20,7 +20,7 @@ class HeaderFunctionTest(unittest.TestCase):
         self.curl.close()
     
     def header_function(self, line):
-        self.header_lines.append(line)
+        self.header_lines.append(line.decode())
     
     def test_get(self):
         self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
diff --git a/tests/multi_test.py b/tests/multi_test.py
index 24be0df..18f3123 100644
--- a/tests/multi_test.py
+++ b/tests/multi_test.py
@@ -25,8 +25,8 @@ def teardown_module(mod):
 
 class MultiTest(unittest.TestCase):
     def test_multi(self):
-        io1 = util.StringIO()
-        io2 = util.StringIO()
+        io1 = util.BytesIO()
+        io2 = util.BytesIO()
         m = pycurl.CurlMulti()
         handles = []
         c1 = pycurl.Curl()
@@ -54,8 +54,8 @@ class MultiTest(unittest.TestCase):
         c1.close()
         c2.close()
         
-        self.assertEqual('success', io1.getvalue())
-        self.assertEqual('success', io2.getvalue())
+        self.assertEqual('success', io1.getvalue().decode())
+        self.assertEqual('success', io2.getvalue().decode())
     
     def test_multi_select_fdset(self):
         c1 = pycurl.Curl()
@@ -64,9 +64,9 @@ class MultiTest(unittest.TestCase):
         c1.setopt(c1.URL, "http://localhost:8380/success")
         c2.setopt(c2.URL, "http://localhost:8381/success")
         c3.setopt(c3.URL, "http://localhost:8382/success")
-        c1.body = util.StringIO()
-        c2.body = util.StringIO()
-        c3.body = util.StringIO()
+        c1.body = util.BytesIO()
+        c2.body = util.BytesIO()
+        c3.body = util.BytesIO()
         c1.setopt(c1.WRITEFUNCTION, c1.body.write)
         c2.setopt(c2.WRITEFUNCTION, c2.body.write)
         c3.setopt(c3.WRITEFUNCTION, c3.body.write)
@@ -102,9 +102,9 @@ class MultiTest(unittest.TestCase):
         c2.close()
         c3.close()
         
-        self.assertEqual('success', c1.body.getvalue())
-        self.assertEqual('success', c2.body.getvalue())
-        self.assertEqual('success', c3.body.getvalue())
+        self.assertEqual('success', c1.body.getvalue().decode())
+        self.assertEqual('success', c2.body.getvalue().decode())
+        self.assertEqual('success', c3.body.getvalue().decode())
     
     def test_multi_status_codes(self):
         # init
@@ -119,7 +119,7 @@ class MultiTest(unittest.TestCase):
             c = pycurl.Curl()
             # save info in standard Python attributes
             c.url = url.rstrip()
-            c.body = util.StringIO()
+            c.body = util.BytesIO()
             c.http_code = -1
             m.handles.append(c)
             # pycurl API calls
@@ -148,13 +148,13 @@ class MultiTest(unittest.TestCase):
         m.close()
 
         # check result
-        self.assertEqual('success', m.handles[0].body.getvalue())
+        self.assertEqual('success', m.handles[0].body.getvalue().decode())
         self.assertEqual(200, m.handles[0].http_code)
         # bottle generated response body
-        self.assertEqual('forbidden', m.handles[1].body.getvalue())
+        self.assertEqual('forbidden', m.handles[1].body.getvalue().decode())
         self.assertEqual(403, m.handles[1].http_code)
         # bottle generated response body
-        self.assertEqual('not found', m.handles[2].body.getvalue())
+        self.assertEqual('not found', m.handles[2].body.getvalue().decode())
         self.assertEqual(404, m.handles[2].http_code)
     
     def check_adding_closed_handle(self, close_fn):
@@ -170,7 +170,7 @@ class MultiTest(unittest.TestCase):
             c = pycurl.Curl()
             # save info in standard Python attributes
             c.url = url
-            c.body = util.StringIO()
+            c.body = util.BytesIO()
             c.http_code = -1
             c.debug = 0
             m.handles.append(c)
@@ -209,13 +209,13 @@ class MultiTest(unittest.TestCase):
         m.close()
 
         # check result
-        self.assertEqual('success', m.handles[0].body.getvalue())
+        self.assertEqual('success', m.handles[0].body.getvalue().decode())
         self.assertEqual(200, m.handles[0].http_code)
         # bottle generated response body
-        self.assertEqual('forbidden', m.handles[1].body.getvalue())
+        self.assertEqual('forbidden', m.handles[1].body.getvalue().decode())
         self.assertEqual(403, m.handles[1].http_code)
         # bottle generated response body
-        self.assertEqual('', m.handles[2].body.getvalue())
+        self.assertEqual('', m.handles[2].body.getvalue().decode())
         self.assertEqual(-1, m.handles[2].http_code)
     
     def _remove_then_close(self, m, c):
@@ -248,9 +248,9 @@ class MultiTest(unittest.TestCase):
         c1.setopt(c1.URL, "http://localhost:8380/success")
         c2.setopt(c2.URL, "http://localhost:8381/success")
         c3.setopt(c3.URL, "http://localhost:8382/success")
-        c1.body = util.StringIO()
-        c2.body = util.StringIO()
-        c3.body = util.StringIO()
+        c1.body = util.BytesIO()
+        c2.body = util.BytesIO()
+        c3.body = util.BytesIO()
         c1.setopt(c1.WRITEFUNCTION, c1.body.write)
         c2.setopt(c2.WRITEFUNCTION, c2.body.write)
         c3.setopt(c3.WRITEFUNCTION, c3.body.write)
@@ -288,9 +288,9 @@ class MultiTest(unittest.TestCase):
         c2.close()
         c3.close()
         
-        self.assertEqual('success', c1.body.getvalue())
-        self.assertEqual('success', c2.body.getvalue())
-        self.assertEqual('success', c3.body.getvalue())
+        self.assertEqual('success', c1.body.getvalue().decode())
+        self.assertEqual('success', c2.body.getvalue().decode())
+        self.assertEqual('success', c3.body.getvalue().decode())
     
     def test_multi_info_read(self):
         c1 = pycurl.Curl()
@@ -299,9 +299,9 @@ class MultiTest(unittest.TestCase):
         c1.setopt(c1.URL, "http://localhost:8380/short_wait")
         c2.setopt(c2.URL, "http://localhost:8381/short_wait")
         c3.setopt(c3.URL, "http://localhost:8382/short_wait")
-        c1.body = util.StringIO()
-        c2.body = util.StringIO()
-        c3.body = util.StringIO()
+        c1.body = util.BytesIO()
+        c2.body = util.BytesIO()
+        c3.body = util.BytesIO()
         c1.setopt(c1.WRITEFUNCTION, c1.body.write)
         c2.setopt(c2.WRITEFUNCTION, c2.body.write)
         c3.setopt(c3.WRITEFUNCTION, c3.body.write)
@@ -354,9 +354,9 @@ class MultiTest(unittest.TestCase):
         c2.close()
         c3.close()
         
-        self.assertEqual('success', c1.body.getvalue())
-        self.assertEqual('success', c2.body.getvalue())
-        self.assertEqual('success', c3.body.getvalue())
+        self.assertEqual('success', c1.body.getvalue().decode())
+        self.assertEqual('success', c2.body.getvalue().decode())
+        self.assertEqual('success', c3.body.getvalue().decode())
     
     def test_multi_close(self):
         m = pycurl.CurlMulti()
diff --git a/tests/multi_timer_test.py b/tests/multi_timer_test.py
index 6e61552..650aa3a 100644
--- a/tests/multi_timer_test.py
+++ b/tests/multi_timer_test.py
@@ -45,7 +45,7 @@ class MultiSocketTest(unittest.TestCase):
             c = pycurl.Curl()
             # save info in standard Python attributes
             c.url = url
-            c.body = util.StringIO()
+            c.body = util.BytesIO()
             c.http_code = -1
             m.handles.append(c)
             # pycurl API calls
@@ -70,7 +70,7 @@ class MultiSocketTest(unittest.TestCase):
 
         # print result
         for c in m.handles:
-            self.assertEqual('success', c.body.getvalue())
+            self.assertEqual('success', c.body.getvalue().decode())
             self.assertEqual(200, c.http_code)
         
         assert len(timers) > 0
diff --git a/tests/post_test.py b/tests/post_test.py
index d8d8f32..ca527fb 100644
--- a/tests/post_test.py
+++ b/tests/post_test.py
@@ -64,11 +64,11 @@ class PostTest(unittest.TestCase):
         # UnicodeDecodeError: 'utf8' codec can't decode byte 0x80 in position 4: invalid start byte
         
         #self.curl.setopt(pycurl.VERBOSE, 1)
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
         self.assertEqual(200, self.curl.getinfo(pycurl.HTTP_CODE))
-        body = sio.getvalue()
+        body = sio.getvalue().decode()
         returned_fields = json.loads(body)
         self.assertEqual(pf, returned_fields)
     
@@ -116,9 +116,9 @@ class PostTest(unittest.TestCase):
         self.curl.setopt(pycurl.URL, endpoint)
         self.curl.setopt(pycurl.HTTPPOST, send)
         #self.curl.setopt(pycurl.VERBOSE, 1)
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
-        body = sio.getvalue()
+        body = sio.getvalue().decode()
         returned_fields = json.loads(body)
         self.assertEqual(expect, returned_fields)
diff --git a/tests/post_with_read_callback_test.py b/tests/post_with_read_callback_test.py
index aba4e16..2ff25e1 100644
--- a/tests/post_with_read_callback_test.py
+++ b/tests/post_with_read_callback_test.py
@@ -52,9 +52,9 @@ class PostWithReadCallbackTest(unittest.TestCase):
         self.curl.setopt(self.curl.POSTFIELDSIZE, len(POSTSTRING))
         self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
         #self.curl.setopt(self.curl.VERBOSE, 1)
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
         
-        actual = json.loads(sio.getvalue())
+        actual = json.loads(sio.getvalue().decode())
         self.assertEqual(POSTFIELDS, actual)
diff --git a/tests/reset_test.py b/tests/reset_test.py
index 52af981..089a25a 100644
--- a/tests/reset_test.py
+++ b/tests/reset_test.py
@@ -17,7 +17,7 @@ setup_module, teardown_module = appmanager.setup(('app', 8380))
 class ResetTest(unittest.TestCase):
     # XXX this test was broken when it was test_reset.py
     def skip_reset(self):
-        outf = util.StringIO()
+        outf = util.BytesIO()
         cm = pycurl.CurlMulti()
 
         eh = pycurl.Curl()
diff --git a/tests/setopt_lifecycle_test.py b/tests/setopt_lifecycle_test.py
index 0bb9530..7e228da 100644
--- a/tests/setopt_lifecycle_test.py
+++ b/tests/setopt_lifecycle_test.py
@@ -45,11 +45,11 @@ class SetoptLifecycleTest(unittest.TestCase):
         for i in range(100):
             curl = requests[i]
             #self.curl.setopt(pycurl.VERBOSE, 1)
-            sio = util.StringIO()
+            sio = util.BytesIO()
             curl.setopt(pycurl.WRITEFUNCTION, sio.write)
             curl.perform()
             self.assertEqual(200, curl.getinfo(pycurl.HTTP_CODE))
-            body = sio.getvalue()
+            body = sio.getvalue().decode()
             returned_fields = json.loads(body)
             self.assertEqual(dict(field='value%d' % i), returned_fields)
         
diff --git a/tests/write_cb_bogus_test.py b/tests/write_cb_bogus_test.py
index 0cff608..65e623c 100644
--- a/tests/write_cb_bogus_test.py
+++ b/tests/write_cb_bogus_test.py
@@ -33,6 +33,8 @@ class WriteAbortTest(unittest.TestCase):
         self.curl.setopt(pycurl.WRITEFUNCTION, write_cb)
         try:
             self.curl.perform()
+            
+            self.fail('Should not get here')
         except pycurl.error:
             err, msg = sys.exc_info()[1].args
             # we expect pycurl.E_WRITE_ERROR as the response
diff --git a/tests/write_to_stringio_test.py b/tests/write_to_stringio_test.py
index 418a794..3b2e94e 100644
--- a/tests/write_to_stringio_test.py
+++ b/tests/write_to_stringio_test.py
@@ -17,9 +17,9 @@ class WriteToStringioTest(unittest.TestCase):
     def tearDown(self):
         self.curl.close()
     
-    def test_get(self):
+    def test_write_to_bytesio(self):
         self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
-        self.assertEqual('success', sio.getvalue())
+        self.assertEqual('success', sio.getvalue().decode())
-- 
1.7.1


From 999bae999d8367aef7dae8aed7345c4535384142 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 18:02:29 -0500
Subject: [PATCH 087/236] Test for read callback returning bytes

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/post_with_read_callback_test.py |   29 +++++++++++++++++++++++++----
 1 files changed, 25 insertions(+), 4 deletions(-)

diff --git a/tests/post_with_read_callback_test.py b/tests/post_with_read_callback_test.py
index 2ff25e1..a762773 100644
--- a/tests/post_with_read_callback_test.py
+++ b/tests/post_with_read_callback_test.py
@@ -26,14 +26,15 @@ POSTFIELDS = {
 POSTSTRING = urllib_parse.urlencode(POSTFIELDS)
 
 class DataProvider(object):
-    def __init__(self):
+    def __init__(self, data):
+        self.data = data
         self.finished = False
 
     def read_cb(self, size):
-        assert len(POSTSTRING) <= size
+        assert len(self.data) <= size
         if not self.finished:
             self.finished = True
-            return POSTSTRING
+            return self.data
         else:
             # Nothing more to read
             return ""
@@ -46,7 +47,7 @@ class PostWithReadCallbackTest(unittest.TestCase):
         self.curl.close()
     
     def test_post_with_read_callback(self):
-        d = DataProvider()
+        d = DataProvider(POSTSTRING)
         self.curl.setopt(self.curl.URL, 'http://localhost:8380/postfields')
         self.curl.setopt(self.curl.POST, 1)
         self.curl.setopt(self.curl.POSTFIELDSIZE, len(POSTSTRING))
@@ -58,3 +59,23 @@ class PostWithReadCallbackTest(unittest.TestCase):
         
         actual = json.loads(sio.getvalue().decode())
         self.assertEqual(POSTFIELDS, actual)
+    
+    @util.only_python3
+    def test_post_with_read_callback_returning_bytes(self):
+        poststring = 'hello=world'
+        
+        data = poststring.encode()
+        assert type(data) == bytes
+        d = DataProvider(data)
+        
+        self.curl.setopt(self.curl.URL, 'http://localhost:8380/postfields')
+        self.curl.setopt(self.curl.POST, 1)
+        self.curl.setopt(self.curl.POSTFIELDSIZE, len(poststring))
+        self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
+        #self.curl.setopt(self.curl.VERBOSE, 1)
+        sio = util.StringIO()
+        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
+        self.curl.perform()
+        
+        actual = json.loads(sio.getvalue())
+        self.assertEqual(dict(hello='world'), actual)
-- 
1.7.1


From 0f43bb520da0cd5a434f10a4fef57efb019bec7d Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 18:13:27 -0500
Subject: [PATCH 088/236] Check that read callback returning bytes with embedded nulls works correctly

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/post_with_read_callback_test.py |   20 ++++++++++++++++++++
 1 files changed, 20 insertions(+), 0 deletions(-)

diff --git a/tests/post_with_read_callback_test.py b/tests/post_with_read_callback_test.py
index a762773..4ded23a 100644
--- a/tests/post_with_read_callback_test.py
+++ b/tests/post_with_read_callback_test.py
@@ -79,3 +79,23 @@ class PostWithReadCallbackTest(unittest.TestCase):
         
         actual = json.loads(sio.getvalue())
         self.assertEqual(dict(hello='world'), actual)
+    
+    @util.only_python3
+    def test_post_with_read_callback_returning_bytes_with_nulls(self):
+        poststring = "hello=wor\0ld"
+        
+        data = poststring.encode()
+        assert type(data) == bytes
+        d = DataProvider(data)
+        
+        self.curl.setopt(self.curl.URL, 'http://localhost:8380/postfields')
+        self.curl.setopt(self.curl.POST, 1)
+        self.curl.setopt(self.curl.POSTFIELDSIZE, len(poststring))
+        self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
+        #self.curl.setopt(self.curl.VERBOSE, 1)
+        sio = util.StringIO()
+        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
+        self.curl.perform()
+        
+        actual = json.loads(sio.getvalue())
+        self.assertEqual(dict(hello="wor\0ld"), actual)
-- 
1.7.1


From c3b053a5c7a824e831e615998ea2c927c1a03dd8 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 18:16:30 -0500
Subject: [PATCH 089/236] Dry

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/post_with_read_callback_test.py |   25 +++++--------------------
 1 files changed, 5 insertions(+), 20 deletions(-)

diff --git a/tests/post_with_read_callback_test.py b/tests/post_with_read_callback_test.py
index 4ded23a..bca5c42 100644
--- a/tests/post_with_read_callback_test.py
+++ b/tests/post_with_read_callback_test.py
@@ -62,28 +62,13 @@ class PostWithReadCallbackTest(unittest.TestCase):
     
     @util.only_python3
     def test_post_with_read_callback_returning_bytes(self):
-        poststring = 'hello=world'
-        
-        data = poststring.encode()
-        assert type(data) == bytes
-        d = DataProvider(data)
-        
-        self.curl.setopt(self.curl.URL, 'http://localhost:8380/postfields')
-        self.curl.setopt(self.curl.POST, 1)
-        self.curl.setopt(self.curl.POSTFIELDSIZE, len(poststring))
-        self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
-        #self.curl.setopt(self.curl.VERBOSE, 1)
-        sio = util.StringIO()
-        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
-        self.curl.perform()
-        
-        actual = json.loads(sio.getvalue())
-        self.assertEqual(dict(hello='world'), actual)
+        self.check_bytes('hello=world', dict(hello='world'))
     
     @util.only_python3
     def test_post_with_read_callback_returning_bytes_with_nulls(self):
-        poststring = "hello=wor\0ld"
-        
+        self.check_bytes("hello=wor\0ld", dict(hello="wor\0ld"))
+    
+    def check_bytes(self, poststring, expected):
         data = poststring.encode()
         assert type(data) == bytes
         d = DataProvider(data)
@@ -98,4 +83,4 @@ class PostWithReadCallbackTest(unittest.TestCase):
         self.curl.perform()
         
         actual = json.loads(sio.getvalue())
-        self.assertEqual(dict(hello="wor\0ld"), actual)
+        self.assertEqual(expected, actual)
-- 
1.7.1


From df5939fba8f40fe1969cab446d931a2184aa1e10 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 18:20:55 -0500
Subject: [PATCH 090/236] Add corresponding tests for strings

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/post_with_read_callback_test.py |   24 ++++++++++++++++++++++++
 1 files changed, 24 insertions(+), 0 deletions(-)

diff --git a/tests/post_with_read_callback_test.py b/tests/post_with_read_callback_test.py
index bca5c42..f87ae60 100644
--- a/tests/post_with_read_callback_test.py
+++ b/tests/post_with_read_callback_test.py
@@ -84,3 +84,27 @@ class PostWithReadCallbackTest(unittest.TestCase):
         
         actual = json.loads(sio.getvalue())
         self.assertEqual(expected, actual)
+    
+    @util.only_python3
+    def test_post_with_read_callback_returning_unicode(self):
+        self.check_unicode('hello=world', dict(hello='world'))
+    
+    @util.only_python3
+    def test_post_with_read_callback_returning_unicode_with_nulls(self):
+        self.check_unicode("hello=wor\0ld", dict(hello="wor\0ld"))
+    
+    def check_unicode(self, poststring, expected):
+        assert type(poststring) == str
+        d = DataProvider(poststring)
+        
+        self.curl.setopt(self.curl.URL, 'http://localhost:8380/postfields')
+        self.curl.setopt(self.curl.POST, 1)
+        self.curl.setopt(self.curl.POSTFIELDSIZE, len(poststring))
+        self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
+        #self.curl.setopt(self.curl.VERBOSE, 1)
+        sio = util.StringIO()
+        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
+        self.curl.perform()
+        
+        actual = json.loads(sio.getvalue())
+        self.assertEqual(expected, actual)
-- 
1.7.1


From 17c7b584e4d288eda9d7be6ef02d70131760eef7 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 18:32:59 -0500
Subject: [PATCH 091/236] Check multibyte string encoded to bytes

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/post_with_read_callback_test.py |    9 +++++++--
 1 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/tests/post_with_read_callback_test.py b/tests/post_with_read_callback_test.py
index f87ae60..36a7ab1 100644
--- a/tests/post_with_read_callback_test.py
+++ b/tests/post_with_read_callback_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
@@ -68,6 +68,10 @@ class PostWithReadCallbackTest(unittest.TestCase):
     def test_post_with_read_callback_returning_bytes_with_nulls(self):
         self.check_bytes("hello=wor\0ld", dict(hello="wor\0ld"))
     
+    @util.only_python3
+    def test_post_with_read_callback_returning_bytes_with_multibyte(self):
+        self.check_bytes("hello=Пушкин", dict(hello="Пушкин"))
+    
     def check_bytes(self, poststring, expected):
         data = poststring.encode()
         assert type(data) == bytes
@@ -75,7 +79,8 @@ class PostWithReadCallbackTest(unittest.TestCase):
         
         self.curl.setopt(self.curl.URL, 'http://localhost:8380/postfields')
         self.curl.setopt(self.curl.POST, 1)
-        self.curl.setopt(self.curl.POSTFIELDSIZE, len(poststring))
+        # length of bytes
+        self.curl.setopt(self.curl.POSTFIELDSIZE, len(data))
         self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
         #self.curl.setopt(self.curl.VERBOSE, 1)
         sio = util.StringIO()
-- 
1.7.1


From 6d091117faad66da3733756f754f495a58ea77c4 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 18:42:22 -0500
Subject: [PATCH 092/236] Encoding multibyte data is not going to work well, only allow ascii

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/post_with_read_callback_test.py |   13 +++++++++++++
 1 files changed, 13 insertions(+), 0 deletions(-)

diff --git a/tests/post_with_read_callback_test.py b/tests/post_with_read_callback_test.py
index 36a7ab1..0bb2beb 100644
--- a/tests/post_with_read_callback_test.py
+++ b/tests/post_with_read_callback_test.py
@@ -4,6 +4,7 @@
 
 import pycurl
 import unittest
+import sys
 try:
     import json
 except ImportError:
@@ -98,6 +99,18 @@ class PostWithReadCallbackTest(unittest.TestCase):
     def test_post_with_read_callback_returning_unicode_with_nulls(self):
         self.check_unicode("hello=wor\0ld", dict(hello="wor\0ld"))
     
+    @util.only_python3
+    def test_post_with_read_callback_returning_unicode_with_multibyte(self):
+        try:
+            self.check_unicode("hello=Пушкин", dict(hello="Пушкин"))
+            # prints:
+            # UnicodeEncodeError: 'ascii' codec can't encode characters in position 6-11: ordinal not in range(128)
+        except pycurl.error:
+            err, msg = sys.exc_info()[1].args
+            # we expect pycurl.E_WRITE_ERROR as the response
+            self.assertEqual(pycurl.E_ABORTED_BY_CALLBACK, err)
+            self.assertEqual('operation aborted by callback', msg)
+    
     def check_unicode(self, poststring, expected):
         assert type(poststring) == str
         d = DataProvider(poststring)
-- 
1.7.1


From 9535908f7928091995c7c4fcf214c5d528e593d6 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 20:33:24 -0500
Subject: [PATCH 093/236] Update newly added tests for pycurl returning body as bytes

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/post_with_read_callback_test.py |    8 ++++----
 1 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/tests/post_with_read_callback_test.py b/tests/post_with_read_callback_test.py
index 0bb2beb..113e076 100644
--- a/tests/post_with_read_callback_test.py
+++ b/tests/post_with_read_callback_test.py
@@ -84,11 +84,11 @@ class PostWithReadCallbackTest(unittest.TestCase):
         self.curl.setopt(self.curl.POSTFIELDSIZE, len(data))
         self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
         #self.curl.setopt(self.curl.VERBOSE, 1)
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
         
-        actual = json.loads(sio.getvalue())
+        actual = json.loads(sio.getvalue().decode())
         self.assertEqual(expected, actual)
     
     @util.only_python3
@@ -120,9 +120,9 @@ class PostWithReadCallbackTest(unittest.TestCase):
         self.curl.setopt(self.curl.POSTFIELDSIZE, len(poststring))
         self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
         #self.curl.setopt(self.curl.VERBOSE, 1)
-        sio = util.StringIO()
+        sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
         
-        actual = json.loads(sio.getvalue())
+        actual = json.loads(sio.getvalue().decode())
         self.assertEqual(expected, actual)
-- 
1.7.1


From fb8efa297274b35dd16ef01bfb0ef0d903d47b59 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 9 Dec 2013 00:05:58 -0500
Subject: [PATCH 094/236] Add a test for writing to StringIO which is now different and does not work

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/write_to_stringio_test.py |   16 ++++++++++++++++
 1 files changed, 16 insertions(+), 0 deletions(-)

diff --git a/tests/write_to_stringio_test.py b/tests/write_to_stringio_test.py
index 3b2e94e..c514d40 100644
--- a/tests/write_to_stringio_test.py
+++ b/tests/write_to_stringio_test.py
@@ -4,6 +4,7 @@
 
 import pycurl
 import unittest
+import sys
 
 from . import appmanager
 from . import util
@@ -23,3 +24,18 @@ class WriteToStringioTest(unittest.TestCase):
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
         self.assertEqual('success', sio.getvalue().decode())
+    
+    @util.only_python3
+    def test_write_to_stringio(self):
+        self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
+        # stringio in python 3
+        sio = util.StringIO()
+        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
+        try:
+            self.curl.perform()
+            
+            self.fail('Should have received a write error')
+        except pycurl.error:
+            err, msg = sys.exc_info()[1].args
+            # we expect pycurl.E_WRITE_ERROR as the response
+            assert pycurl.E_WRITE_ERROR == err
-- 
1.7.1


From 4eae787a7876657a2e971e93187c26904757a444 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 16:44:53 -0500
Subject: [PATCH 095/236] Test trying to obtain missing attributes

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/pycurl_object_test.py |   16 ++++++++++++++++
 1 files changed, 16 insertions(+), 0 deletions(-)

diff --git a/tests/pycurl_object_test.py b/tests/pycurl_object_test.py
index 8f7d231..ba31159 100644
--- a/tests/pycurl_object_test.py
+++ b/tests/pycurl_object_test.py
@@ -19,6 +19,9 @@ class PycurlObjectTest(unittest.TestCase):
     def test_get_attribute_curl(self):
         self.instantiate_and_check(self.check_get_attribute, 'Curl')
     
+    def test_get_missing_attribute_curl(self):
+        self.instantiate_and_check(self.check_get_missing_attribute, 'Curl')
+    
     def test_delete_attribute_curl(self):
         self.instantiate_and_check(self.check_delete_attribute, 'Curl')
     
@@ -28,6 +31,9 @@ class PycurlObjectTest(unittest.TestCase):
     def test_get_attribute_multi(self):
         self.instantiate_and_check(self.check_get_attribute, 'CurlMulti')
     
+    def test_get_missing_attribute_curl(self):
+        self.instantiate_and_check(self.check_get_missing_attribute, 'CurlMulti')
+    
     def test_delete_attribute_multi(self):
         self.instantiate_and_check(self.check_delete_attribute, 'CurlMulti')
     
@@ -37,6 +43,9 @@ class PycurlObjectTest(unittest.TestCase):
     def test_get_attribute_share(self):
         self.instantiate_and_check(self.check_get_attribute, 'CurlShare')
     
+    def test_get_missing_attribute_curl(self):
+        self.instantiate_and_check(self.check_get_missing_attribute, 'CurlShare')
+    
     def test_delete_attribute_share(self):
         self.instantiate_and_check(self.check_delete_attribute, 'CurlShare')
     
@@ -58,6 +67,13 @@ class PycurlObjectTest(unittest.TestCase):
         pycurl_obj.attr = 1
         self.assertEqual(1, pycurl_obj.attr)
     
+    def check_get_missing_attribute(self, pycurl_obj):
+        try:
+            getattr(pycurl_obj, 'doesnotexist')
+            self.fail('Expected an AttributeError exception to be raised')
+        except AttributeError:
+            pass
+    
     def check_delete_attribute(self, pycurl_obj):
         assert not hasattr(pycurl_obj, 'attr')
         pycurl_obj.attr = 1
-- 
1.7.1


From a211805e1893c482a2fba21cce20fc06e2806c02 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 17:30:13 -0500
Subject: [PATCH 096/236] Check that trying to delete nonexistent attributes raises AttributeError

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/pycurl_object_test.py |   16 ++++++++++++++++
 1 files changed, 16 insertions(+), 0 deletions(-)

diff --git a/tests/pycurl_object_test.py b/tests/pycurl_object_test.py
index ba31159..80a12a9 100644
--- a/tests/pycurl_object_test.py
+++ b/tests/pycurl_object_test.py
@@ -25,6 +25,9 @@ class PycurlObjectTest(unittest.TestCase):
     def test_delete_attribute_curl(self):
         self.instantiate_and_check(self.check_delete_attribute, 'Curl')
     
+    def test_delete_missing_attribute_curl(self):
+        self.instantiate_and_check(self.check_delete_missing_attribute, 'Curl')
+    
     def test_set_attribute_multi(self):
         self.instantiate_and_check(self.check_set_attribute, 'CurlMulti')
     
@@ -37,6 +40,9 @@ class PycurlObjectTest(unittest.TestCase):
     def test_delete_attribute_multi(self):
         self.instantiate_and_check(self.check_delete_attribute, 'CurlMulti')
     
+    def test_delete_missing_attribute_curl(self):
+        self.instantiate_and_check(self.check_delete_missing_attribute, 'CurlMulti')
+    
     def test_set_attribute_share(self):
         self.instantiate_and_check(self.check_set_attribute, 'CurlShare')
     
@@ -49,6 +55,9 @@ class PycurlObjectTest(unittest.TestCase):
     def test_delete_attribute_share(self):
         self.instantiate_and_check(self.check_delete_attribute, 'CurlShare')
     
+    def test_delete_missing_attribute_curl(self):
+        self.instantiate_and_check(self.check_delete_missing_attribute, 'CurlShare')
+    
     def instantiate_and_check(self, fn, cls_name):
         cls = getattr(pycurl, cls_name)
         instance = cls()
@@ -82,6 +91,13 @@ class PycurlObjectTest(unittest.TestCase):
         del pycurl_obj.attr
         assert not hasattr(pycurl_obj, 'attr')
     
+    def check_delete_missing_attribute(self, pycurl_obj):
+        try:
+            del pycurl_obj.doesnotexist
+            self.fail('Expected an AttributeError exception to be raised')
+        except AttributeError:
+            pass
+    
     def test_modify_attribute_curl(self):
         self.check_modify_attribute(pycurl.Curl, 'READFUNC_PAUSE')
     
-- 
1.7.1


From d7b6f233bbb6fff93fe6f8360f62966a91684367 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 17:41:07 -0500
Subject: [PATCH 097/236] A tempfile is not a python 2 file; arrange for separate tests to exist for files and tempfiles

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/write_to_file_test.py |   50 ++++++++++++++++++++++++++++++++++++++++++-
 1 files changed, 49 insertions(+), 1 deletions(-)

diff --git a/tests/write_to_file_test.py b/tests/write_to_file_test.py
index cce7330..035649b 100644
--- a/tests/write_to_file_test.py
+++ b/tests/write_to_file_test.py
@@ -5,6 +5,8 @@
 import unittest
 import pycurl
 import tempfile
+import shutil
+import os.path
 
 from . import appmanager
 
@@ -17,7 +19,7 @@ class WriteToFileTest(unittest.TestCase):
     def tearDown(self):
         self.curl.close()
     
-    def test_get_to_file(self):
+    def test_write_to_tempfile_via_function(self):
         self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
         f = tempfile.NamedTemporaryFile()
         try:
@@ -28,3 +30,49 @@ class WriteToFileTest(unittest.TestCase):
         finally:
             f.close()
         self.assertEqual('success', body.decode())
+    
+    def test_write_to_tempfile_via_object(self):
+        self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
+        f = tempfile.NamedTemporaryFile()
+        try:
+            self.curl.setopt(pycurl.WRITEDATA, f)
+            self.curl.perform()
+            f.seek(0)
+            body = f.read()
+        finally:
+            f.close()
+        self.assertEqual('success', body.decode())
+    
+    def test_write_to_file_via_function(self):
+        self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
+        dir = tempfile.mkdtemp()
+        try:
+            path = os.path.join(dir, 'pycurltest')
+            f = open(path, 'w+')
+            try:
+                self.curl.setopt(pycurl.WRITEFUNCTION, f.write)
+                self.curl.perform()
+                f.seek(0)
+                body = f.read()
+            finally:
+                f.close()
+        finally:
+            shutil.rmtree(dir)
+        self.assertEqual('success', body.decode())
+    
+    def test_write_to_file_via_object(self):
+        self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
+        dir = tempfile.mkdtemp()
+        try:
+            path = os.path.join(dir, 'pycurltest')
+            f = open(path, 'w+')
+            try:
+                self.curl.setopt(pycurl.WRITEDATA, f)
+                self.curl.perform()
+                f.seek(0)
+                body = f.read()
+            finally:
+                f.close()
+        finally:
+            shutil.rmtree(dir)
+        self.assertEqual('success', body.decode())
-- 
1.7.1


From acc6ee8826e379060be61971925ebdb1f0b26101 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 17:56:12 -0500
Subject: [PATCH 098/236] Files must be opened in binary mode, otherwise python expects f.write to take strings

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/write_to_file_test.py |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/tests/write_to_file_test.py b/tests/write_to_file_test.py
index 035649b..4ec0969 100644
--- a/tests/write_to_file_test.py
+++ b/tests/write_to_file_test.py
@@ -48,7 +48,7 @@ class WriteToFileTest(unittest.TestCase):
         dir = tempfile.mkdtemp()
         try:
             path = os.path.join(dir, 'pycurltest')
-            f = open(path, 'w+')
+            f = open(path, 'wb+')
             try:
                 self.curl.setopt(pycurl.WRITEFUNCTION, f.write)
                 self.curl.perform()
@@ -65,7 +65,7 @@ class WriteToFileTest(unittest.TestCase):
         dir = tempfile.mkdtemp()
         try:
             path = os.path.join(dir, 'pycurltest')
-            f = open(path, 'w+')
+            f = open(path, 'wb+')
             try:
                 self.curl.setopt(pycurl.WRITEDATA, f)
                 self.curl.perform()
-- 
1.7.1


From 943007c3adb269390ebc13669f93ce832589ae29 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 17:44:08 -0500
Subject: [PATCH 099/236] This will only work on python 3

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/write_to_file_test.py |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/tests/write_to_file_test.py b/tests/write_to_file_test.py
index 4ec0969..b89b875 100644
--- a/tests/write_to_file_test.py
+++ b/tests/write_to_file_test.py
@@ -9,6 +9,7 @@ import shutil
 import os.path
 
 from . import appmanager
+from . import util
 
 setup_module, teardown_module = appmanager.setup(('app', 8380))
 
@@ -31,6 +32,7 @@ class WriteToFileTest(unittest.TestCase):
             f.close()
         self.assertEqual('success', body.decode())
     
+    @util.only_python3
     def test_write_to_tempfile_via_object(self):
         self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
         f = tempfile.NamedTemporaryFile()
-- 
1.7.1


From bd4c6e4adc0009d0d37dd6fce8caefd2516e6276 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 9 Dec 2013 00:21:10 -0500
Subject: [PATCH 100/236] Not sure why it worked on my machine but contents should probably be decoded

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/app.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/tests/app.py b/tests/app.py
index adae4db..5232ba0 100644
--- a/tests/app.py
+++ b/tests/app.py
@@ -45,7 +45,7 @@ def convert_file(key, file):
     return {
         'name': file.name,
         'filename': file.filename,
-        'data': file.file.read(),
+        'data': file.file.read().decode(),
     }
 
 @app.route('/files', method='post')
-- 
1.7.1


From e6af39cabf7077cc1f33214da7b3e5942b558ab8 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 9 Dec 2013 00:18:57 -0500
Subject: [PATCH 101/236] Rewrite bytes/unicode read function test cases to work correctly

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/app.py                          |    5 ++++
 tests/post_with_read_callback_test.py |   34 ++++++++++++++++++--------------
 2 files changed, 24 insertions(+), 15 deletions(-)

diff --git a/tests/app.py b/tests/app.py
index 5232ba0..5d99c49 100644
--- a/tests/app.py
+++ b/tests/app.py
@@ -29,6 +29,11 @@ def not_found():
 def postfields():
     return json.dumps(dict(bottle.request.forms))
 
+@app.route('/raw_utf8', method='post')
+def raw_utf8_repr():
+    data = bottle.request.body.getvalue().decode('utf8')
+    return json.dumps(data)
+
 # XXX file is not a bottle FileUpload instance, but FieldStorage?
 def convert_file(key, file):
     return {
diff --git a/tests/post_with_read_callback_test.py b/tests/post_with_read_callback_test.py
index 113e076..bf05540 100644
--- a/tests/post_with_read_callback_test.py
+++ b/tests/post_with_read_callback_test.py
@@ -63,23 +63,24 @@ class PostWithReadCallbackTest(unittest.TestCase):
     
     @util.only_python3
     def test_post_with_read_callback_returning_bytes(self):
-        self.check_bytes('hello=world', dict(hello='world'))
+        self.check_bytes('world')
     
     @util.only_python3
     def test_post_with_read_callback_returning_bytes_with_nulls(self):
-        self.check_bytes("hello=wor\0ld", dict(hello="wor\0ld"))
+        self.check_bytes("wor\0ld")
     
     @util.only_python3
     def test_post_with_read_callback_returning_bytes_with_multibyte(self):
-        self.check_bytes("hello=Пушкин", dict(hello="Пушкин"))
+        self.check_bytes("Пушкин")
     
-    def check_bytes(self, poststring, expected):
-        data = poststring.encode()
+    def check_bytes(self, poststring):
+        data = poststring.encode('utf8')
         assert type(data) == bytes
         d = DataProvider(data)
         
-        self.curl.setopt(self.curl.URL, 'http://localhost:8380/postfields')
+        self.curl.setopt(self.curl.URL, 'http://localhost:8380/raw_utf8')
         self.curl.setopt(self.curl.POST, 1)
+        self.curl.setopt(self.curl.HTTPHEADER, ['Content-Type: application/octet-stream'])
         # length of bytes
         self.curl.setopt(self.curl.POSTFIELDSIZE, len(data))
         self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
@@ -88,21 +89,22 @@ class PostWithReadCallbackTest(unittest.TestCase):
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
         
-        actual = json.loads(sio.getvalue().decode())
-        self.assertEqual(expected, actual)
+        # json should be ascii
+        actual = json.loads(sio.getvalue().decode('ascii'))
+        self.assertEqual(poststring, actual)
     
     @util.only_python3
     def test_post_with_read_callback_returning_unicode(self):
-        self.check_unicode('hello=world', dict(hello='world'))
+        self.check_unicode('world')
     
     @util.only_python3
     def test_post_with_read_callback_returning_unicode_with_nulls(self):
-        self.check_unicode("hello=wor\0ld", dict(hello="wor\0ld"))
+        self.check_unicode("wor\0ld")
     
     @util.only_python3
     def test_post_with_read_callback_returning_unicode_with_multibyte(self):
         try:
-            self.check_unicode("hello=Пушкин", dict(hello="Пушкин"))
+            self.check_unicode("Пушкин")
             # prints:
             # UnicodeEncodeError: 'ascii' codec can't encode characters in position 6-11: ordinal not in range(128)
         except pycurl.error:
@@ -111,12 +113,13 @@ class PostWithReadCallbackTest(unittest.TestCase):
             self.assertEqual(pycurl.E_ABORTED_BY_CALLBACK, err)
             self.assertEqual('operation aborted by callback', msg)
     
-    def check_unicode(self, poststring, expected):
+    def check_unicode(self, poststring):
         assert type(poststring) == str
         d = DataProvider(poststring)
         
-        self.curl.setopt(self.curl.URL, 'http://localhost:8380/postfields')
+        self.curl.setopt(self.curl.URL, 'http://localhost:8380/raw_utf8')
         self.curl.setopt(self.curl.POST, 1)
+        self.curl.setopt(self.curl.HTTPHEADER, ['Content-Type: application/octet-stream'])
         self.curl.setopt(self.curl.POSTFIELDSIZE, len(poststring))
         self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
         #self.curl.setopt(self.curl.VERBOSE, 1)
@@ -124,5 +127,6 @@ class PostWithReadCallbackTest(unittest.TestCase):
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
         
-        actual = json.loads(sio.getvalue().decode())
-        self.assertEqual(expected, actual)
+        # json should be ascii
+        actual = json.loads(sio.getvalue().decode('ascii'))
+        self.assertEqual(poststring, actual)
-- 
1.7.1


From 91c70a9672dc3a1944cf41e6db5d1681aa84f976 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 15 Apr 2013 10:35:31 -0400
Subject: [PATCH 102/236] Python 3 compatibility: PyInt -> PyLong

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    7 +++++++
 1 files changed, 7 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 971c544..32bd537 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -163,6 +163,13 @@ static void pycurl_ssl_cleanup(void);
 #  define PYCURL_END_ALLOW_THREADS
 #endif
 
+#if PY_MAJOR_VERSION >= 3
+  #define PyInt_Type                   PyLong_Type
+  #define PyInt_Check(op)              PyLong_Check(op)
+  #define PyInt_FromLong               PyLong_FromLong
+  #define PyInt_AsLong                 PyLong_AsLong
+#endif
+
 /* Calculate the number of OBJECTPOINT options we need to store */
 #define OPTIONS_SIZE    ((int)CURLOPT_LASTENTRY % 10000)
 #define MOPTIONS_SIZE   ((int)CURLMOPT_LASTENTRY % 10000)
-- 
1.7.1


From a2ecbba4d97ff63b53f7f8e046d666dcfd0699d1 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 17:38:53 -0500
Subject: [PATCH 103/236] Only check for PyInt on python 2

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 32bd537..2847b08 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1595,12 +1595,14 @@ read_callback(char *ptr, size_t size, size_t nmemb, void *stream)
         memcpy(ptr, buf, obj_size);
         ret = obj_size;             /* success */
     }
+#if PY_MAJOR_VERSION < 3
     else if (PyInt_Check(result)) {
         long r = PyInt_AsLong(result);
         if (r != CURL_READFUNC_ABORT && r != CURL_READFUNC_PAUSE)
             goto type_error;
         ret = r; /* either CURL_READFUNC_ABORT or CURL_READFUNC_PAUSE */
     }
+#endif
     else if (PyLong_Check(result)) {
         long r = PyLong_AsLong(result);
         if (r != CURL_READFUNC_ABORT && r != CURL_READFUNC_PAUSE)
-- 
1.7.1


From 41594b581eb2cf04b035a9db49ccee487a2b2a30 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 28 May 2013 16:34:49 -0400
Subject: [PATCH 104/236] Python 3 compatibility: getattro/setattro

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |  112 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 112 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 2847b08..6a2112f 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -3463,6 +3463,117 @@ static PyObject *curlobject_constants = NULL;
 static PyObject *curlmultiobject_constants = NULL;
 static PyObject *curlshareobject_constants = NULL;
 
+
+#if PY_MAJOR_VERSION >= 3
+static PyObject *
+my_getattro(PyObject *co, PyObject *name, PyObject *dict1, PyObject *dict2, PyMethodDef *m)
+{
+    PyObject *v = NULL;
+    if( dict1 != NULL )
+        v = PyDict_GetItem(dict1, name);
+    if( v == NULL && dict2 != NULL )
+        v = PyDict_GetItem(dict2, name);
+    if( v != NULL )
+    {
+        Py_INCREF(v);
+        return v;
+    }
+    PyErr_SetString(PyExc_AttributeError, "trying to obtain a non-existing attribute");
+    return NULL;
+}
+
+static int
+my_setattro(PyObject **dict, PyObject *name, PyObject *v)
+{
+    if( *dict == NULL )
+    {
+        *dict = PyDict_New();
+        if( *dict == NULL )
+            return -1;
+    }
+    return PyDict_SetItem(*dict, name, v);
+}
+
+PyObject *do_curl_getattro(PyObject *o, PyObject *n)
+{
+    PyObject *v = PyObject_GenericGetAttr(o, n);
+    if( !v && PyErr_ExceptionMatches(PyExc_AttributeError) )
+    {
+        PyErr_Clear();
+        v = my_getattro(o, n, ((CurlObject *)o)->dict,
+                        curlobject_constants, curlobject_methods);
+    }
+    return v;
+}
+
+static int
+do_curl_setattro(PyObject *o, PyObject *name, PyObject *v)
+{
+    assert_curl_state((CurlObject *)o);
+    if( v )
+    {
+        return my_setattro(&((CurlObject *)o)->dict, name, v);
+    } else
+    {
+        return PyObject_GenericSetAttr(o, name, 0);
+    }
+}
+
+static PyObject *
+do_multi_getattro(PyObject *o, PyObject *n)
+{
+    assert_multi_state((CurlMultiObject *)o);
+    PyObject *v = PyObject_GenericGetAttr(o, n);
+    if( !v && PyErr_ExceptionMatches(PyExc_AttributeError) )
+    {
+        PyErr_Clear();
+        v = my_getattro(o, n, ((CurlMultiObject *)o)->dict,
+                        curlmultiobject_constants, curlmultiobject_methods);
+    }
+    return v;
+}
+
+static int
+do_multi_setattro(PyObject *o, PyObject *n, PyObject *v)
+{
+    assert_multi_state((CurlMultiObject *)o);
+    if( v )
+    {
+        return my_setattro(&((CurlMultiObject *)o)->dict, n, v);
+    } else
+    {
+        return PyObject_GenericSetAttr(o, n, 0);
+    }
+}
+
+static PyObject *
+do_share_getattro(PyObject *o, PyObject *n)
+{
+    assert_share_state((CurlShareObject *)o);
+    PyObject *v = PyObject_GenericGetAttr(o, n);
+    if( !v && PyErr_ExceptionMatches(PyExc_AttributeError) )
+    {
+        PyErr_Clear();
+        v = my_getattro(o, n, ((CurlShareObject *)o)->dict,
+                        curlshareobject_constants, curlshareobject_methods);
+    }
+    return v;
+}
+
+static int
+do_share_setattro(PyObject *o, PyObject *n, PyObject *v)
+{
+    assert_share_state((CurlShareObject *)o);
+    if( v )
+    {
+        return my_setattro(&((CurlShareObject *)o)->dict, n, v);
+    } else
+    {
+        return PyObject_GenericSetAttr(o, n, 0);
+    }
+}
+
+#else
 static int
 my_setattr(PyObject **dict, char *name, PyObject *v)
 {
@@ -3541,6 +3652,7 @@ do_multi_getattr(CurlMultiObject *co, char *name)
     return my_getattr((PyObject *)co, name, co->dict,
                       curlmultiobject_constants, curlmultiobject_methods);
 }
+#endif
 
 
 /* --------------- actual type definitions --------------- */
-- 
1.7.1


From b8d7a347974796daea8c5bd44f5e349d330c69c8 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 28 May 2013 16:30:56 -0400
Subject: [PATCH 105/236] Python 3 compatibility: type and module changes

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |  163 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 163 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 6a2112f..367dc92 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -3657,6 +3657,48 @@ do_multi_getattr(CurlMultiObject *co, char *name)
 
 /* --------------- actual type definitions --------------- */
 
+#if PY_MAJOR_VERSION >= 3
+static PyTypeObject CurlShare_Type = {
+    PyVarObject_HEAD_INIT(NULL, 0)
+    "pycurl.CurlShare",         /* tp_name */
+    sizeof(CurlShareObject),    /* tp_basicsize */
+    0,                          /* tp_itemsize */
+    (destructor)do_share_dealloc, /* tp_dealloc */
+    0,                          /* tp_print */
+    0,                          /* tp_getattr */
+    0,                          /* tp_setattr */
+    0,                          /* tp_reserved */
+    0,                          /* tp_repr */
+    0,                          /* tp_as_number */
+    0,                          /* tp_as_sequence */
+    0,                          /* tp_as_mapping */
+    0,                          /* tp_hash  */
+    0,                          /* tp_call */
+    0,                          /* tp_str */
+    (getattrofunc)do_share_getattro, /* tp_getattro */
+    (setattrofunc)do_share_setattro, /* tp_setattro */
+    0,                          /* tp_as_buffer */
+    Py_TPFLAGS_HAVE_GC,         /* tp_flags */
+    0,                          /* tp_doc */
+    (traverseproc)do_share_traverse, /* tp_traverse */
+    (inquiry)do_share_clear,    /* tp_clear */
+    0,                          /* tp_richcompare */
+    0,                          /* tp_weaklistoffset */
+    0,                          /* tp_iter */
+    0,                          /* tp_iternext */
+    curlshareobject_methods,    /* tp_methods */
+    0,                          /* tp_members */
+    0,                          /* tp_getset */
+    0,                          /* tp_base */
+    0,                          /* tp_dict */
+    0,                          /* tp_descr_get */
+    0,                          /* tp_descr_set */
+    0,                          /* tp_dictoffset */
+    0,                          /* tp_init */
+    0,                          /* tp_alloc */
+    0,                          /* tp_new */
+};
+#else
 static PyTypeObject CurlShare_Type = {
     PyObject_HEAD_INIT(NULL)
     0,                          /* ob_size */
@@ -3687,7 +3729,50 @@ static PyTypeObject CurlShare_Type = {
      * safely ignore any compiler warnings about missing initializers.
      */
 };
+#endif
 
+#if PY_MAJOR_VERSION >= 3
+static PyTypeObject Curl_Type = {
+    PyVarObject_HEAD_INIT(NULL, 0)
+    "pycurl.Curl",              /* tp_name */
+    sizeof(CurlObject),         /* tp_basicsize */
+    0,                          /* tp_itemsize */
+    (destructor)do_curl_dealloc, /* tp_dealloc */
+    0,                          /* tp_print */
+    0,                          /* tp_getattr */
+    0,                          /* tp_setattr */
+    0,                          /* tp_reserved */
+    0,                          /* tp_repr */
+    0,                          /* tp_as_number */
+    0,                          /* tp_as_sequence */
+    0,                          /* tp_as_mapping */
+    0,                          /* tp_hash  */
+    0,                          /* tp_call */
+    0,                          /* tp_str */
+    (getattrofunc)do_curl_getattro, /* tp_getattro */
+    (setattrofunc)do_curl_setattro, /* tp_setattro */
+    0,                          /* tp_as_buffer */
+    Py_TPFLAGS_HAVE_GC,         /* tp_flags */
+    0,                          /* tp_doc */
+    (traverseproc)do_curl_traverse, /* tp_traverse */
+    (inquiry)do_curl_clear,     /* tp_clear */
+    0,                          /* tp_richcompare */
+    0,                          /* tp_weaklistoffset */
+    0,                          /* tp_iter */
+    0,                          /* tp_iternext */
+    curlobject_methods,         /* tp_methods */
+    0,                          /* tp_members */
+    0,                          /* tp_getset */
+    0,                          /* tp_base */
+    0,                          /* tp_dict */
+    0,                          /* tp_descr_get */
+    0,                          /* tp_descr_set */
+    0,                          /* tp_dictoffset */
+    0,                          /* tp_init */
+    0,                          /* tp_alloc */
+    0,                          /* tp_new */
+};
+#else
 static PyTypeObject Curl_Type = {
     PyObject_HEAD_INIT(NULL)
     0,                          /* ob_size */
@@ -3718,7 +3803,50 @@ static PyTypeObject Curl_Type = {
      * safely ignore any compiler warnings about missing initializers.
      */
 };
+#endif
 
+#if PY_MAJOR_VERSION >= 3
+static PyTypeObject CurlMulti_Type = {
+    PyVarObject_HEAD_INIT(NULL, 0)
+    "pycurl.CurlMulti",         /* tp_name */
+    sizeof(CurlMultiObject),    /* tp_basicsize */
+    0,                          /* tp_itemsize */
+    (destructor)do_multi_dealloc, /* tp_dealloc */
+    0,                          /* tp_print */
+    0, // (getattrfunc)do_curl_getattr,  /* tp_getattr */
+    0, //(setattrfunc)do_curl_setattr,  /* tp_setattr */
+    0,                          /* tp_reserved */
+    0,                          /* tp_repr */
+    0,                          /* tp_as_number */
+    0,                          /* tp_as_sequence */
+    0,                          /* tp_as_mapping */
+    0,                          /* tp_hash  */
+    0,                          /* tp_call */
+    0,                          /* tp_str */
+    (getattrofunc)do_multi_getattro, //0,                         /* tp_getattro */
+    (setattrofunc)do_multi_setattro,                         /* tp_setattro */
+    0,                          /* tp_as_buffer */
+    Py_TPFLAGS_HAVE_GC,         /* tp_flags */
+    0,                          /* tp_doc */
+    (traverseproc)do_multi_traverse, /* tp_traverse */
+    (inquiry)do_multi_clear,    /* tp_clear */
+    0,                          /* tp_richcompare */
+    0,                          /* tp_weaklistoffset */
+    0,                          /* tp_iter */
+    0,                          /* tp_iternext */
+    curlmultiobject_methods,    /* tp_methods */
+    0,                          /* tp_members */
+    0,                          /* tp_getset */
+    0,                          /* tp_base */
+    0,                          /* tp_dict */
+    0,                          /* tp_descr_get */
+    0,                          /* tp_descr_set */
+    0,                          /* tp_dictoffset */
+    0,                          /* tp_init */
+    0,                          /* tp_alloc */
+    0,                          /* tp_new */
+};
+#else
 static PyTypeObject CurlMulti_Type = {
     PyObject_HEAD_INIT(NULL)
     0,                          /* ob_size */
@@ -3749,6 +3877,7 @@ static PyTypeObject CurlMulti_Type = {
      * safely ignore any compiler warnings about missing initializers.
      */
 };
+#endif
 
 static int
 are_global_init_flags_valid(int flags)
@@ -4001,6 +4130,20 @@ insint_m(PyObject *d, char *name, long value)
 }
 
 
+#if PY_MAJOR_VERSION >= 3
+static PyModuleDef curlmodule = {
+    PyModuleDef_HEAD_INIT,
+    "pycurl",
+    module_doc,
+    -1,
+    curl_methods, NULL, NULL, NULL, NULL
+};
+#endif
+
+
+#if PY_MAJOR_VERSION >= 3
+PyMODINIT_FUNC PyInit_pycurl(void)
+#else
 /* Initialization function for the module */
 #if defined(PyMODINIT_FUNC)
 PyMODINIT_FUNC
@@ -4011,6 +4154,7 @@ extern "C"
 DL_EXPORT(void)
 #endif
 initpycurl(void)
+#endif
 {
     PyObject *m, *d;
     const curl_version_info_data *vi;
@@ -4025,8 +4169,24 @@ initpycurl(void)
     Py_TYPE(&CurlShare_Type) = &PyType_Type;
 
     /* Create the module and add the functions */
+#if PY_MAJOR_VERSION >= 3
+    if (PyType_Ready(&Curl_Type) < 0)
+        return NULL;
+
+    if (PyType_Ready(&CurlMulti_Type) < 0)
+        return NULL;
+
+
+    m = PyModule_Create(&curlmodule);
+    if (m == NULL)
+        return NULL;
+
+    Py_INCREF(&Curl_Type);
+#else
+
     m = Py_InitModule3("pycurl", curl_methods, module_doc);
     assert(m != NULL && PyModule_Check(m));
+#endif
 
     /* Add error object to the module */
     d = PyModule_GetDict(m);
@@ -4536,6 +4696,9 @@ initpycurl(void)
     PyEval_InitThreads();
 #endif
 
+#if PY_MAJOR_VERSION >= 3
+    return m;
+#endif
 }
 
 #if defined(WIN32) && ((_WIN32_WINNT < 0x0600) || (NTDDI_VERSION < NTDDI_VISTA))
-- 
1.7.1


From 7b07a1e743a4c380ab3ee1162b12f2e61e07622f Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 17:20:24 -0500
Subject: [PATCH 106/236] Do not call PyObject_GenericSetAttr.

For whatever reason doing that results in "del curl.attr" complaining that
attr does not exist. If instead I call PyDict_DelItem, everything seems
to be peachy.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   29 +++++++----------------------
 1 files changed, 7 insertions(+), 22 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 367dc92..4c052d2 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -3491,7 +3491,10 @@ my_setattro(PyObject **dict, PyObject *name, PyObject *v)
         if( *dict == NULL )
             return -1;
     }
-    return PyDict_SetItem(*dict, name, v);
+    if (v != NULL)
+        return PyDict_SetItem(*dict, name, v);
+    else
+        return PyDict_DelItem(*dict, name);
 }
 
 PyObject *do_curl_getattro(PyObject *o, PyObject *n)
@@ -3510,13 +3513,7 @@ static int
 do_curl_setattro(PyObject *o, PyObject *name, PyObject *v)
 {
     assert_curl_state((CurlObject *)o);
-    if( v )
-    {
-        return my_setattro(&((CurlObject *)o)->dict, name, v);
-    } else
-    {
-        return PyObject_GenericSetAttr(o, name, 0);
-    }
+    return my_setattro(&((CurlObject *)o)->dict, name, v);
 }
 
 static PyObject *
@@ -3537,13 +3534,7 @@ static int
 do_multi_setattro(PyObject *o, PyObject *n, PyObject *v)
 {
     assert_multi_state((CurlMultiObject *)o);
-    if( v )
-    {
-        return my_setattro(&((CurlMultiObject *)o)->dict, n, v);
-    } else
-    {
-        return PyObject_GenericSetAttr(o, n, 0);
-    }
+    return my_setattro(&((CurlMultiObject *)o)->dict, n, v);
 }
 
 static PyObject *
@@ -3564,13 +3555,7 @@ static int
 do_share_setattro(PyObject *o, PyObject *n, PyObject *v)
 {
     assert_share_state((CurlShareObject *)o);
-    if( v )
-    {
-        return my_setattro(&((CurlShareObject *)o)->dict, n, v);
-    } else
-    {
-        return PyObject_GenericSetAttr(o, n, 0);
-    }
+    return my_setattro(&((CurlShareObject *)o)->dict, n, v);
 }
 
 #else
-- 
1.7.1


From 2cbef254e5852bb787ab04d9927e2df103b6dd34 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 17:47:32 -0500
Subject: [PATCH 107/236] Need to convert KeyError to AttributeError

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   12 ++++++++++--
 1 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 4c052d2..2c08abd 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -3493,8 +3493,16 @@ my_setattro(PyObject **dict, PyObject *name, PyObject *v)
     }
     if (v != NULL)
         return PyDict_SetItem(*dict, name, v);
-    else
-        return PyDict_DelItem(*dict, name);
+    else {
+        int v = PyDict_DelItem(*dict, name);
+        if (v != 0) {
+            /* need to convert KeyError to AttributeError */
+            if (PyErr_ExceptionMatches(PyExc_KeyError)) {
+                PyErr_SetString(PyExc_AttributeError, "trying to delete a non-existing attribute");
+            }
+        }
+        return v;
+    }
 }
 
 PyObject *do_curl_getattro(PyObject *o, PyObject *n)
-- 
1.7.1


From 352926c9090bace46452cb770f49e77dfeacfb1c Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 4 Nov 2013 19:06:14 -0500
Subject: [PATCH 108/236] Limit file code path to python 2.

On python 3 the files are no longer C FILE pointers, so this code does not work.

However, it continues to work fine on python 2.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 2c08abd..9baf611 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -2078,6 +2078,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
 #undef IS_LONG_OPTION
 #undef IS_OFF_T_OPTION
 
+#if PY_MAJOR_VERSION < 3
     /* Handle the case of file objects */
     if (PyFile_Check(obj)) {
         FILE *fp;
@@ -2129,6 +2130,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
         /* Return success */
         Py_RETURN_NONE;
     }
+#endif
 
     /* Handle the case of list objects */
     if (PyList_Check(obj)) {
-- 
1.7.1


From 3377516b39b4dae471bfcf723d94010b2b6a9e08 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 22:42:21 -0500
Subject: [PATCH 109/236] Implement writing to files under python 3

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   57 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 57 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 9baf611..3e35ef9 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -2524,6 +2524,63 @@ do_curl_setopt(CurlObject *self, PyObject *args)
         Py_RETURN_NONE;
     }
 
+    /*
+    Handle the case of file-like objects for Python 3.
+    
+    Given an object with a write method, we will call the write method
+    from the appropriate callback.
+    
+    Files in Python 3 are no longer FILE * instances and therefore cannot
+    be directly given to curl.
+    
+    For consistency, ability to use any file-like object is also available
+    on Python 2.
+    */
+    if (option == CURLOPT_READDATA ||
+        option == CURLOPT_WRITEDATA ||
+        option == CURLOPT_WRITEHEADER)
+    {
+        PyObject *write_method = PyObject_GetAttrString(obj, "write");
+        if (write_method) {
+            PyObject *arglist;
+            PyObject *rv;
+            
+            switch (option) {
+                case CURLOPT_READDATA:
+                    option = CURLOPT_READFUNCTION;
+                    break;
+                case CURLOPT_WRITEDATA:
+                    option = CURLOPT_WRITEFUNCTION;
+                    break;
+                case CURLOPT_WRITEHEADER:
+                    if (self->w_cb != NULL) {
+                        PyErr_SetString(ErrorObject, "cannot combine WRITEHEADER with WRITEFUNCTION.");
+                        Py_DECREF(write_method);
+                        return NULL;
+                    }
+                    option = CURLOPT_HEADERFUNCTION;
+                    break;
+                default:
+                    PyErr_SetString(PyExc_TypeError, "objects are not supported for this option");
+                    Py_DECREF(write_method);
+                    return NULL;
+            }
+            
+            arglist = Py_BuildValue("(iO)", option, write_method);
+            /* reference is now in arglist */
+            Py_DECREF(write_method);
+            if (arglist == NULL) {
+                return NULL;
+            }
+            rv = do_curl_setopt(self, arglist);
+            Py_DECREF(arglist);
+            return rv;
+        } else {
+            PyErr_SetString(ErrorObject, "object given without a write method");
+            return NULL;
+        }
+    }
+
     /* Failed to match any of the function signatures -- return error */
 error:
     PyErr_SetString(PyExc_TypeError, "invalid arguments to setopt");
-- 
1.7.1


From a5a16ad7abda5b57e99314e3a69988d9ae123b06 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 17:41:25 -0500
Subject: [PATCH 110/236] Test treating a file-like object as a file, on all pythons

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/write_to_file_test.py |   14 ++++++++++++++
 1 files changed, 14 insertions(+), 0 deletions(-)

diff --git a/tests/write_to_file_test.py b/tests/write_to_file_test.py
index b89b875..5612557 100644
--- a/tests/write_to_file_test.py
+++ b/tests/write_to_file_test.py
@@ -13,6 +13,13 @@ from . import util
 
 setup_module, teardown_module = appmanager.setup(('app', 8380))
 
+class Acceptor(object):
+    def __init__(self):
+        self.buffer = ''
+    
+    def write(self, chunk):
+        self.buffer += chunk.decode()
+
 class WriteToFileTest(unittest.TestCase):
     def setUp(self):
         self.curl = pycurl.Curl()
@@ -78,3 +85,10 @@ class WriteToFileTest(unittest.TestCase):
         finally:
             shutil.rmtree(dir)
         self.assertEqual('success', body.decode())
+    
+    def test_write_to_file_like(self):
+        self.curl.setopt(pycurl.URL, 'http://localhost:8380/success')
+        acceptor = Acceptor()
+        self.curl.setopt(pycurl.WRITEDATA, acceptor)
+        self.curl.perform()
+        self.assertEqual('success', acceptor.buffer)
-- 
1.7.1


From ec4930d2f8d8d184a954c337b94f801beed320c1 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 13 Dec 2013 14:39:07 -0500
Subject: [PATCH 111/236] Define python 2/3 compatibility defines for DRY code

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   17 +++++++++++++++++
 1 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 3e35ef9..ea01631 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -295,6 +295,23 @@ typedef struct {
 
 
 /*************************************************************************
+// python 2/3 compatibility
+**************************************************************************/
+
+#if PY_MAJOR_VERSION >= 3
+# define PyText_FromFormat(format, str) PyUnicode_FromFormat((format), (str))
+# define PyText_FromString(str) PyUnicode_FromString(str)
+# define PyText_AsStringAndSize(obj, buffer, length) PyUnicode_AsStringAndSize((obj), (buffer), (length))
+# define PyByteStr_AsStringAndSize(obj, buffer, length) PyBytes_AsStringAndSize((obj), (buffer), (length))
+#else
+# define PyText_FromFormat(format, str) PyString_FromFormat((format), (str))
+# define PyText_FromString(str) PyString_FromString(str)
+# define PyText_AsStringAndSize(obj, buffer, length) PyString_AsStringAndSize((obj), (buffer), (length))
+# define PyByteStr_AsStringAndSize(obj, buffer, length) PyString_AsStringAndSize((obj), (buffer), (length))
+#endif
+
+
+/*************************************************************************
 // python utility functions
 **************************************************************************/
 
-- 
1.7.1


From dae6c59060d356ada03d74d2424f22e402c79c2c Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 28 May 2013 16:36:01 -0400
Subject: [PATCH 112/236] Python 3 support: Unicode in strings

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   60 ++++++++++++++++++++++++++++++++++++++++++---------------
 1 files changed, 44 insertions(+), 16 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index ea01631..604e766 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -349,7 +349,7 @@ static PyObject *convert_slist(struct curl_slist *slist, int free_flags)
         if (slist->data == NULL) {
             v = Py_None; Py_INCREF(v);
         } else {
-            v = PyString_FromString(slist->data);
+            v = PyText_FromString(slist->data);
         }
         if (v == NULL || PyList_Append(ret, v) != 0) {
             Py_XDECREF(v);
@@ -415,8 +415,9 @@ static PyObject *convert_certinfo(struct curl_certinfo *cinfo)
             } else {
                 const char *sep = strchr(field, ':');
                 if (!sep) {
-                    field_tuple = PyString_FromString(field);
+                    field_tuple = PyText_FromString(field);
                 } else {
+                    /* XXX check */
                     field_tuple = Py_BuildValue("s#s", field, (int)(sep - field), sep+1);
                 }
                 if (!field_tuple)
@@ -1225,7 +1226,8 @@ do_curl_errstr(CurlObject *self)
         return NULL;
     }
     self->error[sizeof(self->error) - 1] = 0;
-    return PyString_FromString(self->error);
+
+    return PyText_FromString(self->error);
 }
 
 
@@ -1600,11 +1602,15 @@ read_callback(char *ptr, size_t size, size_t nmemb, void *stream)
         goto verbose_error;
 
     /* handle result */
+#if PY_MAJOR_VERSION >= 3
+    if (PyBytes_Check(result)) {
+#else
     if (PyString_Check(result)) {
+#endif
         char *buf = NULL;
         Py_ssize_t obj_size = -1;
         Py_ssize_t r;
-        r = PyString_AsStringAndSize(result, &buf, &obj_size);
+        r = PyByteStr_AsStringAndSize(result, &buf, &obj_size);
         if (r != 0 || obj_size < 0 || obj_size > total_size) {
             PyErr_Format(ErrorObject, "invalid return value for read callback %ld %ld", (long)obj_size, (long)total_size);
             goto verbose_error;
@@ -1961,7 +1967,12 @@ do_curl_setopt(CurlObject *self, PyObject *args)
     }
 
     /* Handle the case of string arguments */
+
+#if PY_MAJOR_VERSION >= 3
+    if (PyUnicode_Check(obj)) {
+#else
     if (PyString_Check(obj)) {
+#endif
         char *str = NULL;
         Py_ssize_t len = -1;
 
@@ -2014,12 +2025,12 @@ do_curl_setopt(CurlObject *self, PyObject *args)
         case CURLOPT_DNS_SERVERS:
 #endif
 /* FIXME: check if more of these options allow binary data */
-            str = PyString_AsString_NoNUL(obj);
+            str = PyText_AsString_NoNUL(obj);
             if (str == NULL)
                 return NULL;
             break;
         case CURLOPT_POSTFIELDS:
-            if (PyString_AsStringAndSize(obj, &str, &len) != 0)
+            if (PyText_AsStringAndSize(obj, &str, &len) != 0)
                 return NULL;
             /* automatically set POSTFIELDSIZE */
             if (len <= INT_MAX) {
@@ -2213,15 +2224,20 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                     PyErr_SetString(PyExc_TypeError, "tuple must contain two elements (name, value)");
                     return NULL;
                 }
-                if (PyString_AsStringAndSize(PyTuple_GET_ITEM(listitem, 0), &nstr, &nlen) != 0) {
+                if (PyText_AsStringAndSize(PyTuple_GET_ITEM(listitem, 0), &nstr, &nlen) != 0) {
                     curl_formfree(post);
                     Py_XDECREF(ref_params);
                     PyErr_SetString(PyExc_TypeError, "tuple must contain string as first element");
                     return NULL;
                 }
+#if PY_MAJOR_VERSION >= 3
+                if (PyUnicode_Check(PyTuple_GET_ITEM(listitem, 1))) {
+#else
                 if (PyString_Check(PyTuple_GET_ITEM(listitem, 1))) {
+#endif
                     /* Handle strings as second argument for backwards compatibility */
-                    PyString_AsStringAndSize(PyTuple_GET_ITEM(listitem, 1), &cstr, &clen);
+
+                    PyText_AsStringAndSize(PyTuple_GET_ITEM(listitem, 1), &cstr, &clen);
                     /* INFO: curl_formadd() internally does memdup() the data, so
                      * embedded NUL characters _are_ allowed here. */
                     res = curl_formadd(&post, &last,
@@ -2280,7 +2296,11 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                             Py_XDECREF(ref_params);
                             return NULL;
                         }
+#if PY_MAJOR_VERSION >= 3
+                        if (!PyUnicode_Check(PyTuple_GET_ITEM(t, j+1))) {
+#else
                         if (!PyString_Check(PyTuple_GET_ITEM(t, j+1))) {
+#endif
                             PyErr_SetString(PyExc_TypeError, "value must be string");
                             PyMem_Free(forms);
                             curl_formfree(post);
@@ -2302,7 +2322,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                             Py_XDECREF(ref_params);
                             return NULL;
                         }
-                        PyString_AsStringAndSize(PyTuple_GET_ITEM(t, j+1), &ostr, &olen);
+                        PyText_AsStringAndSize(PyTuple_GET_ITEM(t, j+1), &ostr, &olen);
                         forms[k].option = val;
                         forms[k].value = ostr;
                         ++k;
@@ -2386,14 +2406,18 @@ do_curl_setopt(CurlObject *self, PyObject *args)
             struct curl_slist *nlist;
             char *str;
 
+#if PY_MAJOR_VERSION >= 3
+            if (!PyUnicode_Check(listitem)) {
+#else
             if (!PyString_Check(listitem)) {
+#endif
                 curl_slist_free_all(slist);
                 PyErr_SetString(PyExc_TypeError, "list items must be string objects");
                 return NULL;
             }
             /* INFO: curl_slist_append() internally does strdup() the data, so
              * no embedded NUL characters allowed here. */
-            str = PyString_AsString_NoNUL(listitem);
+            str = PyText_AsString_NoNUL(listitem);
             if (str == NULL) {
                 curl_slist_free_all(slist);
                 return NULL;
@@ -2657,9 +2681,11 @@ do_curl_getinfo(CurlObject *self, PyObject *args)
                 CURLERROR_RETVAL();
             }
             /* If the resulting string is NULL, return None */
-            if (s_res == NULL)
+            if (s_res == NULL) {
                 Py_RETURN_NONE;
-            return PyString_FromString(s_res);
+            }
+            return PyText_FromString(s_res);
+
         }
 
     case CURLINFO_CONNECT_TIME:
@@ -4008,7 +4034,7 @@ static PyObject *vi_str(const char *s)
         Py_RETURN_NONE;
     while (*s == ' ' || *s == '\t')
         s++;
-    return PyString_FromString(s);
+    return PyText_FromString(s);
 }
 
 static PyObject *
@@ -4139,7 +4165,9 @@ insobj2(PyObject *dict1, PyObject *dict2, char *name, PyObject *value)
         goto error;
     if (value == NULL)
         goto error;
-    key = PyString_FromString(name);
+
+    key = PyText_FromString(name);
+
     if (key == NULL)
         goto error;
 #if 0
@@ -4166,7 +4194,7 @@ error:
 static void
 insstr(PyObject *d, char *name, char *value)
 {
-    PyObject *v = PyString_FromString(value);
+    PyObject *v = PyText_FromString(value);
     insobj2(d, NULL, name, v);
 }
 
@@ -4269,7 +4297,7 @@ initpycurl(void)
 
     /* Add version strings to the module */
     insobj2(d, NULL, "version",
-            PyString_FromFormat("PycURL/" PYCURL_VERSION " %s", curl_version()));
+            PyText_FromFormat("PycURL/" PYCURL_VERSION " %s", curl_version()));
     insstr(d, "COMPILE_DATE", __DATE__ " " __TIME__);
     insint(d, "COMPILE_PY_VERSION_HEX", PY_VERSION_HEX);
     insint(d, "COMPILE_LIBCURL_VERSION_NUM", LIBCURL_VERSION_NUM);
-- 
1.7.1


From 247b0c3f32444e43b0a97c1723d64dc329b9e15c Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 28 May 2013 16:36:01 -0400
Subject: [PATCH 113/236] Naive implementation of Unicode to C string conversion that leaks memory

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   15 +++++++++++++++
 1 files changed, 15 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 604e766..7f4655b 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -315,6 +315,21 @@ typedef struct {
 // python utility functions
 **************************************************************************/
 
+int PyUnicode_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length)
+{
+    if (PyBytes_Check(obj)) {
+        return PyBytes_AsStringAndSize(obj, buffer, length);
+    } else {
+        PyObject *encoded_obj = PyUnicode_AsEncodedString(obj, "utf8", "strict");
+        if (encoded_obj == NULL) {
+            return -1;
+        }
+        /* XXX leaking encoded_obj */
+        return PyBytes_AsStringAndSize(encoded_obj, buffer, length);
+    }
+}
+
+
 /* Like PyString_AsString(), but set an exception if the string contains
  * embedded NULs. Actually PyString_AsStringAndSize() already does that for
  * us if the `len' parameter is NULL - see Objects/stringobject.c.
-- 
1.7.1


From 7cf3eeac99b9bcf4f1a94c244e335d98f15e436b Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 20:26:50 -0500
Subject: [PATCH 114/236] An implementation of Unicode to C string conversion that does not leak memory.

This however requires it to take an additional argument for the
encoded string, that the caller is responsible for freeing.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   16 +++++++++++-----
 1 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 7f4655b..0c3f0d3 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -315,17 +315,23 @@ typedef struct {
 // python utility functions
 **************************************************************************/
 
-int PyUnicode_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length)
+int PyUnicode_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length, PyObject **encoded_obj)
 {
     if (PyBytes_Check(obj)) {
+        *encoded_obj = NULL;
         return PyBytes_AsStringAndSize(obj, buffer, length);
     } else {
-        PyObject *encoded_obj = PyUnicode_AsEncodedString(obj, "utf8", "strict");
-        if (encoded_obj == NULL) {
+        int rv;
+        *encoded_obj = PyUnicode_AsEncodedString(obj, "utf8", "strict");
+        if (*encoded_obj == NULL) {
             return -1;
         }
-        /* XXX leaking encoded_obj */
-        return PyBytes_AsStringAndSize(encoded_obj, buffer, length);
+        rv = PyBytes_AsStringAndSize(*encoded_obj, buffer, length);
+        if (rv != 0) {
+            /* If we free the object, pointer must be reset to NULL */
+            Py_CLEAR(*encoded_obj);
+        }
+        return rv;
     }
 }
 
-- 
1.7.1


From c28ec5f915f1e9e1e06338eb000084f04c61e181 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 13 Dec 2013 14:33:40 -0500
Subject: [PATCH 115/236] Unicode version of PyString_AsString_NoNUL.

This one also gives the caller an encoded bytes object to dispose of.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   13 +++++++++++++
 1 files changed, 13 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 0c3f0d3..89579a1 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -341,6 +341,18 @@ int PyUnicode_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length,
  * us if the `len' parameter is NULL - see Objects/stringobject.c.
  */
 
+#if PY_MAJOR_VERSION >= 3
+static char *PyUnicode_AsString_NoNUL(PyObject *obj, PyObject **encoded_obj)
+{
+    char *s = NULL;
+    Py_ssize_t r;
+    r = PyUnicode_AsStringAndSize(obj, &s, NULL, encoded_obj);
+    if (r != 0)
+        return NULL;    /* exception already set */
+    assert(s != NULL);
+    return s;
+}
+#else
 static char *PyString_AsString_NoNUL(PyObject *obj)
 {
     char *s = NULL;
@@ -351,6 +363,7 @@ static char *PyString_AsString_NoNUL(PyObject *obj)
     assert(s != NULL);
     return s;
 }
+#endif
 
 
 /* Convert a curl slist (a list of strings) to a Python list.
-- 
1.7.1


From f63cbe74411d1a0f0cf1d3c71ac61ab82826f849 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 01:57:03 -0500
Subject: [PATCH 116/236] Macros for dealing with encoded string objects

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   11 +++++++++--
 1 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 89579a1..a464f6d 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -301,12 +301,19 @@ typedef struct {
 #if PY_MAJOR_VERSION >= 3
 # define PyText_FromFormat(format, str) PyUnicode_FromFormat((format), (str))
 # define PyText_FromString(str) PyUnicode_FromString(str)
-# define PyText_AsStringAndSize(obj, buffer, length) PyUnicode_AsStringAndSize((obj), (buffer), (length))
+# define PyText_AsStringAndSize(obj, buffer, length, encoded_obj) PyUnicode_AsStringAndSize((obj), (buffer), (length), &(encoded_obj))
+# define PyText_AsString_NoNUL(obj, encoded_obj) PyUnicode_AsString_NoNUL((obj), &(encoded_obj))
+# define PyText_EncodedDecref(encoded) Py_XDECREF(encoded)
 # define PyByteStr_AsStringAndSize(obj, buffer, length) PyBytes_AsStringAndSize((obj), (buffer), (length))
 #else
 # define PyText_FromFormat(format, str) PyString_FromFormat((format), (str))
 # define PyText_FromString(str) PyString_FromString(str)
-# define PyText_AsStringAndSize(obj, buffer, length) PyString_AsStringAndSize((obj), (buffer), (length))
+/* encoded_obj is not used in python 2 and is uninitialized,
+ * use the free macro to avoid calling Py_DECREF on it.
+ */
+# define PyText_AsStringAndSize(obj, buffer, length, encoded_obj) PyString_AsStringAndSize((obj), (buffer), (length))
+# define PyText_AsString_NoNUL(obj, encoded_obj) PyString_AsString_NoNUL(obj)
+# define PyText_EncodedDecref(encoded) ((void) 0)
 # define PyByteStr_AsStringAndSize(obj, buffer, length) PyString_AsStringAndSize((obj), (buffer), (length))
 #endif
 
-- 
1.7.1


From 9a454fcfefd95d1f6e1ae617fa0cc1f2e8730488 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 01:57:03 -0500
Subject: [PATCH 117/236] Memory management for Unicode to C string conversions

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   53 +++++++++++++++++++++++++++++++++++++++++++++--------
 1 files changed, 45 insertions(+), 8 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index a464f6d..a187355 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1988,6 +1988,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
     int option;
     PyObject *obj;
     int res;
+    PyObject *encoded_obj;
 
     if (!PyArg_ParseTuple(args, "iO:setopt", &option, &obj))
         return NULL;
@@ -2066,12 +2067,12 @@ do_curl_setopt(CurlObject *self, PyObject *args)
         case CURLOPT_DNS_SERVERS:
 #endif
 /* FIXME: check if more of these options allow binary data */
-            str = PyText_AsString_NoNUL(obj);
+            str = PyText_AsString_NoNUL(obj, encoded_obj);
             if (str == NULL)
                 return NULL;
             break;
         case CURLOPT_POSTFIELDS:
-            if (PyText_AsStringAndSize(obj, &str, &len) != 0)
+            if (PyText_AsStringAndSize(obj, &str, &len, encoded_obj) != 0)
                 return NULL;
             /* automatically set POSTFIELDSIZE */
             if (len <= INT_MAX) {
@@ -2092,13 +2093,32 @@ do_curl_setopt(CurlObject *self, PyObject *args)
         res = curl_easy_setopt(self->handle, (CURLoption)option, str);
         /* Check for errors */
         if (res != CURLE_OK) {
+            PyText_EncodedDecref(encoded_obj);
             CURLERROR_RETVAL();
         }
         /* libcurl does not copy the value of CURLOPT_POSTFIELDS */
         if (option == CURLOPT_POSTFIELDS) {
-            Py_INCREF(obj);
+            PyObject *store_obj;
+#if PY_MAJOR_VERSION >= 3
+            /* if obj was bytes, it was not encoded, and we need to incref obj.
+             * if obj was unicode, it was encoded, and we need to incref
+             * encoded_obj - except we can simply transfer ownership.
+             */
+            if (encoded_obj) {
+                store_obj = encoded_obj;
+            } else {
+                store_obj = obj;
+                Py_INCREF(store_obj);
+            }
+#else
+            /* no encoding is performed, incref the original object. */
+            store_obj = obj;
+            Py_INCREF(store_obj);
+#endif
             util_curl_xdecref(self, PYCURL_MEMGROUP_POSTFIELDS, self->handle);
-            self->postfields_obj = obj;
+            self->postfields_obj = store_obj;
+        } else {
+            PyText_EncodedDecref(encoded_obj);
         }
         Py_RETURN_NONE;
     }
@@ -2247,6 +2267,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
             /* List of all references that have been INCed as a result of
              * this operation */
             PyObject *ref_params = NULL;
+            PyObject *nencoded_obj, *cencoded_obj, *oencoded_obj;
 
             for (i = 0; i < len; i++) {
                 char *nstr = NULL, *cstr = NULL;
@@ -2265,7 +2286,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                     PyErr_SetString(PyExc_TypeError, "tuple must contain two elements (name, value)");
                     return NULL;
                 }
-                if (PyText_AsStringAndSize(PyTuple_GET_ITEM(listitem, 0), &nstr, &nlen) != 0) {
+                if (PyText_AsStringAndSize(PyTuple_GET_ITEM(listitem, 0), &nstr, &nlen, nencoded_obj) != 0) {
                     curl_formfree(post);
                     Py_XDECREF(ref_params);
                     PyErr_SetString(PyExc_TypeError, "tuple must contain string as first element");
@@ -2278,7 +2299,11 @@ do_curl_setopt(CurlObject *self, PyObject *args)
 #endif
                     /* Handle strings as second argument for backwards compatibility */
 
-                    PyText_AsStringAndSize(PyTuple_GET_ITEM(listitem, 1), &cstr, &clen);
+                    if (PyText_AsStringAndSize(PyTuple_GET_ITEM(listitem, 1), &cstr, &clen, cencoded_obj)) {
+                        curl_formfree(post);
+                        Py_XDECREF(ref_params);
+                        CURLERROR_RETVAL();
+                    }
                     /* INFO: curl_formadd() internally does memdup() the data, so
                      * embedded NUL characters _are_ allowed here. */
                     res = curl_formadd(&post, &last,
@@ -2287,6 +2312,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                                        CURLFORM_COPYCONTENTS, cstr,
                                        CURLFORM_CONTENTSLENGTH, (long) clen,
                                        CURLFORM_END);
+                    PyText_EncodedDecref(cencoded_obj);
                     if (res != CURLE_OK) {
                         curl_formfree(post);
                         Py_XDECREF(ref_params);
@@ -2363,7 +2389,13 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                             Py_XDECREF(ref_params);
                             return NULL;
                         }
-                        PyText_AsStringAndSize(PyTuple_GET_ITEM(t, j+1), &ostr, &olen);
+                        if (PyText_AsStringAndSize(PyTuple_GET_ITEM(t, j+1), &ostr, &olen, oencoded_obj)) {
+                            /* exception should be already set */
+                            PyMem_Free(forms);
+                            curl_formfree(post);
+                            Py_XDECREF(ref_params);
+                            return NULL;
+                        }
                         forms[k].option = val;
                         forms[k].value = ostr;
                         ++k;
@@ -2378,6 +2410,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
 
                             ref_params = PyList_New((Py_ssize_t)0);
                             if (ref_params == NULL) {
+                                PyText_EncodedDecref(oencoded_obj);
                                 PyMem_Free(forms);
                                 curl_formfree(post);
                                 return NULL;
@@ -2385,6 +2418,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                             
                             /* Ensure that the buffer remains alive until curl_easy_cleanup() */
                             if (PyList_Append(ref_params, obj) != 0) {
+                                PyText_EncodedDecref(oencoded_obj);
                                 PyMem_Free(forms);
                                 curl_formfree(post);
                                 Py_DECREF(ref_params);
@@ -2403,6 +2437,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                                        CURLFORM_NAMELENGTH, (long) nlen,
                                        CURLFORM_ARRAY, forms,
                                        CURLFORM_END);
+                    PyText_EncodedDecref(oencoded_obj);
                     PyMem_Free(forms);
                     if (res != CURLE_OK) {
                         curl_formfree(post);
@@ -2446,6 +2481,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
             PyObject *listitem = PyList_GetItem(obj, i);
             struct curl_slist *nlist;
             char *str;
+            PyObject *sencoded_obj;
 
 #if PY_MAJOR_VERSION >= 3
             if (!PyUnicode_Check(listitem)) {
@@ -2458,12 +2494,13 @@ do_curl_setopt(CurlObject *self, PyObject *args)
             }
             /* INFO: curl_slist_append() internally does strdup() the data, so
              * no embedded NUL characters allowed here. */
-            str = PyText_AsString_NoNUL(listitem);
+            str = PyText_AsString_NoNUL(listitem, sencoded_obj);
             if (str == NULL) {
                 curl_slist_free_all(slist);
                 return NULL;
             }
             nlist = curl_slist_append(slist, str);
+            PyText_EncodedDecref(sencoded_obj);
             if (nlist == NULL || nlist->data == NULL) {
                 curl_slist_free_all(slist);
                 return PyErr_NoMemory();
-- 
1.7.1


From 628289e4a160ffc90f881f936230d2323101657f Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 17:47:54 -0500
Subject: [PATCH 118/236] Handle bytes and unicode in read callback

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   20 ++++++++++++++++++++
 1 files changed, 20 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index a187355..b0f6be1 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1659,6 +1659,26 @@ read_callback(char *ptr, size_t size, size_t nmemb, void *stream)
         memcpy(ptr, buf, obj_size);
         ret = obj_size;             /* success */
     }
+#if PY_MAJOR_VERSION >= 3
+    else if (PyUnicode_Check(result)) {
+        char *buf = NULL;
+        Py_ssize_t obj_size = -1;
+        Py_ssize_t r;
+        PyObject *encoded = PyUnicode_AsEncodedString(result, "utf8", "strict");
+        if (encoded == NULL) {
+            goto verbose_error;
+        }
+        r = PyBytes_AsStringAndSize(encoded, &buf, &obj_size);
+        if (r != 0 || obj_size < 0 || obj_size > total_size) {
+            Py_DECREF(encoded);
+            PyErr_Format(ErrorObject, "invalid return value for read callback %ld %ld", (long)obj_size, (long)total_size);
+            goto verbose_error;
+        }
+        memcpy(ptr, buf, obj_size);
+        Py_DECREF(encoded);
+        ret = obj_size;             /* success */
+    }
+#endif
 #if PY_MAJOR_VERSION < 3
     else if (PyInt_Check(result)) {
         long r = PyInt_AsLong(result);
-- 
1.7.1


From 6feaba3c28ff905da8c612fa2364e4812a70503b Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 18:42:22 -0500
Subject: [PATCH 119/236] Encoding multibyte data is not going to work well, only allow ascii

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   20 +++++++++++++++++++-
 1 files changed, 19 insertions(+), 1 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index b0f6be1..78b0a05 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1664,7 +1664,25 @@ read_callback(char *ptr, size_t size, size_t nmemb, void *stream)
         char *buf = NULL;
         Py_ssize_t obj_size = -1;
         Py_ssize_t r;
-        PyObject *encoded = PyUnicode_AsEncodedString(result, "utf8", "strict");
+        /*
+        Encode with ascii codec.
+        
+        HTTP requires sending content-length for request body to the server
+        before the request body is sent, therefore typically content length
+        is given via POSTFIELDSIZE before read function is invoked to
+        provide the data.
+        
+        However, if we encode the string using any encoding other than ascii,
+        the length of encoded string may not match the length of unicode
+        string we are encoding. Therefore, if client code does a simple
+        len(source_string) to determine the value to supply in content-length,
+        the length of bytes read may be different.
+        
+        To avoid this situation, we only accept ascii bytes in the string here.
+        
+        Encode data yourself to bytes when dealing with non-ascii data.
+        */
+        PyObject *encoded = PyUnicode_AsEncodedString(result, "ascii", "strict");
         if (encoded == NULL) {
             goto verbose_error;
         }
-- 
1.7.1


From 0d35516f6366342ef9b94bbb5237b8bc08189040 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 18:11:04 -0500
Subject: [PATCH 120/236] Make exception message more descriptive

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 78b0a05..623e488 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1653,7 +1653,7 @@ read_callback(char *ptr, size_t size, size_t nmemb, void *stream)
         Py_ssize_t r;
         r = PyByteStr_AsStringAndSize(result, &buf, &obj_size);
         if (r != 0 || obj_size < 0 || obj_size > total_size) {
-            PyErr_Format(ErrorObject, "invalid return value for read callback %ld %ld", (long)obj_size, (long)total_size);
+            PyErr_Format(ErrorObject, "invalid return value for read callback (%ld bytes returned when at most %ld bytes were wanted)", (long)obj_size, (long)total_size);
             goto verbose_error;
         }
         memcpy(ptr, buf, obj_size);
@@ -1689,7 +1689,7 @@ read_callback(char *ptr, size_t size, size_t nmemb, void *stream)
         r = PyBytes_AsStringAndSize(encoded, &buf, &obj_size);
         if (r != 0 || obj_size < 0 || obj_size > total_size) {
             Py_DECREF(encoded);
-            PyErr_Format(ErrorObject, "invalid return value for read callback %ld %ld", (long)obj_size, (long)total_size);
+            PyErr_Format(ErrorObject, "invalid return value for read callback (%ld bytes returned after encoding to utf-8 when at most %ld bytes were wanted)", (long)obj_size, (long)total_size);
             goto verbose_error;
         }
         memcpy(ptr, buf, obj_size);
-- 
1.7.1


From df6b1532062a3a04dc994f4f6a52a45aa909cca8 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 19:41:09 -0500
Subject: [PATCH 121/236] Send bytes to write callback under python 3.

This is the only way to pass non-ascii response bodies to
write callbacks without mangling/destroying them, because
encoding is given in headers which are entirely separate
from the body.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    4 ++++
 1 files changed, 4 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 623e488..0293666 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1374,7 +1374,11 @@ util_write_callback(int flags, char *ptr, size_t size, size_t nmemb, void *strea
     }
 
     /* run callback */
+#if PY_MAJOR_VERSION >= 3
+    arglist = Py_BuildValue("(y#)", ptr, total_size);
+#else
     arglist = Py_BuildValue("(s#)", ptr, total_size);
+#endif
     if (arglist == NULL)
         goto verbose_error;
     result = PyEval_CallObject(cb, arglist);
-- 
1.7.1


From 5ac0635145adf9e4a1ebd154ee8baed4c2c41a68 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 23:24:05 -0500
Subject: [PATCH 122/236] Document how files are handled

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/files.rst |   22 ++++++++++++++++++++++
 1 files changed, 22 insertions(+), 0 deletions(-)
 create mode 100644 doc/files.rst

diff --git a/doc/files.rst b/doc/files.rst
new file mode 100644
index 0000000..9503ab0
--- /dev/null
+++ b/doc/files.rst
@@ -0,0 +1,22 @@
+Files
+=====
+
+In PycURL 7.19.0.2 and below, CURLOPT_READDATA, CURLOPT_WRITEDATA and
+CURLOPT_WRITEHEADER options accepted file objects and directly passed
+the underlying C library FILE pointers to libcurl.
+
+Python 3 no longer implements files as C library FILE objects.
+In PycURL 7.19.0.3 and above, when running on Python 3, these options
+are implemented as calls to CURLOPT_READFUNCTION, CURLOPT_WRITEFUNCTION
+and CURLOPT_HEADERFUNCTION, respectively, with the write method of the
+Python file object as the parameter. As a result, any Python file-like
+object implementing a write method can be passed to CURLOPT_READDATA,
+CURLOPT_WRITEDATA or CURLOPT_WRITEHEADER options.
+
+When running PycURL 7.19.0.3 and above on Python 2, the old behavior of
+passing FILE pointers to libcurl remains when a true file object is given
+to CURLOPT_READDATA, CURLOPT_WRITEDATA and CURLOPT_WRITEHEADER options.
+For consistency with Python 3 behavior these options also accept file-like
+objects implementing a write method as arguments, in which case the
+Python 3 code path is used converting these options to CURLOPT_*FUNCTION
+option calls.
-- 
1.7.1


From 261887780fe15e8fdc65ccd21caa9863303868c3 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 8 Dec 2013 23:09:52 -0500
Subject: [PATCH 123/236] Document unicode handling

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/unicode.rst |   36 ++++++++++++++++++++++++++++++++++++
 1 files changed, 36 insertions(+), 0 deletions(-)
 create mode 100644 doc/unicode.rst

diff --git a/doc/unicode.rst b/doc/unicode.rst
new file mode 100644
index 0000000..e3cfc1a
--- /dev/null
+++ b/doc/unicode.rst
@@ -0,0 +1,36 @@
+Unicode
+=======
+
+Under Python 2, (binary) string and Unicode types are interchangeable.
+PycURL will pass whatever strings is given verbatim to libcurl.
+When dealing with Unicode data, this typically means things like
+HTTP request bodies should be encoded to utf-8 before passing them to PycURL.
+Similarly it is on the application to decode HTTP response bodies, if
+they are expected to contain non-ASCII characters.
+
+Under Python 3, the rules are as follows:
+
+PycURL will accept bytes for any string data passed to libcurl (e.g.
+arguments to curl_easy_setopt).
+
+PycURL will accept (Unicode) strings for string arguments to curl_easy_setopt.
+libcurl generally expects the options to be already appropriately encoded
+and escaped (e.g. for CURLOPT_URL). Also, Python 2 code dealing with
+Unicode values for string options will typically manually encode such values.
+Therefore PycURL will attempt to encode Unicode strings with the ascii codec
+only, allowing the application to pass ASCII data in a straightforward manner
+but requiring Unicode data to be appropriately encoded.
+
+Caution: when using CURLOPT_READFUNCTION in tandem with CURLOPT_POSTFIELDSIZE,
+as would be done for HTTP for example, take care to pass the length of
+encoded data to CURLOPT_POSTFIELDSIZE. You can return Unicode strings from
+a CURLOPT_READFUNCTION function, but as stated above they will only be
+encoded to ASCII.
+
+If encoding to ASCII fails, libcurl will fail the request with something
+like a "read function/data error". You may examine sys.last_value for
+information on exception that occurred during encoding in this case.
+
+PycURL will return all data read from the network as bytes. In particular,
+this means that BytesIO should be used rather than StringIO for writing the
+response to memory. Header function will also receive bytes.
-- 
1.7.1


From 14542d561e203c7e171abeaa9233c41f757f2c47 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 18:02:00 -0500
Subject: [PATCH 124/236] Document that files must be opened in binary mode

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/files.rst   |    7 +++++++
 doc/unicode.rst |    6 ++++++
 2 files changed, 13 insertions(+), 0 deletions(-)

diff --git a/doc/files.rst b/doc/files.rst
index 9503ab0..86ca61e 100644
--- a/doc/files.rst
+++ b/doc/files.rst
@@ -20,3 +20,10 @@ For consistency with Python 3 behavior these options also accept file-like
 objects implementing a write method as arguments, in which case the
 Python 3 code path is used converting these options to CURLOPT_*FUNCTION
 option calls.
+
+Files given to PycURL as arguments to CURLOPT_READDATA, CURLOPT_WRITEDATA or
+CURLOPT_WRITEHEADER must be opened for writing in binary mode. Files opened
+in text mode (without "b" flag to open()) expect string objects and writing
+to them from PycURL will fail. Similarly when passing f.write method of
+an open file to CURLOPT_WRITEFUNCTION or CURLOPT_HEADERFUNCTION, or f.read
+to CURLOPT_READFUNCTION, the file must have been be opened in binary mode.
diff --git a/doc/unicode.rst b/doc/unicode.rst
index e3cfc1a..bee3a92 100644
--- a/doc/unicode.rst
+++ b/doc/unicode.rst
@@ -34,3 +34,9 @@ information on exception that occurred during encoding in this case.
 PycURL will return all data read from the network as bytes. In particular,
 this means that BytesIO should be used rather than StringIO for writing the
 response to memory. Header function will also receive bytes.
+
+Because PycURL does not perform encoding or decoding, other than to ASCII,
+any file objects that PycURL is meant to interact with via CURLOPT_READDATA,
+CURLOPT_WRITEDATA, CURLOPT_WRITEHEADER, CURLOPT_READFUNCTION,
+CURLOPT_WRITEFUNCTION or CURLOPT_HEADERFUNCTION must be opened in binary
+mode ("b" flag to open() call).
-- 
1.7.1


From 281d57663676fd1684b9ef07d4040d62d79af0d5 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 11 Dec 2013 12:53:31 -0800
Subject: [PATCH 125/236] Python has True and False now

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/setup.py b/setup.py
index 3ab172f..0439a43 100644
--- a/setup.py
+++ b/setup.py
@@ -50,7 +50,7 @@ def scan_argv(s, default):
 
 
 # append contents of an environment variable to library_dirs[]
-def add_libdirs(envvar, sep, fatal=0):
+def add_libdirs(envvar, sep, fatal=False):
     v = os.environ.get(envvar)
     if not v:
         return
-- 
1.7.1


From 3cc2b7591a94686c6ee03b84122460eaea8f30de Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 11 Dec 2013 12:53:56 -0800
Subject: [PATCH 126/236] Extract helper function to fail

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    8 ++++++--
 1 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/setup.py b/setup.py
index 0439a43..35a5987 100644
--- a/setup.py
+++ b/setup.py
@@ -34,6 +34,11 @@ extra_compile_args = []
 extra_link_args = []
 
 
+def fail(msg):
+    sys.stderr.write(msg + "\n")
+    exit(10)
+
+
 def scan_argv(s, default):
     p = default
     i = 1
@@ -63,8 +68,7 @@ def add_libdirs(envvar, sep, fatal=False):
             if not dir in library_dirs:
                 library_dirs.append(dir)
         elif fatal:
-            print("FATAL: bad directory %s in environment variable %s" % (dir, envvar))
-            sys.exit(1)
+            fail("FATAL: bad directory %s in environment variable %s" % (dir, envvar))
 
 
 if sys.platform == "win32":
-- 
1.7.1


From 21d14f0360a5daf891bd736f352f38700721f093 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 20:55:50 -0500
Subject: [PATCH 127/236] Python 3 compatibility for test matrix

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/matrix.py |   15 ++++++++++-----
 1 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/tests/matrix.py b/tests/matrix.py
index 1c3e56a..3e5dc0e 100644
--- a/tests/matrix.py
+++ b/tests/matrix.py
@@ -1,4 +1,9 @@
-import os, os.path, urllib, subprocess, shutil, re
+import os, os.path, subprocess, shutil, re
+
+try:
+    from urllib.request import urlopen
+except ImportError:
+    from urllib import urlopen
 
 python_versions = ['2.4.6', '2.5.6', '2.6.8', '2.7.5']
 libcurl_versions = ['7.19.0', '7.33.0']
@@ -24,9 +29,9 @@ class in_dir:
 
 def fetch(url, archive):
     if not os.path.exists(archive):
-        print "Fetching %s" % url
-        io = urllib.urlopen(url)
-        with open('.tmp.%s' % archive, 'w') as f:
+        sys.stdout.write("Fetching %s\n" % url)
+        io = urlopen(url)
+        with open('.tmp.%s' % archive, 'wb') as f:
             while True:
                 chunk = io.read(65536)
                 if len(chunk) == 0:
@@ -36,7 +41,7 @@ def fetch(url, archive):
 
 def build(archive, dir, prefix, meta=None):
     if not os.path.exists(dir):
-        print "Building %s" % archive
+        sys.stdout.write("Building %s\n" % archive)
         subprocess.check_call(['tar', 'xf', archive])
         with in_dir(dir):
             if meta and 'patches' in meta:
-- 
1.7.1


From 9a3c3042a57934eabb01573183401cdabddc4f07 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 21:24:11 -0500
Subject: [PATCH 128/236] Patch for 3.0

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/matrix.py |    3 +++
 1 files changed, 3 insertions(+), 0 deletions(-)

diff --git a/tests/matrix.py b/tests/matrix.py
index 3e5dc0e..24c5743 100644
--- a/tests/matrix.py
+++ b/tests/matrix.py
@@ -12,6 +12,9 @@ python_meta = {
     '2.5.6': {
         'patches': ['python25.patch'],
     },
+    '3.0.1': {
+        'patches': ['python25.patch'],
+    },
 }
 
 root = os.path.abspath(os.path.dirname(__file__))
-- 
1.7.1


From 457b8d474d1030a55787ef4ffcb94729f526c312 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 21:25:47 -0500
Subject: [PATCH 129/236] more compat

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/matrix.py |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/tests/matrix.py b/tests/matrix.py
index 24c5743..e46f94c 100644
--- a/tests/matrix.py
+++ b/tests/matrix.py
@@ -62,11 +62,11 @@ def patch_pycurl_for_24():
         for file in files:
             if file.endswith('.py'):
                 path = os.path.join(root, file)
-                with open(path, 'rb') as f:
+                with open(path, 'r') as f:
                     contents = f.read()
                 contents = re.compile(r'^(\s*)from \. import', re.M).sub(r'\1import', contents)
                 contents = re.compile(r'^(\s*)from \.(\w+) import', re.M).sub(r'\1from \2 import', contents)
-                with open(path, 'wb') as f:
+                with open(path, 'w') as f:
                     f.write(contents)
 
 def run_matrix():
@@ -94,7 +94,7 @@ def run_matrix():
         os.mkdir('venv')
 
     for python_version in python_versions:
-        python_version_pieces = map(int, python_version.split('.')[:2])
+        python_version_pieces = [int(piece) for piece in python_version.split('.')[:2]]
         for libcurl_version in libcurl_versions:
             python_prefix = os.path.abspath('i/Python-%s' % python_version)
             libcurl_prefix = os.path.abspath('i/curl-%s' % libcurl_version)
-- 
1.7.1


From 8e53e9cc3460f118b958a9532a66779025607714 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 21:27:36 -0500
Subject: [PATCH 130/236] Setuptools 2.0 dropped python 2.4 support, compensate

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/matrix.py |   10 ++++++++--
 1 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/tests/matrix.py b/tests/matrix.py
index e46f94c..207d475 100644
--- a/tests/matrix.py
+++ b/tests/matrix.py
@@ -30,7 +30,9 @@ class in_dir:
     def __exit__(self, type, value, traceback):
         os.chdir(self.oldwd)
 
-def fetch(url, archive):
+def fetch(url, archive=None):
+    if archive is None:
+        archive = os.path.basename(url)
     if not os.path.exists(archive):
         sys.stdout.write("Fetching %s\n" % url)
         io = urlopen(url)
@@ -104,7 +106,11 @@ def run_matrix():
             if python_version_pieces >= [2, 5]:
                 subprocess.check_call(['virtualenv', venv, '-p', '%s/bin/python' % python_prefix, '--no-site-packages'])
             else:
-                subprocess.check_call(['python', 'virtualenv-1.7.py', venv, '-p', '%s/bin/python' % python_prefix, '--no-site-packages'])
+                # md5=bd639f9b0eac4c42497034dec2ec0c2b
+                fetch('https://pypi.python.org/packages/2.4/s/setuptools/setuptools-0.6c11-py2.4.egg')
+                # md5=6afbb46aeb48abac658d4df742bff714
+                fetch('https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz')
+                subprocess.check_call(['python', 'virtualenv-1.7.py', venv, '-p', '%s/bin/python' % python_prefix, '--no-site-packages', '--never-download'])
             curl_config_path = os.path.join(libcurl_prefix, 'bin/curl-config')
             curl_lib_path = os.path.join(libcurl_prefix, 'lib')
             with in_dir('pycurl'):
-- 
1.7.1


From 0fc9605be0bef11755d5ddf1d6d9d96a99fa8a89 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 21:27:51 -0500
Subject: [PATCH 131/236] Our python versions

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/matrix.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/tests/matrix.py b/tests/matrix.py
index 207d475..7942c79 100644
--- a/tests/matrix.py
+++ b/tests/matrix.py
@@ -5,7 +5,7 @@ try:
 except ImportError:
     from urllib import urlopen
 
-python_versions = ['2.4.6', '2.5.6', '2.6.8', '2.7.5']
+python_versions = ['2.4.6', '2.5.6', '2.6.8', '2.7.5', '3.0.1', '3.1.5', '3.2.5', '3.3.3']
 libcurl_versions = ['7.19.0', '7.33.0']
 
 python_meta = {
-- 
1.7.1


From d85b8618235dcb28a0d49b8938b8ec0db8449108 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 22:03:57 -0500
Subject: [PATCH 132/236] Allow overriding python and libcurl versions to test against

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/matrix.py |   21 +++++++++++++++++++--
 1 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/tests/matrix.py b/tests/matrix.py
index 7942c79..bce9f4c 100644
--- a/tests/matrix.py
+++ b/tests/matrix.py
@@ -71,7 +71,7 @@ def patch_pycurl_for_24():
                 with open(path, 'w') as f:
                     f.write(contents)
 
-def run_matrix():
+def run_matrix(python_versions, libcurl_versions):
     for python_version in python_versions:
         url = 'http://www.python.org/ftp/python/%s/Python-%s.tgz' % (python_version, python_version)
         archive = os.path.basename(url)
@@ -147,7 +147,24 @@ def run_matrix():
 if __name__ == '__main__':
     import sys
     
+    def main():
+        import optparse
+        
+        parser = optparse.OptionParser()
+        parser.add_option('-p', '--python', help='Specify python version to test against')
+        parser.add_option('-c', '--curl', help='Specify libcurl version to test against')
+        options, args = parser.parse_args()
+        if options.python:
+            chosen_python_versions = [options.python]
+        else:
+            chosen_python_versions = python_versions
+        if options.curl:
+            chosen_libcurl_versions = [options.curl]
+        else:
+            chosen_libcurl_versions = libcurl_versions
+        run_matrix(chosen_python_versions, chosen_libcurl_versions)
+    
     if len(sys.argv) > 1 and sys.argv[1] == 'patch-24':
         patch_pycurl_for_24()
     else:
-        run_matrix()
+        main()
-- 
1.7.1


From af8ad3147073599853fd22c6090cb1d8eea5a5b5 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 22:04:22 -0500
Subject: [PATCH 133/236] Setuptools 2.0 does not support python 2.5 either

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/matrix.py |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/tests/matrix.py b/tests/matrix.py
index bce9f4c..40d2da9 100644
--- a/tests/matrix.py
+++ b/tests/matrix.py
@@ -104,7 +104,8 @@ def run_matrix(python_versions, libcurl_versions):
             if os.path.exists(venv):
                 shutil.rmtree(venv)
             if python_version_pieces >= [2, 5]:
-                subprocess.check_call(['virtualenv', venv, '-p', '%s/bin/python' % python_prefix, '--no-site-packages'])
+                fetch('https://pypi.python.org/packages/2.5/s/setuptools/setuptools-0.6c11-py2.5.egg')
+                subprocess.check_call(['virtualenv', venv, '-p', '%s/bin/python' % python_prefix, '--no-site-packages', '--never-download'])
             else:
                 # md5=bd639f9b0eac4c42497034dec2ec0c2b
                 fetch('https://pypi.python.org/packages/2.4/s/setuptools/setuptools-0.6c11-py2.4.egg')
-- 
1.7.1


From 63da97283e088742b1217e70f6d3380f0d7276d5 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 22:09:45 -0500
Subject: [PATCH 134/236] This may not be ideal but it does work for python 2.6 and 2.7 currently

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/matrix.py |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/tests/matrix.py b/tests/matrix.py
index 40d2da9..06b8c49 100644
--- a/tests/matrix.py
+++ b/tests/matrix.py
@@ -105,6 +105,8 @@ def run_matrix(python_versions, libcurl_versions):
                 shutil.rmtree(venv)
             if python_version_pieces >= [2, 5]:
                 fetch('https://pypi.python.org/packages/2.5/s/setuptools/setuptools-0.6c11-py2.5.egg')
+                fetch('https://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c11-py2.6.egg')
+                fetch('https://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg')
                 subprocess.check_call(['virtualenv', venv, '-p', '%s/bin/python' % python_prefix, '--no-site-packages', '--never-download'])
             else:
                 # md5=bd639f9b0eac4c42497034dec2ec0c2b
-- 
1.7.1


From 10ebc8f5b2f45e9eaf732c7eb3eda0562b873e36 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 22:11:59 -0500
Subject: [PATCH 135/236] Python 3 no longer provides bin/python, must use bin/pythonX.Y

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/matrix.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/tests/matrix.py b/tests/matrix.py
index 06b8c49..1a16694 100644
--- a/tests/matrix.py
+++ b/tests/matrix.py
@@ -107,7 +107,7 @@ def run_matrix(python_versions, libcurl_versions):
                 fetch('https://pypi.python.org/packages/2.5/s/setuptools/setuptools-0.6c11-py2.5.egg')
                 fetch('https://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c11-py2.6.egg')
                 fetch('https://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg')
-                subprocess.check_call(['virtualenv', venv, '-p', '%s/bin/python' % python_prefix, '--no-site-packages', '--never-download'])
+                subprocess.check_call(['virtualenv', venv, '-p', '%s/bin/python%d.%d' % (python_prefix, python_version_pieces[0], python_version_pieces[1]), '--no-site-packages', '--never-download'])
             else:
                 # md5=bd639f9b0eac4c42497034dec2ec0c2b
                 fetch('https://pypi.python.org/packages/2.4/s/setuptools/setuptools-0.6c11-py2.4.egg')
-- 
1.7.1


From 3a8747b97dc6098432dafd75af1d5df75545b241 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 22:45:07 -0500
Subject: [PATCH 136/236] Patch to unbreak virtualenv on python 3.0

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/matrix.py             |    2 +-
 tests/matrix/python30.patch |   19 +++++++++++++++++++
 2 files changed, 20 insertions(+), 1 deletions(-)
 create mode 100644 tests/matrix/python30.patch

diff --git a/tests/matrix.py b/tests/matrix.py
index 1a16694..5ef430b 100644
--- a/tests/matrix.py
+++ b/tests/matrix.py
@@ -13,7 +13,7 @@ python_meta = {
         'patches': ['python25.patch'],
     },
     '3.0.1': {
-        'patches': ['python25.patch'],
+        'patches': ['python25.patch', 'python30.patch'],
     },
 }
 
diff --git a/tests/matrix/python30.patch b/tests/matrix/python30.patch
new file mode 100644
index 0000000..8b067a7
--- /dev/null
+++ b/tests/matrix/python30.patch
@@ -0,0 +1,19 @@
+Python 3.0's version.py uses cmp which is not defined by the interpreter.
+The only difference between version.py in 3.0 and 3.1 is this fix.
+
+--- Python-3.0.1/Lib/distutils/version.py	2013-12-14 21:06:23.000000000 -0500
++++ Python-3.1.5/Lib/distutils/version.py	2013-12-14 21:01:10.000000000 -0500
+@@ -338,7 +338,12 @@
+         if isinstance(other, str):
+             other = LooseVersion(other)
+ 
+-        return cmp(self.version, other.version)
++        if self.version == other.version:
++            return 0
++        if self.version < other.version:
++            return -1
++        if self.version > other.version:
++            return 1
+ 
+ 
+ # end class LooseVersion
-- 
1.7.1


From 9217aad89cff716a0316ddd8d6158304cd0f7617 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 22:45:49 -0500
Subject: [PATCH 137/236] System virtualenv might be broken, use known versions everywhere

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/matrix.py |    9 ++++++++-
 1 files changed, 8 insertions(+), 1 deletions(-)

diff --git a/tests/matrix.py b/tests/matrix.py
index 5ef430b..afc5b23 100644
--- a/tests/matrix.py
+++ b/tests/matrix.py
@@ -91,6 +91,7 @@ def run_matrix(python_versions, libcurl_versions):
         build(archive, dir, prefix)
 
     fetch('https://raw.github.com/pypa/virtualenv/1.7/virtualenv.py', 'virtualenv-1.7.py')
+    fetch('https://raw.github.com/pypa/virtualenv/1.9.1/virtualenv.py', 'virtualenv-1.9.1.py')
 
     if not os.path.exists('venv'):
         os.mkdir('venv')
@@ -107,7 +108,13 @@ def run_matrix(python_versions, libcurl_versions):
                 fetch('https://pypi.python.org/packages/2.5/s/setuptools/setuptools-0.6c11-py2.5.egg')
                 fetch('https://pypi.python.org/packages/2.6/s/setuptools/setuptools-0.6c11-py2.6.egg')
                 fetch('https://pypi.python.org/packages/2.7/s/setuptools/setuptools-0.6c11-py2.7.egg')
-                subprocess.check_call(['virtualenv', venv, '-p', '%s/bin/python%d.%d' % (python_prefix, python_version_pieces[0], python_version_pieces[1]), '--no-site-packages', '--never-download'])
+                # I had virtualenv 1.8.2 installed systemwide which
+                # did not work with python 3.0:
+                # http://stackoverflow.com/questions/14224361/why-am-i-getting-this-error-related-to-pip-and-easy-install-when-trying-to-set
+                # so, use known versions everywhere
+                # md5=89e68df89faf1966bcbd99a0033fbf8e
+                fetch('https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz')
+                subprocess.check_call(['python', 'virtualenv-1.9.1.py', venv, '-p', '%s/bin/python%d.%d' % (python_prefix, python_version_pieces[0], python_version_pieces[1]), '--no-site-packages', '--never-download'])
             else:
                 # md5=bd639f9b0eac4c42497034dec2ec0c2b
                 fetch('https://pypi.python.org/packages/2.4/s/setuptools/setuptools-0.6c11-py2.4.egg')
-- 
1.7.1


From 59b4267076852d187474beb748b8af17e303dd40 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 14 Dec 2013 23:20:40 -0500
Subject: [PATCH 138/236] Python 3.1 through 3.3 are officially supported now

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 README.rst |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/README.rst b/README.rst
index 43cef02..e91f440 100644
--- a/README.rst
+++ b/README.rst
@@ -40,7 +40,7 @@ Overview
 Requirements
 ------------
 
-- Python 2.4 through 2.7.
+- Python 2.4 through 2.7, 3.1 through 3.3.
 - libcurl 7.19.0 or better.
 
 Installation
-- 
1.7.1


From b915462433e7c88b5a81dbc41a2da27351aed528 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 15 Dec 2013 03:40:14 -0500
Subject: [PATCH 139/236] Extract minimum libcurl version check into a decorator

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/certinfo_test.py |   17 ++++++-----------
 tests/curlopt_test.py  |   12 ++++--------
 tests/util.py          |   16 ++++++++++++++++
 3 files changed, 26 insertions(+), 19 deletions(-)

diff --git a/tests/certinfo_test.py b/tests/certinfo_test.py
index 58e638e..176c210 100644
--- a/tests/certinfo_test.py
+++ b/tests/certinfo_test.py
@@ -18,18 +18,14 @@ class CertinfoTest(unittest.TestCase):
     def tearDown(self):
         self.curl.close()
     
+    # CURLOPT_CERTINFO was introduced in libcurl-7.19.1
+    @util.min_libcurl(7, 19, 1)
     def test_certinfo_option(self):
-        # CURLOPT_CERTINFO was introduced in libcurl-7.19.1
-        if util.pycurl_version_less_than(7, 19, 1):
-            raise nose.plugins.skip.SkipTest('libcurl < 7.19.1')
-        
         assert hasattr(pycurl, 'OPT_CERTINFO')
     
+    # CURLOPT_CERTINFO was introduced in libcurl-7.19.1
+    @util.min_libcurl(7, 19, 1)
     def test_request_without_certinfo(self):
-        # CURLOPT_CERTINFO was introduced in libcurl-7.19.1
-        if util.pycurl_version_less_than(7, 19, 1):
-            raise nose.plugins.skip.SkipTest('libcurl < 7.19.1')
-        
         self.curl.setopt(pycurl.URL, 'https://localhost:8383/success')
         sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
@@ -41,10 +37,9 @@ class CertinfoTest(unittest.TestCase):
         certinfo = self.curl.getinfo(pycurl.INFO_CERTINFO)
         self.assertEqual([], certinfo)
     
+    # CURLOPT_CERTINFO was introduced in libcurl-7.19.1
+    @util.min_libcurl(7, 19, 1)
     def test_request_with_certinfo(self):
-        # CURLOPT_CERTINFO was introduced in libcurl-7.19.1
-        if util.pycurl_version_less_than(7, 19, 1):
-            raise nose.plugins.skip.SkipTest('libcurl < 7.19.1')
         # CURLOPT_CERTINFO only works with OpenSSL
         if 'openssl' not in pycurl.version.lower():
             raise nose.plugins.skip.SkipTest('libcurl does not use openssl')
diff --git a/tests/curlopt_test.py b/tests/curlopt_test.py
index 25d5a5c..f7d07f8 100644
--- a/tests/curlopt_test.py
+++ b/tests/curlopt_test.py
@@ -9,21 +9,17 @@ import nose.plugins.skip
 from . import util
 
 class CurloptTest(unittest.TestCase):
+    # CURLOPT_USERNAME was introduced in libcurl-7.19.1
+    @util.min_libcurl(7, 19, 1)
     def test_username(self):
-        # CURLOPT_USERNAME was introduced in libcurl-7.19.1
-        if util.pycurl_version_less_than(7, 19, 1):
-            raise nose.plugins.skip.SkipTest('libcurl < 7.19.1')
-        
         assert hasattr(pycurl, 'USERNAME')
         assert hasattr(pycurl, 'PASSWORD')
         assert hasattr(pycurl, 'PROXYUSERNAME')
         assert hasattr(pycurl, 'PROXYPASSWORD')
     
+    # CURLOPT_DNS_SERVERS was introduced in libcurl-7.24.0
+    @util.min_libcurl(7, 24, 0)
     def test_dns_servers(self):
-        # CURLOPT_DNS_SERVERS was introduced in libcurl-7.24.0
-        if util.pycurl_version_less_than(7, 24, 0):
-            raise nose.plugins.skip.SkipTest('libcurl < 7.24.0')
-        
         assert hasattr(pycurl, 'DNS_SERVERS')
         
         # Does not work unless libcurl was built against c-ares
diff --git a/tests/util.py b/tests/util.py
index c71e83f..6b8e577 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -44,6 +44,22 @@ def only_python3(fn):
     
     return decorated
 
+def min_libcurl(major, minor, patch):
+    import nose.plugins.skip
+    import functools
+    
+    def decorator(fn):
+        @functools.wraps(fn)
+        def decorated(*args, **kwargs):
+            if pycurl_version_less_than(major, minor, patch):
+                raise nose.plugins.skip.SkipTest('libcurl < %d.%d.%d' % (major, minor, patch))
+            
+            return fn(*args, **kwargs)
+        
+        return decorated
+    
+    return decorator
+
 try:
     create_connection = socket.create_connection
 except AttributeError:
-- 
1.7.1


From bac0edc3dcc812fe59c028c9065c9c0340352b8b Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 15 Dec 2013 03:51:44 -0500
Subject: [PATCH 140/236] Add CURLOPT_POSTREDIR option and related constants

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c          |   17 +++++++++++++++++
 tests/curlopt_test.py |   24 ++++++++++++++++++++++++
 2 files changed, 41 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 0293666..d1f96f2 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -90,6 +90,7 @@
 #define HAVE_CURLOPT_USERNAME
 #define HAVE_CURLOPT_PROXYUSERNAME
 #define HAVE_CURLOPT_CERTINFO
+#define HAVE_CURLOPT_POSTREDIR
 #endif
 
 #if LIBCURL_VERSION_NUM >= 0x071503 /* check for 7.21.3 or greater */
@@ -100,6 +101,10 @@
 #define HAVE_CURLOPT_DNS_SERVERS
 #endif
 
+#if LIBCURL_VERSION_NUM >= 0x071A00 /* check for 7.26.0 or greater */
+#define HAVE_CURL_REDIR_POST_303
+#endif
+
 /* Python < 2.5 compat for Py_ssize_t */
 #if PY_VERSION_HEX < 0x02050000
 typedef int Py_ssize_t;
@@ -4724,6 +4729,9 @@ initpycurl(void)
 #ifdef HAVE_CURLOPT_CERTINFO
     insint_c(d, "OPT_CERTINFO", CURLOPT_CERTINFO);
 #endif
+#ifdef HAVE_CURLOPT_POSTREDIR
+    insint_c(d, "POSTREDIR", CURLOPT_POSTREDIR);
+#endif
 
     insint_c(d, "M_TIMERFUNCTION", CURLMOPT_TIMERFUNCTION);
     insint_c(d, "M_SOCKETFUNCTION", CURLMOPT_SOCKETFUNCTION);
@@ -4815,6 +4823,15 @@ initpycurl(void)
     insint_c(d, "DNS_SERVERS", CURLOPT_DNS_SERVERS);
 #endif
 
+#ifdef HAVE_CURLOPT_POSTREDIR
+    insint_c(d, "REDIR_POST_301", CURL_REDIR_POST_301);
+    insint_c(d, "REDIR_POST_302", CURL_REDIR_POST_302);
+# ifdef HAVE_CURL_REDIR_POST_303
+    insint_c(d, "REDIR_POST_303", CURL_REDIR_POST_303);
+# endif
+    insint_c(d, "REDIR_POST_ALL", CURL_REDIR_POST_ALL);
+#endif
+
     /* options for global_init() */
     insint(d, "GLOBAL_SSL", CURL_GLOBAL_SSL);
     insint(d, "GLOBAL_WIN32", CURL_GLOBAL_WIN32);
diff --git a/tests/curlopt_test.py b/tests/curlopt_test.py
index f7d07f8..1d6a1df 100644
--- a/tests/curlopt_test.py
+++ b/tests/curlopt_test.py
@@ -26,3 +26,27 @@ class CurloptTest(unittest.TestCase):
         #c = pycurl.Curl()
         #c.setopt(c.DNS_SERVERS, '1.2.3.4')
         #c.close()
+
+    # CURLOPT_POSTREDIR was introduced in libcurl-7.19.1
+    @util.min_libcurl(7, 19, 1)
+    def test_postredir(self):
+        assert hasattr(pycurl, 'POSTREDIR')
+        assert hasattr(pycurl, 'REDIR_POST_301')
+        assert hasattr(pycurl, 'REDIR_POST_302')
+        assert hasattr(pycurl, 'REDIR_POST_ALL')
+    
+    # CURL_REDIR_POST_303 was introduced in libcurl-7.26.0
+    @util.min_libcurl(7, 26, 0)
+    def test_redir_post_303(self):
+        assert hasattr(pycurl, 'REDIR_POST_303')
+
+    # CURLOPT_POSTREDIR was introduced in libcurl-7.19.1
+    @util.min_libcurl(7, 19, 1)
+    def test_postredir_flags(self):
+        self.assertEqual(pycurl.REDIR_POST_301, pycurl.REDIR_POST_ALL & pycurl.REDIR_POST_301)
+        self.assertEqual(pycurl.REDIR_POST_302, pycurl.REDIR_POST_ALL & pycurl.REDIR_POST_302)
+
+    # CURL_REDIR_POST_303 was introduced in libcurl-7.26.0
+    @util.min_libcurl(7, 26, 0)
+    def test_postredir_flags(self):
+        self.assertEqual(pycurl.REDIR_POST_303, pycurl.REDIR_POST_ALL & pycurl.REDIR_POST_303)
-- 
1.7.1


From 1a70d359cd9ed344a83d05e67e5a5ac132899d49 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 15 Dec 2013 13:50:36 -0500
Subject: [PATCH 141/236] Add a test that setting the option works

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/curlopt_test.py |    7 +++++++
 1 files changed, 7 insertions(+), 0 deletions(-)

diff --git a/tests/curlopt_test.py b/tests/curlopt_test.py
index 1d6a1df..564edbf 100644
--- a/tests/curlopt_test.py
+++ b/tests/curlopt_test.py
@@ -35,6 +35,13 @@ class CurloptTest(unittest.TestCase):
         assert hasattr(pycurl, 'REDIR_POST_302')
         assert hasattr(pycurl, 'REDIR_POST_ALL')
     
+    # CURLOPT_POSTREDIR was introduced in libcurl-7.19.1
+    @util.min_libcurl(7, 19, 1)
+    def test_postredir_setopt(self):
+        curl = pycurl.Curl()
+        curl.setopt(curl.POSTREDIR, curl.REDIR_POST_301)
+        curl.close()
+    
     # CURL_REDIR_POST_303 was introduced in libcurl-7.26.0
     @util.min_libcurl(7, 26, 0)
     def test_redir_post_303(self):
-- 
1.7.1


From dda034487dd40d67bb03592c290f47d802293c45 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 15 Dec 2013 18:40:10 -0500
Subject: [PATCH 142/236] Add CURLAUTH_DIGEST_IE support

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c          |    7 +++++++
 tests/curlopt_test.py |    5 +++++
 2 files changed, 12 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index d1f96f2..0616fda 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -93,6 +93,10 @@
 #define HAVE_CURLOPT_POSTREDIR
 #endif
 
+#if LIBCURL_VERSION_NUM >= 0x071303 /* check for 7.19.3 or greater */
+#define HAVE_CURLAUTH_DIGEST_IE
+#endif
+
 #if LIBCURL_VERSION_NUM >= 0x071503 /* check for 7.21.3 or greater */
 #define HAVE_CURLOPT_RESOLVE
 #endif
@@ -4543,6 +4547,9 @@ initpycurl(void)
     insint_c(d, "HTTPAUTH_NONE", CURLAUTH_NONE);
     insint_c(d, "HTTPAUTH_BASIC", CURLAUTH_BASIC);
     insint_c(d, "HTTPAUTH_DIGEST", CURLAUTH_DIGEST);
+#ifdef HAVE_CURLAUTH_DIGEST_IE
+    insint_c(d, "HTTPAUTH_DIGEST_IE", CURLAUTH_DIGEST_IE);
+#endif
     insint_c(d, "HTTPAUTH_GSSNEGOTIATE", CURLAUTH_GSSNEGOTIATE);
     insint_c(d, "HTTPAUTH_NTLM", CURLAUTH_NTLM);
     insint_c(d, "HTTPAUTH_ANY", CURLAUTH_ANY);
diff --git a/tests/curlopt_test.py b/tests/curlopt_test.py
index 564edbf..6d21608 100644
--- a/tests/curlopt_test.py
+++ b/tests/curlopt_test.py
@@ -57,3 +57,8 @@ class CurloptTest(unittest.TestCase):
     @util.min_libcurl(7, 26, 0)
     def test_postredir_flags(self):
         self.assertEqual(pycurl.REDIR_POST_303, pycurl.REDIR_POST_ALL & pycurl.REDIR_POST_303)
+
+    # HTTPAUTH_DIGEST_IE was introduced in libcurl-7.19.3
+    @util.min_libcurl(7, 19, 3)
+    def test_httpauth_digest_ie(self):
+        assert hasattr(pycurl, 'HTTPAUTH_DIGEST_IE')
-- 
1.7.1


From 035d4202b2e48d238cf01cb26e93623bf9ad772b Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 15 Dec 2013 20:03:58 -0500
Subject: [PATCH 143/236] Update python versions in readme

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 README.rst |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/README.rst b/README.rst
index e91f440..e67f259 100644
--- a/README.rst
+++ b/README.rst
@@ -101,7 +101,7 @@ vsftpd tests you must explicitly set PYCURL_VSFTPD_PATH variable like so::
     # specify full path to vsftpd
     export PYCURL_VSFTPD_PATH=/usr/local/libexec/vsftpd
 
-These instructions work for Python 2.5, 2.6 and 2.7.
+These instructions work for Python 2.5 through 2.7 and 3.1 through 3.3.
 
 .. _nose: https://nose.readthedocs.org/
 .. _bottle: http://bottlepy.org/
-- 
1.7.1


From 5fabe0da01fdcc6705dd07ceb32e3116c046a33f Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 15 Dec 2013 20:05:48 -0500
Subject: [PATCH 144/236] Rename license files for greater clarity

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 COPYING      |  504 ----------------------------------------------------------
 COPYING-LGPL |  504 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 COPYING-MIT  |   22 +++
 COPYING2     |   22 ---
 4 files changed, 526 insertions(+), 526 deletions(-)
 delete mode 100644 COPYING
 create mode 100644 COPYING-LGPL
 create mode 100644 COPYING-MIT
 delete mode 100644 COPYING2

diff --git a/COPYING b/COPYING
deleted file mode 100644
index 99dce33..0000000
--- a/COPYING
+++ /dev/null
@@ -1,504 +0,0 @@
-                  GNU LESSER GENERAL PUBLIC LICENSE
-                       Version 2.1, February 1999
-
- Copyright (C) 1991, 1999 Free Software Foundation, Inc.
-     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
- Everyone is permitted to copy and distribute verbatim copies
- of this license document, but changing it is not allowed.
-
-[This is the first released version of the Lesser GPL.  It also counts
- as the successor of the GNU Library Public License, version 2, hence
- the version number 2.1.]
-
-                            Preamble
-
-  The licenses for most software are designed to take away your
-freedom to share and change it.  By contrast, the GNU General Public
-Licenses are intended to guarantee your freedom to share and change
-free software--to make sure the software is free for all its users.
-
-  This license, the Lesser General Public License, applies to some
-specially designated software packages--typically libraries--of the
-Free Software Foundation and other authors who decide to use it.  You
-can use it too, but we suggest you first think carefully about whether
-this license or the ordinary General Public License is the better
-strategy to use in any particular case, based on the explanations below.
-
-  When we speak of free software, we are referring to freedom of use,
-not price.  Our General Public Licenses are designed to make sure that
-you have the freedom to distribute copies of free software (and charge
-for this service if you wish); that you receive source code or can get
-it if you want it; that you can change the software and use pieces of
-it in new free programs; and that you are informed that you can do
-these things.
-
-  To protect your rights, we need to make restrictions that forbid
-distributors to deny you these rights or to ask you to surrender these
-rights.  These restrictions translate to certain responsibilities for
-you if you distribute copies of the library or if you modify it.
-
-  For example, if you distribute copies of the library, whether gratis
-or for a fee, you must give the recipients all the rights that we gave
-you.  You must make sure that they, too, receive or can get the source
-code.  If you link other code with the library, you must provide
-complete object files to the recipients, so that they can relink them
-with the library after making changes to the library and recompiling
-it.  And you must show them these terms so they know their rights.
-
-  We protect your rights with a two-step method: (1) we copyright the
-library, and (2) we offer you this license, which gives you legal
-permission to copy, distribute and/or modify the library.
-
-  To protect each distributor, we want to make it very clear that
-there is no warranty for the free library.  Also, if the library is
-modified by someone else and passed on, the recipients should know
-that what they have is not the original version, so that the original
-author's reputation will not be affected by problems that might be
-introduced by others.
-
-  Finally, software patents pose a constant threat to the existence of
-any free program.  We wish to make sure that a company cannot
-effectively restrict the users of a free program by obtaining a
-restrictive license from a patent holder.  Therefore, we insist that
-any patent license obtained for a version of the library must be
-consistent with the full freedom of use specified in this license.
-
-  Most GNU software, including some libraries, is covered by the
-ordinary GNU General Public License.  This license, the GNU Lesser
-General Public License, applies to certain designated libraries, and
-is quite different from the ordinary General Public License.  We use
-this license for certain libraries in order to permit linking those
-libraries into non-free programs.
-
-  When a program is linked with a library, whether statically or using
-a shared library, the combination of the two is legally speaking a
-combined work, a derivative of the original library.  The ordinary
-General Public License therefore permits such linking only if the
-entire combination fits its criteria of freedom.  The Lesser General
-Public License permits more lax criteria for linking other code with
-the library.
-
-  We call this license the "Lesser" General Public License because it
-does Less to protect the user's freedom than the ordinary General
-Public License.  It also provides other free software developers Less
-of an advantage over competing non-free programs.  These disadvantages
-are the reason we use the ordinary General Public License for many
-libraries.  However, the Lesser license provides advantages in certain
-special circumstances.
-
-  For example, on rare occasions, there may be a special need to
-encourage the widest possible use of a certain library, so that it becomes
-a de-facto standard.  To achieve this, non-free programs must be
-allowed to use the library.  A more frequent case is that a free
-library does the same job as widely used non-free libraries.  In this
-case, there is little to gain by limiting the free library to free
-software only, so we use the Lesser General Public License.
-
-  In other cases, permission to use a particular library in non-free
-programs enables a greater number of people to use a large body of
-free software.  For example, permission to use the GNU C Library in
-non-free programs enables many more people to use the whole GNU
-operating system, as well as its variant, the GNU/Linux operating
-system.
-
-  Although the Lesser General Public License is Less protective of the
-users' freedom, it does ensure that the user of a program that is
-linked with the Library has the freedom and the wherewithal to run
-that program using a modified version of the Library.
-
-  The precise terms and conditions for copying, distribution and
-modification follow.  Pay close attention to the difference between a
-"work based on the library" and a "work that uses the library".  The
-former contains code derived from the library, whereas the latter must
-be combined with the library in order to run.
-
-                  GNU LESSER GENERAL PUBLIC LICENSE
-   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
-
-  0. This License Agreement applies to any software library or other
-program which contains a notice placed by the copyright holder or
-other authorized party saying it may be distributed under the terms of
-this Lesser General Public License (also called "this License").
-Each licensee is addressed as "you".
-
-  A "library" means a collection of software functions and/or data
-prepared so as to be conveniently linked with application programs
-(which use some of those functions and data) to form executables.
-
-  The "Library", below, refers to any such software library or work
-which has been distributed under these terms.  A "work based on the
-Library" means either the Library or any derivative work under
-copyright law: that is to say, a work containing the Library or a
-portion of it, either verbatim or with modifications and/or translated
-straightforwardly into another language.  (Hereinafter, translation is
-included without limitation in the term "modification".)
-
-  "Source code" for a work means the preferred form of the work for
-making modifications to it.  For a library, complete source code means
-all the source code for all modules it contains, plus any associated
-interface definition files, plus the scripts used to control compilation
-and installation of the library.
-
-  Activities other than copying, distribution and modification are not
-covered by this License; they are outside its scope.  The act of
-running a program using the Library is not restricted, and output from
-such a program is covered only if its contents constitute a work based
-on the Library (independent of the use of the Library in a tool for
-writing it).  Whether that is true depends on what the Library does
-and what the program that uses the Library does.
-
-  1. You may copy and distribute verbatim copies of the Library's
-complete source code as you receive it, in any medium, provided that
-you conspicuously and appropriately publish on each copy an
-appropriate copyright notice and disclaimer of warranty; keep intact
-all the notices that refer to this License and to the absence of any
-warranty; and distribute a copy of this License along with the
-Library.
-
-  You may charge a fee for the physical act of transferring a copy,
-and you may at your option offer warranty protection in exchange for a
-fee.
-
-  2. You may modify your copy or copies of the Library or any portion
-of it, thus forming a work based on the Library, and copy and
-distribute such modifications or work under the terms of Section 1
-above, provided that you also meet all of these conditions:
-
-    a) The modified work must itself be a software library.
-
-    b) You must cause the files modified to carry prominent notices
-    stating that you changed the files and the date of any change.
-
-    c) You must cause the whole of the work to be licensed at no
-    charge to all third parties under the terms of this License.
-
-    d) If a facility in the modified Library refers to a function or a
-    table of data to be supplied by an application program that uses
-    the facility, other than as an argument passed when the facility
-    is invoked, then you must make a good faith effort to ensure that,
-    in the event an application does not supply such function or
-    table, the facility still operates, and performs whatever part of
-    its purpose remains meaningful.
-
-    (For example, a function in a library to compute square roots has
-    a purpose that is entirely well-defined independent of the
-    application.  Therefore, Subsection 2d requires that any
-    application-supplied function or table used by this function must
-    be optional: if the application does not supply it, the square
-    root function must still compute square roots.)
-
-These requirements apply to the modified work as a whole.  If
-identifiable sections of that work are not derived from the Library,
-and can be reasonably considered independent and separate works in
-themselves, then this License, and its terms, do not apply to those
-sections when you distribute them as separate works.  But when you
-distribute the same sections as part of a whole which is a work based
-on the Library, the distribution of the whole must be on the terms of
-this License, whose permissions for other licensees extend to the
-entire whole, and thus to each and every part regardless of who wrote
-it.
-
-Thus, it is not the intent of this section to claim rights or contest
-your rights to work written entirely by you; rather, the intent is to
-exercise the right to control the distribution of derivative or
-collective works based on the Library.
-
-In addition, mere aggregation of another work not based on the Library
-with the Library (or with a work based on the Library) on a volume of
-a storage or distribution medium does not bring the other work under
-the scope of this License.
-
-  3. You may opt to apply the terms of the ordinary GNU General Public
-License instead of this License to a given copy of the Library.  To do
-this, you must alter all the notices that refer to this License, so
-that they refer to the ordinary GNU General Public License, version 2,
-instead of to this License.  (If a newer version than version 2 of the
-ordinary GNU General Public License has appeared, then you can specify
-that version instead if you wish.)  Do not make any other change in
-these notices.
-
-  Once this change is made in a given copy, it is irreversible for
-that copy, so the ordinary GNU General Public License applies to all
-subsequent copies and derivative works made from that copy.
-
-  This option is useful when you wish to copy part of the code of
-the Library into a program that is not a library.
-
-  4. You may copy and distribute the Library (or a portion or
-derivative of it, under Section 2) in object code or executable form
-under the terms of Sections 1 and 2 above provided that you accompany
-it with the complete corresponding machine-readable source code, which
-must be distributed under the terms of Sections 1 and 2 above on a
-medium customarily used for software interchange.
-
-  If distribution of object code is made by offering access to copy
-from a designated place, then offering equivalent access to copy the
-source code from the same place satisfies the requirement to
-distribute the source code, even though third parties are not
-compelled to copy the source along with the object code.
-
-  5. A program that contains no derivative of any portion of the
-Library, but is designed to work with the Library by being compiled or
-linked with it, is called a "work that uses the Library".  Such a
-work, in isolation, is not a derivative work of the Library, and
-therefore falls outside the scope of this License.
-
-  However, linking a "work that uses the Library" with the Library
-creates an executable that is a derivative of the Library (because it
-contains portions of the Library), rather than a "work that uses the
-library".  The executable is therefore covered by this License.
-Section 6 states terms for distribution of such executables.
-
-  When a "work that uses the Library" uses material from a header file
-that is part of the Library, the object code for the work may be a
-derivative work of the Library even though the source code is not.
-Whether this is true is especially significant if the work can be
-linked without the Library, or if the work is itself a library.  The
-threshold for this to be true is not precisely defined by law.
-
-  If such an object file uses only numerical parameters, data
-structure layouts and accessors, and small macros and small inline
-functions (ten lines or less in length), then the use of the object
-file is unrestricted, regardless of whether it is legally a derivative
-work.  (Executables containing this object code plus portions of the
-Library will still fall under Section 6.)
-
-  Otherwise, if the work is a derivative of the Library, you may
-distribute the object code for the work under the terms of Section 6.
-Any executables containing that work also fall under Section 6,
-whether or not they are linked directly with the Library itself.
-
-  6. As an exception to the Sections above, you may also combine or
-link a "work that uses the Library" with the Library to produce a
-work containing portions of the Library, and distribute that work
-under terms of your choice, provided that the terms permit
-modification of the work for the customer's own use and reverse
-engineering for debugging such modifications.
-
-  You must give prominent notice with each copy of the work that the
-Library is used in it and that the Library and its use are covered by
-this License.  You must supply a copy of this License.  If the work
-during execution displays copyright notices, you must include the
-copyright notice for the Library among them, as well as a reference
-directing the user to the copy of this License.  Also, you must do one
-of these things:
-
-    a) Accompany the work with the complete corresponding
-    machine-readable source code for the Library including whatever
-    changes were used in the work (which must be distributed under
-    Sections 1 and 2 above); and, if the work is an executable linked
-    with the Library, with the complete machine-readable "work that
-    uses the Library", as object code and/or source code, so that the
-    user can modify the Library and then relink to produce a modified
-    executable containing the modified Library.  (It is understood
-    that the user who changes the contents of definitions files in the
-    Library will not necessarily be able to recompile the application
-    to use the modified definitions.)
-
-    b) Use a suitable shared library mechanism for linking with the
-    Library.  A suitable mechanism is one that (1) uses at run time a
-    copy of the library already present on the user's computer system,
-    rather than copying library functions into the executable, and (2)
-    will operate properly with a modified version of the library, if
-    the user installs one, as long as the modified version is
-    interface-compatible with the version that the work was made with.
-
-    c) Accompany the work with a written offer, valid for at
-    least three years, to give the same user the materials
-    specified in Subsection 6a, above, for a charge no more
-    than the cost of performing this distribution.
-
-    d) If distribution of the work is made by offering access to copy
-    from a designated place, offer equivalent access to copy the above
-    specified materials from the same place.
-
-    e) Verify that the user has already received a copy of these
-    materials or that you have already sent this user a copy.
-
-  For an executable, the required form of the "work that uses the
-Library" must include any data and utility programs needed for
-reproducing the executable from it.  However, as a special exception,
-the materials to be distributed need not include anything that is
-normally distributed (in either source or binary form) with the major
-components (compiler, kernel, and so on) of the operating system on
-which the executable runs, unless that component itself accompanies
-the executable.
-
-  It may happen that this requirement contradicts the license
-restrictions of other proprietary libraries that do not normally
-accompany the operating system.  Such a contradiction means you cannot
-use both them and the Library together in an executable that you
-distribute.
-
-  7. You may place library facilities that are a work based on the
-Library side-by-side in a single library together with other library
-facilities not covered by this License, and distribute such a combined
-library, provided that the separate distribution of the work based on
-the Library and of the other library facilities is otherwise
-permitted, and provided that you do these two things:
-
-    a) Accompany the combined library with a copy of the same work
-    based on the Library, uncombined with any other library
-    facilities.  This must be distributed under the terms of the
-    Sections above.
-
-    b) Give prominent notice with the combined library of the fact
-    that part of it is a work based on the Library, and explaining
-    where to find the accompanying uncombined form of the same work.
-
-  8. You may not copy, modify, sublicense, link with, or distribute
-the Library except as expressly provided under this License.  Any
-attempt otherwise to copy, modify, sublicense, link with, or
-distribute the Library is void, and will automatically terminate your
-rights under this License.  However, parties who have received copies,
-or rights, from you under this License will not have their licenses
-terminated so long as such parties remain in full compliance.
-
-  9. You are not required to accept this License, since you have not
-signed it.  However, nothing else grants you permission to modify or
-distribute the Library or its derivative works.  These actions are
-prohibited by law if you do not accept this License.  Therefore, by
-modifying or distributing the Library (or any work based on the
-Library), you indicate your acceptance of this License to do so, and
-all its terms and conditions for copying, distributing or modifying
-the Library or works based on it.
-
-  10. Each time you redistribute the Library (or any work based on the
-Library), the recipient automatically receives a license from the
-original licensor to copy, distribute, link with or modify the Library
-subject to these terms and conditions.  You may not impose any further
-restrictions on the recipients' exercise of the rights granted herein.
-You are not responsible for enforcing compliance by third parties with
-this License.
-
-  11. If, as a consequence of a court judgment or allegation of patent
-infringement or for any other reason (not limited to patent issues),
-conditions are imposed on you (whether by court order, agreement or
-otherwise) that contradict the conditions of this License, they do not
-excuse you from the conditions of this License.  If you cannot
-distribute so as to satisfy simultaneously your obligations under this
-License and any other pertinent obligations, then as a consequence you
-may not distribute the Library at all.  For example, if a patent
-license would not permit royalty-free redistribution of the Library by
-all those who receive copies directly or indirectly through you, then
-the only way you could satisfy both it and this License would be to
-refrain entirely from distribution of the Library.
-
-If any portion of this section is held invalid or unenforceable under any
-particular circumstance, the balance of the section is intended to apply,
-and the section as a whole is intended to apply in other circumstances.
-
-It is not the purpose of this section to induce you to infringe any
-patents or other property right claims or to contest validity of any
-such claims; this section has the sole purpose of protecting the
-integrity of the free software distribution system which is
-implemented by public license practices.  Many people have made
-generous contributions to the wide range of software distributed
-through that system in reliance on consistent application of that
-system; it is up to the author/donor to decide if he or she is willing
-to distribute software through any other system and a licensee cannot
-impose that choice.
-
-This section is intended to make thoroughly clear what is believed to
-be a consequence of the rest of this License.
-
-  12. If the distribution and/or use of the Library is restricted in
-certain countries either by patents or by copyrighted interfaces, the
-original copyright holder who places the Library under this License may add
-an explicit geographical distribution limitation excluding those countries,
-so that distribution is permitted only in or among countries not thus
-excluded.  In such case, this License incorporates the limitation as if
-written in the body of this License.
-
-  13. The Free Software Foundation may publish revised and/or new
-versions of the Lesser General Public License from time to time.
-Such new versions will be similar in spirit to the present version,
-but may differ in detail to address new problems or concerns.
-
-Each version is given a distinguishing version number.  If the Library
-specifies a version number of this License which applies to it and
-"any later version", you have the option of following the terms and
-conditions either of that version or of any later version published by
-the Free Software Foundation.  If the Library does not specify a
-license version number, you may choose any version ever published by
-the Free Software Foundation.
-
-  14. If you wish to incorporate parts of the Library into other free
-programs whose distribution conditions are incompatible with these,
-write to the author to ask for permission.  For software which is
-copyrighted by the Free Software Foundation, write to the Free
-Software Foundation; we sometimes make exceptions for this.  Our
-decision will be guided by the two goals of preserving the free status
-of all derivatives of our free software and of promoting the sharing
-and reuse of software generally.
-
-                            NO WARRANTY
-
-  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
-WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
-EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
-OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
-KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
-IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
-PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
-LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
-THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
-
-  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
-WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
-AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
-FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
-CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
-LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
-RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
-FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
-SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
-DAMAGES.
-
-                     END OF TERMS AND CONDITIONS
-
-           How to Apply These Terms to Your New Libraries
-
-  If you develop a new library, and you want it to be of the greatest
-possible use to the public, we recommend making it free software that
-everyone can redistribute and change.  You can do so by permitting
-redistribution under these terms (or, alternatively, under the terms of the
-ordinary General Public License).
-
-  To apply these terms, attach the following notices to the library.  It is
-safest to attach them to the start of each source file to most effectively
-convey the exclusion of warranty; and each file should have at least the
-"copyright" line and a pointer to where the full notice is found.
-
-    <one line to give the library's name and a brief idea of what it does.>
-    Copyright (C) <year>  <name of author>
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Lesser General Public
-    License as published by the Free Software Foundation; either
-    version 2.1 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Lesser General Public License for more details.
-
-    You should have received a copy of the GNU Lesser General Public
-    License along with this library; if not, write to the Free Software
-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-
-Also add information on how to contact you by electronic and paper mail.
-
-You should also get your employer (if you work as a programmer) or your
-school, if any, to sign a "copyright disclaimer" for the library, if
-necessary.  Here is a sample; alter the names:
-
-  Yoyodyne, Inc., hereby disclaims all copyright interest in the
-  library `Frob' (a library for tweaking knobs) written by James Random Hacker.
-
-  <signature of Ty Coon>, 1 April 1990
-  Ty Coon, President of Vice
-
-That's all there is to it!
-
-
diff --git a/COPYING-LGPL b/COPYING-LGPL
new file mode 100644
index 0000000..99dce33
--- /dev/null
+++ b/COPYING-LGPL
@@ -0,0 +1,504 @@
+                  GNU LESSER GENERAL PUBLIC LICENSE
+                       Version 2.1, February 1999
+
+ Copyright (C) 1991, 1999 Free Software Foundation, Inc.
+     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+[This is the first released version of the Lesser GPL.  It also counts
+ as the successor of the GNU Library Public License, version 2, hence
+ the version number 2.1.]
+
+                            Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+Licenses are intended to guarantee your freedom to share and change
+free software--to make sure the software is free for all its users.
+
+  This license, the Lesser General Public License, applies to some
+specially designated software packages--typically libraries--of the
+Free Software Foundation and other authors who decide to use it.  You
+can use it too, but we suggest you first think carefully about whether
+this license or the ordinary General Public License is the better
+strategy to use in any particular case, based on the explanations below.
+
+  When we speak of free software, we are referring to freedom of use,
+not price.  Our General Public Licenses are designed to make sure that
+you have the freedom to distribute copies of free software (and charge
+for this service if you wish); that you receive source code or can get
+it if you want it; that you can change the software and use pieces of
+it in new free programs; and that you are informed that you can do
+these things.
+
+  To protect your rights, we need to make restrictions that forbid
+distributors to deny you these rights or to ask you to surrender these
+rights.  These restrictions translate to certain responsibilities for
+you if you distribute copies of the library or if you modify it.
+
+  For example, if you distribute copies of the library, whether gratis
+or for a fee, you must give the recipients all the rights that we gave
+you.  You must make sure that they, too, receive or can get the source
+code.  If you link other code with the library, you must provide
+complete object files to the recipients, so that they can relink them
+with the library after making changes to the library and recompiling
+it.  And you must show them these terms so they know their rights.
+
+  We protect your rights with a two-step method: (1) we copyright the
+library, and (2) we offer you this license, which gives you legal
+permission to copy, distribute and/or modify the library.
+
+  To protect each distributor, we want to make it very clear that
+there is no warranty for the free library.  Also, if the library is
+modified by someone else and passed on, the recipients should know
+that what they have is not the original version, so that the original
+author's reputation will not be affected by problems that might be
+introduced by others.
+
+  Finally, software patents pose a constant threat to the existence of
+any free program.  We wish to make sure that a company cannot
+effectively restrict the users of a free program by obtaining a
+restrictive license from a patent holder.  Therefore, we insist that
+any patent license obtained for a version of the library must be
+consistent with the full freedom of use specified in this license.
+
+  Most GNU software, including some libraries, is covered by the
+ordinary GNU General Public License.  This license, the GNU Lesser
+General Public License, applies to certain designated libraries, and
+is quite different from the ordinary General Public License.  We use
+this license for certain libraries in order to permit linking those
+libraries into non-free programs.
+
+  When a program is linked with a library, whether statically or using
+a shared library, the combination of the two is legally speaking a
+combined work, a derivative of the original library.  The ordinary
+General Public License therefore permits such linking only if the
+entire combination fits its criteria of freedom.  The Lesser General
+Public License permits more lax criteria for linking other code with
+the library.
+
+  We call this license the "Lesser" General Public License because it
+does Less to protect the user's freedom than the ordinary General
+Public License.  It also provides other free software developers Less
+of an advantage over competing non-free programs.  These disadvantages
+are the reason we use the ordinary General Public License for many
+libraries.  However, the Lesser license provides advantages in certain
+special circumstances.
+
+  For example, on rare occasions, there may be a special need to
+encourage the widest possible use of a certain library, so that it becomes
+a de-facto standard.  To achieve this, non-free programs must be
+allowed to use the library.  A more frequent case is that a free
+library does the same job as widely used non-free libraries.  In this
+case, there is little to gain by limiting the free library to free
+software only, so we use the Lesser General Public License.
+
+  In other cases, permission to use a particular library in non-free
+programs enables a greater number of people to use a large body of
+free software.  For example, permission to use the GNU C Library in
+non-free programs enables many more people to use the whole GNU
+operating system, as well as its variant, the GNU/Linux operating
+system.
+
+  Although the Lesser General Public License is Less protective of the
+users' freedom, it does ensure that the user of a program that is
+linked with the Library has the freedom and the wherewithal to run
+that program using a modified version of the Library.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.  Pay close attention to the difference between a
+"work based on the library" and a "work that uses the library".  The
+former contains code derived from the library, whereas the latter must
+be combined with the library in order to run.
+
+                  GNU LESSER GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License Agreement applies to any software library or other
+program which contains a notice placed by the copyright holder or
+other authorized party saying it may be distributed under the terms of
+this Lesser General Public License (also called "this License").
+Each licensee is addressed as "you".
+
+  A "library" means a collection of software functions and/or data
+prepared so as to be conveniently linked with application programs
+(which use some of those functions and data) to form executables.
+
+  The "Library", below, refers to any such software library or work
+which has been distributed under these terms.  A "work based on the
+Library" means either the Library or any derivative work under
+copyright law: that is to say, a work containing the Library or a
+portion of it, either verbatim or with modifications and/or translated
+straightforwardly into another language.  (Hereinafter, translation is
+included without limitation in the term "modification".)
+
+  "Source code" for a work means the preferred form of the work for
+making modifications to it.  For a library, complete source code means
+all the source code for all modules it contains, plus any associated
+interface definition files, plus the scripts used to control compilation
+and installation of the library.
+
+  Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running a program using the Library is not restricted, and output from
+such a program is covered only if its contents constitute a work based
+on the Library (independent of the use of the Library in a tool for
+writing it).  Whether that is true depends on what the Library does
+and what the program that uses the Library does.
+
+  1. You may copy and distribute verbatim copies of the Library's
+complete source code as you receive it, in any medium, provided that
+you conspicuously and appropriately publish on each copy an
+appropriate copyright notice and disclaimer of warranty; keep intact
+all the notices that refer to this License and to the absence of any
+warranty; and distribute a copy of this License along with the
+Library.
+
+  You may charge a fee for the physical act of transferring a copy,
+and you may at your option offer warranty protection in exchange for a
+fee.
+
+  2. You may modify your copy or copies of the Library or any portion
+of it, thus forming a work based on the Library, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) The modified work must itself be a software library.
+
+    b) You must cause the files modified to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    c) You must cause the whole of the work to be licensed at no
+    charge to all third parties under the terms of this License.
+
+    d) If a facility in the modified Library refers to a function or a
+    table of data to be supplied by an application program that uses
+    the facility, other than as an argument passed when the facility
+    is invoked, then you must make a good faith effort to ensure that,
+    in the event an application does not supply such function or
+    table, the facility still operates, and performs whatever part of
+    its purpose remains meaningful.
+
+    (For example, a function in a library to compute square roots has
+    a purpose that is entirely well-defined independent of the
+    application.  Therefore, Subsection 2d requires that any
+    application-supplied function or table used by this function must
+    be optional: if the application does not supply it, the square
+    root function must still compute square roots.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Library,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Library, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote
+it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Library.
+
+In addition, mere aggregation of another work not based on the Library
+with the Library (or with a work based on the Library) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may opt to apply the terms of the ordinary GNU General Public
+License instead of this License to a given copy of the Library.  To do
+this, you must alter all the notices that refer to this License, so
+that they refer to the ordinary GNU General Public License, version 2,
+instead of to this License.  (If a newer version than version 2 of the
+ordinary GNU General Public License has appeared, then you can specify
+that version instead if you wish.)  Do not make any other change in
+these notices.
+
+  Once this change is made in a given copy, it is irreversible for
+that copy, so the ordinary GNU General Public License applies to all
+subsequent copies and derivative works made from that copy.
+
+  This option is useful when you wish to copy part of the code of
+the Library into a program that is not a library.
+
+  4. You may copy and distribute the Library (or a portion or
+derivative of it, under Section 2) in object code or executable form
+under the terms of Sections 1 and 2 above provided that you accompany
+it with the complete corresponding machine-readable source code, which
+must be distributed under the terms of Sections 1 and 2 above on a
+medium customarily used for software interchange.
+
+  If distribution of object code is made by offering access to copy
+from a designated place, then offering equivalent access to copy the
+source code from the same place satisfies the requirement to
+distribute the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  5. A program that contains no derivative of any portion of the
+Library, but is designed to work with the Library by being compiled or
+linked with it, is called a "work that uses the Library".  Such a
+work, in isolation, is not a derivative work of the Library, and
+therefore falls outside the scope of this License.
+
+  However, linking a "work that uses the Library" with the Library
+creates an executable that is a derivative of the Library (because it
+contains portions of the Library), rather than a "work that uses the
+library".  The executable is therefore covered by this License.
+Section 6 states terms for distribution of such executables.
+
+  When a "work that uses the Library" uses material from a header file
+that is part of the Library, the object code for the work may be a
+derivative work of the Library even though the source code is not.
+Whether this is true is especially significant if the work can be
+linked without the Library, or if the work is itself a library.  The
+threshold for this to be true is not precisely defined by law.
+
+  If such an object file uses only numerical parameters, data
+structure layouts and accessors, and small macros and small inline
+functions (ten lines or less in length), then the use of the object
+file is unrestricted, regardless of whether it is legally a derivative
+work.  (Executables containing this object code plus portions of the
+Library will still fall under Section 6.)
+
+  Otherwise, if the work is a derivative of the Library, you may
+distribute the object code for the work under the terms of Section 6.
+Any executables containing that work also fall under Section 6,
+whether or not they are linked directly with the Library itself.
+
+  6. As an exception to the Sections above, you may also combine or
+link a "work that uses the Library" with the Library to produce a
+work containing portions of the Library, and distribute that work
+under terms of your choice, provided that the terms permit
+modification of the work for the customer's own use and reverse
+engineering for debugging such modifications.
+
+  You must give prominent notice with each copy of the work that the
+Library is used in it and that the Library and its use are covered by
+this License.  You must supply a copy of this License.  If the work
+during execution displays copyright notices, you must include the
+copyright notice for the Library among them, as well as a reference
+directing the user to the copy of this License.  Also, you must do one
+of these things:
+
+    a) Accompany the work with the complete corresponding
+    machine-readable source code for the Library including whatever
+    changes were used in the work (which must be distributed under
+    Sections 1 and 2 above); and, if the work is an executable linked
+    with the Library, with the complete machine-readable "work that
+    uses the Library", as object code and/or source code, so that the
+    user can modify the Library and then relink to produce a modified
+    executable containing the modified Library.  (It is understood
+    that the user who changes the contents of definitions files in the
+    Library will not necessarily be able to recompile the application
+    to use the modified definitions.)
+
+    b) Use a suitable shared library mechanism for linking with the
+    Library.  A suitable mechanism is one that (1) uses at run time a
+    copy of the library already present on the user's computer system,
+    rather than copying library functions into the executable, and (2)
+    will operate properly with a modified version of the library, if
+    the user installs one, as long as the modified version is
+    interface-compatible with the version that the work was made with.
+
+    c) Accompany the work with a written offer, valid for at
+    least three years, to give the same user the materials
+    specified in Subsection 6a, above, for a charge no more
+    than the cost of performing this distribution.
+
+    d) If distribution of the work is made by offering access to copy
+    from a designated place, offer equivalent access to copy the above
+    specified materials from the same place.
+
+    e) Verify that the user has already received a copy of these
+    materials or that you have already sent this user a copy.
+
+  For an executable, the required form of the "work that uses the
+Library" must include any data and utility programs needed for
+reproducing the executable from it.  However, as a special exception,
+the materials to be distributed need not include anything that is
+normally distributed (in either source or binary form) with the major
+components (compiler, kernel, and so on) of the operating system on
+which the executable runs, unless that component itself accompanies
+the executable.
+
+  It may happen that this requirement contradicts the license
+restrictions of other proprietary libraries that do not normally
+accompany the operating system.  Such a contradiction means you cannot
+use both them and the Library together in an executable that you
+distribute.
+
+  7. You may place library facilities that are a work based on the
+Library side-by-side in a single library together with other library
+facilities not covered by this License, and distribute such a combined
+library, provided that the separate distribution of the work based on
+the Library and of the other library facilities is otherwise
+permitted, and provided that you do these two things:
+
+    a) Accompany the combined library with a copy of the same work
+    based on the Library, uncombined with any other library
+    facilities.  This must be distributed under the terms of the
+    Sections above.
+
+    b) Give prominent notice with the combined library of the fact
+    that part of it is a work based on the Library, and explaining
+    where to find the accompanying uncombined form of the same work.
+
+  8. You may not copy, modify, sublicense, link with, or distribute
+the Library except as expressly provided under this License.  Any
+attempt otherwise to copy, modify, sublicense, link with, or
+distribute the Library is void, and will automatically terminate your
+rights under this License.  However, parties who have received copies,
+or rights, from you under this License will not have their licenses
+terminated so long as such parties remain in full compliance.
+
+  9. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Library or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Library (or any work based on the
+Library), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Library or works based on it.
+
+  10. Each time you redistribute the Library (or any work based on the
+Library), the recipient automatically receives a license from the
+original licensor to copy, distribute, link with or modify the Library
+subject to these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties with
+this License.
+
+  11. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Library at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Library by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Library.
+
+If any portion of this section is held invalid or unenforceable under any
+particular circumstance, the balance of the section is intended to apply,
+and the section as a whole is intended to apply in other circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  12. If the distribution and/or use of the Library is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Library under this License may add
+an explicit geographical distribution limitation excluding those countries,
+so that distribution is permitted only in or among countries not thus
+excluded.  In such case, this License incorporates the limitation as if
+written in the body of this License.
+
+  13. The Free Software Foundation may publish revised and/or new
+versions of the Lesser General Public License from time to time.
+Such new versions will be similar in spirit to the present version,
+but may differ in detail to address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Library
+specifies a version number of this License which applies to it and
+"any later version", you have the option of following the terms and
+conditions either of that version or of any later version published by
+the Free Software Foundation.  If the Library does not specify a
+license version number, you may choose any version ever published by
+the Free Software Foundation.
+
+  14. If you wish to incorporate parts of the Library into other free
+programs whose distribution conditions are incompatible with these,
+write to the author to ask for permission.  For software which is
+copyrighted by the Free Software Foundation, write to the Free
+Software Foundation; we sometimes make exceptions for this.  Our
+decision will be guided by the two goals of preserving the free status
+of all derivatives of our free software and of promoting the sharing
+and reuse of software generally.
+
+                            NO WARRANTY
+
+  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
+WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.
+EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR
+OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY OF ANY
+KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
+LIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME
+THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
+WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY
+AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU
+FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
+CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
+LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
+RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
+FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
+SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
+DAMAGES.
+
+                     END OF TERMS AND CONDITIONS
+
+           How to Apply These Terms to Your New Libraries
+
+  If you develop a new library, and you want it to be of the greatest
+possible use to the public, we recommend making it free software that
+everyone can redistribute and change.  You can do so by permitting
+redistribution under these terms (or, alternatively, under the terms of the
+ordinary General Public License).
+
+  To apply these terms, attach the following notices to the library.  It is
+safest to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least the
+"copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the library's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Lesser General Public
+    License as published by the Free Software Foundation; either
+    version 2.1 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Lesser General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public
+    License along with this library; if not, write to the Free Software
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+Also add information on how to contact you by electronic and paper mail.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the library, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the
+  library `Frob' (a library for tweaking knobs) written by James Random Hacker.
+
+  <signature of Ty Coon>, 1 April 1990
+  Ty Coon, President of Vice
+
+That's all there is to it!
+
+
diff --git a/COPYING-MIT b/COPYING-MIT
new file mode 100644
index 0000000..3a19f22
--- /dev/null
+++ b/COPYING-MIT
@@ -0,0 +1,22 @@
+COPYRIGHT AND PERMISSION NOTICE
+
+Copyright (C) 2001-2008 by Kjetil Jacobsen <kjetilja at gmail.com>
+Copyright (C) 2001-2008 by Markus F.X.J. Oberhumer <markus at oberhumer.com>
+
+All rights reserved.
+
+Permission to use, copy, modify, and distribute this software for any purpose
+with or without fee is hereby granted, provided that the above copyright
+notice and this permission notice appear in all copies.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. IN
+NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
+OR OTHER DEALINGS IN THE SOFTWARE.
+
+Except as contained in this notice, the name of a copyright holder shall not
+be used in advertising or otherwise to promote the sale, use or other dealings
+in this Software without prior written authorization of the copyright holder.
diff --git a/COPYING2 b/COPYING2
deleted file mode 100644
index 3a19f22..0000000
--- a/COPYING2
+++ /dev/null
@@ -1,22 +0,0 @@
-COPYRIGHT AND PERMISSION NOTICE
-
-Copyright (C) 2001-2008 by Kjetil Jacobsen <kjetilja at gmail.com>
-Copyright (C) 2001-2008 by Markus F.X.J. Oberhumer <markus at oberhumer.com>
-
-All rights reserved.
-
-Permission to use, copy, modify, and distribute this software for any purpose
-with or without fee is hereby granted, provided that the above copyright
-notice and this permission notice appear in all copies.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. IN
-NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
-OR OTHER DEALINGS IN THE SOFTWARE.
-
-Except as contained in this notice, the name of a copyright holder shall not
-be used in advertising or otherwise to promote the sale, use or other dealings
-in this Software without prior written authorization of the copyright holder.
-- 
1.7.1


From b0e08e3c9e16e275b41d9acd1f36f85570b493d2 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 15 Dec 2013 20:07:09 -0500
Subject: [PATCH 145/236] Chase copying renames

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 MANIFEST.in |    4 ++--
 README.rst  |    4 ++--
 setup.py    |    2 +-
 3 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/MANIFEST.in b/MANIFEST.in
index 2301703..4fdb749 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -3,8 +3,8 @@
 # Manifest template for creating the source distribution.
 #
 
-include COPYING
-include COPYING2
+include COPYING-LGPL
+include COPYING-MIT
 include ChangeLog
 include INSTALL
 include MANIFEST.in
diff --git a/README.rst b/README.rst
index e67f259..bd2abac 100644
--- a/README.rst
+++ b/README.rst
@@ -169,8 +169,8 @@ License
 
     PycURL is dual licensed under the LGPL and an MIT/X derivative license
     based on the cURL license.  A full copy of the LGPL license is included
-    in the file COPYING.  A full copy of the MIT/X derivative license is
-    included in the file COPYING2.  You can redistribute and/or modify PycURL
+    in the file COPYING-LGPL.  A full copy of the MIT/X derivative license is
+    included in the file COPYING-MIT.  You can redistribute and/or modify PycURL
     according to the terms of either license.
 
 .. _PycURL: http://pycurl.sourceforge.net/
diff --git a/setup.py b/setup.py
index 35a5987..5403278 100644
--- a/setup.py
+++ b/setup.py
@@ -252,7 +252,7 @@ def get_data_files():
     else:
         datadir = os.path.join("share", "doc", PACKAGE)
     #
-    files = ["ChangeLog", "COPYING", "COPYING2", "INSTALL", "README.rst", "TODO",]
+    files = ["ChangeLog", "COPYING-LGPL", "COPYING-MIT", "INSTALL", "README.rst", "TODO",]
     if files:
         data_files.append((os.path.join(datadir), files))
     files = glob.glob(os.path.join("doc", "*.html"))
-- 
1.7.1


From a0e85493395a9305d381ae66a4d0097bf6c80e02 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 15 Dec 2013 16:04:16 -0500
Subject: [PATCH 146/236] PyUnicode_AsStringAndSize should only be defined on python 3

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 0616fda..53f8c0a 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -331,6 +331,7 @@ typedef struct {
 // python utility functions
 **************************************************************************/
 
+#if PY_MAJOR_VERSION >= 3
 int PyUnicode_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length, PyObject **encoded_obj)
 {
     if (PyBytes_Check(obj)) {
@@ -350,6 +351,7 @@ int PyUnicode_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length,
         return rv;
     }
 }
+#endif
 
 
 /* Like PyString_AsString(), but set an exception if the string contains
-- 
1.7.1


From 4b4aa645c0024904561144dcd2f12c3c1d736d1d Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 15 Dec 2013 16:08:25 -0500
Subject: [PATCH 147/236] Do not import pycurl globally.

Doing this prevents appmanager from being run in a clean python environment.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/util.py |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/tests/util.py b/tests/util.py
index 6b8e577..1c88102 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -3,7 +3,6 @@
 
 import os, sys, socket
 import time as _time
-import pycurl
 
 py3 = sys.version_info[0] == 3
 
@@ -28,6 +27,8 @@ def version_less_than_spec(version_tuple, spec_tuple):
     return False
 
 def pycurl_version_less_than(*spec):
+    import pycurl
+    
     version = [int(part) for part in pycurl.version_info()[1].split('.')]
     return version_less_than_spec(version, spec)
 
-- 
1.7.1


From b757b1b19275fe2c60b7b42c01be9256c51989e4 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 15 Dec 2013 20:54:56 -0500
Subject: [PATCH 148/236] Python 2 and 3 are both supported now

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/setup.py b/setup.py
index 5403278..e8ef097 100644
--- a/setup.py
+++ b/setup.py
@@ -298,7 +298,8 @@ setup_args = dict(
         'License :: OSI Approved :: MIT License',
         'Operating System :: Microsoft :: Windows',
         'Operating System :: POSIX',
-        'Programming Language :: Python',
+        'Programming Language :: Python :: 2',
+        'Programming Language :: Python :: 3',
         'Topic :: Internet :: File Transfer Protocol (FTP)',
         'Topic :: Internet :: WWW/HTTP',
     ],
-- 
1.7.1


From 99a357cf82b38a93c1de6065e98ba149b9dd51e9 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 16 Dec 2013 04:22:54 -0500
Subject: [PATCH 149/236] Use uniform "from . import xxx" syntax for ease of patching

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/internals_test.py |   11 ++++++-----
 1 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/tests/internals_test.py b/tests/internals_test.py
index d09e881..c0b8432 100644
--- a/tests/internals_test.py
+++ b/tests/internals_test.py
@@ -4,7 +4,6 @@
 
 import pycurl
 import unittest
-from .util import StringIO
 try:
     import cPickle
 except ImportError:
@@ -12,6 +11,8 @@ except ImportError:
 import pickle
 import copy
 
+from . import util
+
 class InternalsTest(unittest.TestCase):
     def setUp(self):
         self.curl = pycurl.Curl()
@@ -116,7 +117,7 @@ class InternalsTest(unittest.TestCase):
             assert False, "No exception when trying to copy a CurlMulti handle"
     
     def test_pickle_curl(self):
-        fp = StringIO()
+        fp = util.StringIO()
         p = pickle.Pickler(fp, 1)
         try:
             p.dump(self.curl)
@@ -129,7 +130,7 @@ class InternalsTest(unittest.TestCase):
     
     def test_pickle_multi(self):
         m = pycurl.CurlMulti()
-        fp = StringIO()
+        fp = util.StringIO()
         p = pickle.Pickler(fp, 1)
         try:
             p.dump(m)
@@ -141,7 +142,7 @@ class InternalsTest(unittest.TestCase):
     
     if cPickle is not None:
         def test_cpickle_curl(self):
-            fp = StringIO()
+            fp = util.StringIO()
             p = cPickle.Pickler(fp, 1)
             try:
                 p.dump(self.curl)
@@ -153,7 +154,7 @@ class InternalsTest(unittest.TestCase):
         
         def test_cpickle_multi(self):
             m = pycurl.CurlMulti()
-            fp = StringIO()
+            fp = util.StringIO()
             p = cPickle.Pickler(fp, 1)
             try:
                 p.dump(m)
-- 
1.7.1


From fe0839322f140354342669a36724c160e069b037 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 16 Dec 2013 04:27:17 -0500
Subject: [PATCH 150/236] functools backport for python 2.4

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/functools_backport.py |   58 +++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 58 insertions(+), 0 deletions(-)
 create mode 100644 tests/functools_backport.py

diff --git a/tests/functools_backport.py b/tests/functools_backport.py
new file mode 100644
index 0000000..8e63500
--- /dev/null
+++ b/tests/functools_backport.py
@@ -0,0 +1,58 @@
+# partial implementation from
+# http://stackoverflow.com/questions/12274814/functools-wraps-for-python-2-4
+
+def partial(func, *args, **kwds):
+    """Emulate Python2.6's functools.partial"""
+    return lambda *fargs, **fkwds: func(*(args+fargs), **dict(kwds, **fkwds))
+
+# functools from python 2.5
+
+"""functools.py - Tools for working with functions and callable objects
+"""
+# Python module wrapper for _functools C module
+# to allow utilities written in Python to be added
+# to the functools module.
+# Written by Nick Coghlan <ncoghlan at gmail.com>
+#   Copyright (C) 2006 Python Software Foundation.
+# See C source code for _functools credits/copyright
+
+# update_wrapper() and wraps() are tools to help write
+# wrapper functions that can handle naive introspection
+
+WRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__doc__')
+WRAPPER_UPDATES = ('__dict__',)
+def update_wrapper(wrapper,
+                   wrapped,
+                   assigned = WRAPPER_ASSIGNMENTS,
+                   updated = WRAPPER_UPDATES):
+    """Update a wrapper function to look like the wrapped function
+
+       wrapper is the function to be updated
+       wrapped is the original function
+       assigned is a tuple naming the attributes assigned directly
+       from the wrapped function to the wrapper function (defaults to
+       functools.WRAPPER_ASSIGNMENTS)
+       updated is a tuple naming the attributes off the wrapper that
+       are updated with the corresponding attribute from the wrapped
+       function (defaults to functools.WRAPPER_UPDATES)
+    """
+    for attr in assigned:
+        setattr(wrapper, attr, getattr(wrapped, attr))
+    for attr in updated:
+        getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
+    # Return the wrapper so this can be used as a decorator via partial()
+    return wrapper
+
+def wraps(wrapped,
+          assigned = WRAPPER_ASSIGNMENTS,
+          updated = WRAPPER_UPDATES):
+    """Decorator factory to apply update_wrapper() to a wrapper function
+
+       Returns a decorator that invokes update_wrapper() with the decorated
+       function as the wrapper argument and the arguments to wraps() as the
+       remaining arguments. Default arguments are as for update_wrapper().
+       This is a convenience function to simplify applying partial() to
+       update_wrapper().
+    """
+    return partial(update_wrapper, wrapped=wrapped,
+                   assigned=assigned, updated=updated)
-- 
1.7.1


From 51dcdb8b69cbc499ac2166901d8847a2e35b5bde Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 16 Dec 2013 04:27:56 -0500
Subject: [PATCH 151/236] Use functools backport if functools is not available (python 2.4)

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/util.py |    6 ++++--
 1 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/tests/util.py b/tests/util.py
index 1c88102..ce4190b 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -3,6 +3,10 @@
 
 import os, sys, socket
 import time as _time
+try:
+    import functools
+except ImportError:
+    import functools_backport as functools
 
 py3 = sys.version_info[0] == 3
 
@@ -34,7 +38,6 @@ def pycurl_version_less_than(*spec):
 
 def only_python3(fn):
     import nose.plugins.skip
-    import functools
     
     @functools.wraps(fn)
     def decorated(*args, **kwargs):
@@ -47,7 +50,6 @@ def only_python3(fn):
 
 def min_libcurl(major, minor, patch):
     import nose.plugins.skip
-    import functools
     
     def decorator(fn):
         @functools.wraps(fn)
-- 
1.7.1


From 25dcd7b74878c10126fb7149cba1fc260c3a4648 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 11 Dec 2013 13:45:16 -0800
Subject: [PATCH 152/236] msvc seems to have a hard time with quoted defines

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   12 ++++++++++--
 1 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 53f8c0a..966a3bd 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -207,9 +207,17 @@ static void pycurl_ssl_cleanup(void);
     (PYCURL_MEMGROUP_ATTRDICT | PYCURL_MEMGROUP_EASY | \
     PYCURL_MEMGROUP_MULTI | PYCURL_MEMGROUP_SHARE)
 
+#if defined(WIN32)
+# define PYCURL_STRINGIZE_IMP(x) #x
+# define PYCURL_STRINGIZE(x) PYCURL_STRINGIZE_IMP(x)
+# define PYCURL_VERSION_STRING PYCURL_STRINGIZE(PYCURL_VERSION)
+#else
+# define PYCURL_VERSION_STRING PYCURL_VERSION
+#endif
+
 /* Keep some default variables around */
 static const char g_pycurl_useragent [] =
-    "PycURL/" PYCURL_VERSION " libcurl/" LIBCURL_VERSION;
+    "PycURL/" PYCURL_VERSION_STRING " libcurl/" LIBCURL_VERSION;
 
 /* Type objects */
 static PyObject *ErrorObject = NULL;
@@ -4428,7 +4436,7 @@ initpycurl(void)
 
     /* Add version strings to the module */
     insobj2(d, NULL, "version",
-            PyText_FromFormat("PycURL/" PYCURL_VERSION " %s", curl_version()));
+            PyText_FromFormat("PycURL/" PYCURL_VERSION_STRING " %s", curl_version()));
     insstr(d, "COMPILE_DATE", __DATE__ " " __TIME__);
     insint(d, "COMPILE_PY_VERSION_HEX", PY_VERSION_HEX);
     insint(d, "COMPILE_LIBCURL_VERSION_NUM", LIBCURL_VERSION_NUM);
-- 
1.7.1


From f2a5e99e8d025589a4088a115e65da1d3152d66a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 17 Dec 2013 14:31:57 -0800
Subject: [PATCH 153/236] Free nencoded_obj, thanks msvc build

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 966a3bd..88f253b 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -2507,11 +2507,13 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                     }
                 } else {
                     /* Some other type was given, ignore */
+                    PyText_EncodedDecref(nencoded_obj);
                     curl_formfree(post);
                     Py_XDECREF(ref_params);
                     PyErr_SetString(PyExc_TypeError, "unsupported second type in tuple");
                     return NULL;
                 }
+                PyText_EncodedDecref(nencoded_obj);
             }
             res = curl_easy_setopt(self->handle, CURLOPT_HTTPPOST, post);
             /* Check for errors */
-- 
1.7.1


From ba15ea288f67627345ee9dcf65115ed8c20425d4 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 17 Dec 2013 14:33:39 -0800
Subject: [PATCH 154/236] Silence unused variable warning

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    5 ++++-
 1 files changed, 4 insertions(+), 1 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 88f253b..52d4665 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -330,7 +330,10 @@ typedef struct {
  */
 # define PyText_AsStringAndSize(obj, buffer, length, encoded_obj) PyString_AsStringAndSize((obj), (buffer), (length))
 # define PyText_AsString_NoNUL(obj, encoded_obj) PyString_AsString_NoNUL(obj)
-# define PyText_EncodedDecref(encoded) ((void) 0)
+/* unused variable warning on the encoded object means you did not call
+ * PyText_EncodedDecref on it and it will leak in python 3.
+ */
+# define PyText_EncodedDecref(encoded) ((void) (encoded))
 # define PyByteStr_AsStringAndSize(obj, buffer, length) PyString_AsStringAndSize((obj), (buffer), (length))
 #endif
 
-- 
1.7.1


From 6a560d33697b2806723dff531c18cdb4a231129d Mon Sep 17 00:00:00 2001
From: Romuald Brunet <romuald@gandi.net>
Date: Wed, 18 Dec 2013 12:26:23 +0100
Subject: [PATCH 155/236] Add CURLE_OPERATION_TIMEDOUT (28) from libcurl

This is the same constant as the "deprecated" CURLE_OPERATION_TIMEOUTED
which is not in libcurl documentation anymore.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 52d4665..fbd2526 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -4503,6 +4503,7 @@ initpycurl(void)
     insint_c(d, "E_READ_ERROR", CURLE_READ_ERROR);
     insint_c(d, "E_OUT_OF_MEMORY", CURLE_OUT_OF_MEMORY);
     insint_c(d, "E_OPERATION_TIMEOUTED", CURLE_OPERATION_TIMEOUTED);
+    insint_c(d, "E_OPERATION_TIMEDOUT", CURLE_OPERATION_TIMEDOUT);
     insint_c(d, "E_FTP_COULDNT_SET_ASCII", CURLE_FTP_COULDNT_SET_ASCII);
     insint_c(d, "E_FTP_PORT_FAILED", CURLE_FTP_PORT_FAILED);
     insint_c(d, "E_FTP_COULDNT_USE_REST", CURLE_FTP_COULDNT_USE_REST);
-- 
1.7.1


From d4fb6942f800fdd46cb76198054f8bc8699fcb23 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 18 Dec 2013 16:32:36 -0500
Subject: [PATCH 156/236] Limit _WIN32_WINNT to windows xp for inet_ntop fallback to be compiled

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    8 ++++++++
 1 files changed, 8 insertions(+), 0 deletions(-)

diff --git a/setup.py b/setup.py
index e8ef097..636c233 100644
--- a/setup.py
+++ b/setup.py
@@ -90,6 +90,14 @@ if sys.platform == "win32":
     extra_objects.append(libcurl_lib_path)
     extra_link_args.extend(["gdi32.lib", "wldap32.lib", "winmm.lib", "ws2_32.lib",])
     add_libdirs("LIB", ";")
+    
+    # make pycurl binary work on windows xp.
+    # we use inet_ntop which was added in vista and implement a fallback.
+    # our implementation will not be compiled with _WIN32_WINNT targeting
+    # vista or above, thus said binary won't work on xp.
+    # http://curl.haxx.se/mail/curlpython-2013-12/0007.html
+    extra_compile_args.append("-D_WIN32_WINNT=0x0501")
+
     if str.find(sys.version, "MSC") >= 0:
         extra_compile_args.append("-O2")
         extra_compile_args.append("-GF")        # enable read-only string pooling
-- 
1.7.1


From 54117e53092e6ee29b4b8cf17fefe43f08d74f45 Mon Sep 17 00:00:00 2001
From: Gisle Vanem <gvanem@yahoo.no>
Date: Wed, 18 Dec 2013 16:34:24 -0500
Subject: [PATCH 157/236] Fix pycurl compilation when inet_ntop fallback is compiled

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index fbd2526..1a6c84e 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -4970,14 +4970,14 @@ static const char * pycurl_inet_ntop (int family, void *addr, char *string, size
     if (family == AF_INET6) {
         struct sockaddr_in6 sa6;
         memset(&sa6, 0, sizeof(sa6));
-        sa6.sa_family = AF_INET6;
+        sa6.sin6_family = AF_INET6;
         memcpy(&sa6.sin6_addr, addr, sizeof(sa6.sin6_addr));
         sa = (SOCKADDR*) &sa6;
         sa_len = sizeof(sa6);
     } else if (family == AF_INET) {
         struct sockaddr_in sa4;
         memset(&sa4, 0, sizeof(sa4));
-        sa4.sa_family = AF_INET;
+        sa4.sin_family = AF_INET;
         memcpy(&sa4.sin_addr, addr, sizeof(sa4.sin_addr));
         sa = (SOCKADDR*) &sa4;
         sa_len = sizeof(sa4);
-- 
1.7.1


From c944bac5783d1d2b0513e9754c6903eccc4a3578 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 18 Dec 2013 23:57:49 -0500
Subject: [PATCH 158/236] Accept boolean options in setup.py

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   10 ++++++++--
 1 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/setup.py b/setup.py
index 636c233..6f6d3b4 100644
--- a/setup.py
+++ b/setup.py
@@ -45,8 +45,14 @@ def scan_argv(s, default):
     while i < len(sys.argv):
         arg = sys.argv[i]
         if str.find(arg, s) == 0:
-            p = arg[len(s):]
-            assert p, arg
+            if s.endswith('='):
+                # --option=value
+                p = arg[len(s):]
+                assert p, arg
+            else:
+                # --option
+                # set value to True
+                p = True
             del sys.argv[i]
         else:
             i = i + 1
-- 
1.7.1


From 853ebfea60564763ceaea8eedebdf2359cf3bfeb Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 19 Dec 2013 00:01:22 -0500
Subject: [PATCH 159/236] Default to None so that boolean options have the proper API

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    8 ++++----
 1 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/setup.py b/setup.py
index 6f6d3b4..0fbae21 100644
--- a/setup.py
+++ b/setup.py
@@ -39,7 +39,7 @@ def fail(msg):
     exit(10)
 
 
-def scan_argv(s, default):
+def scan_argv(s, default=None):
     p = default
     i = 1
     while i < len(sys.argv):
@@ -81,7 +81,7 @@ if sys.platform == "win32":
     # Windows users have to configure the curl_dir path parameter to match
     # their cURL source installation.  The path set here is just an example
     # and thus unlikely to match your installation.
-    curl_dir = scan_argv("--curl-dir=", None)
+    curl_dir = scan_argv("--curl-dir=")
     if curl_dir is None:
         fail("Please specify --curl-dir=/path/to/built/libcurl")
     if not os.path.exists(curl_dir):
@@ -147,8 +147,8 @@ if sys.platform == "win32":
                 bdist_msi.run(self)
 else:
     # Find out the rest the hard way
-    OPENSSL_DIR = scan_argv("--openssl-dir=", "")
-    if OPENSSL_DIR != "":
+    OPENSSL_DIR = scan_argv("--openssl-dir=")
+    if OPENSSL_DIR is not None:
         include_dirs.append(os.path.join(OPENSSL_DIR, "include"))
     CURL_CONFIG = os.environ.get('PYCURL_CURL_CONFIG', "curl-config")
     CURL_CONFIG = scan_argv("--curl-config=", CURL_CONFIG)
-- 
1.7.1


From 992239f958a8df5d7c95c1722e3d9112cf8d545b Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 19 Dec 2013 00:05:33 -0500
Subject: [PATCH 160/236] Implement --use-curl-dll option for building a dll on windows

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   14 ++++++++++++--
 1 files changed, 12 insertions(+), 2 deletions(-)

diff --git a/setup.py b/setup.py
index 0fbae21..8a4a11a 100644
--- a/setup.py
+++ b/setup.py
@@ -90,11 +90,21 @@ if sys.platform == "win32":
         fail("Curl directory is not a directory: %s" % curl_dir)
     print("Using curl directory: %s" % curl_dir)
     include_dirs.append(os.path.join(curl_dir, "include"))
-    libcurl_lib_path = os.path.join(curl_dir, "lib", "libcurl.lib")
+
+    if scan_argv("--use-curl-dll") is not None:
+        extra_compile_args.append("-DPYCURL_USE_LIBCURL_DLL")
+        libcurl_lib_path = os.path.join(curl_dir, "lib", "libcurl.lib")
+        extra_link_args.extend(["ws2_32.lib"])
+        if str.find(sys.version, "MSC") >= 0:
+            # build a dll
+            extra_compile_args.append("-MD")
+    else:
+        libcurl_lib_path = os.path.join(curl_dir, "lib", "libcurl.lib")
+        extra_link_args.extend(["gdi32.lib", "wldap32.lib", "winmm.lib", "ws2_32.lib",])
+
     if not os.path.exists(libcurl_lib_path):
         fail("libcurl.lib does not exist at %s.\nCurl directory must point to compiled libcurl (bin/include/lib subdirectories): %s" %(libcurl_lib_path, curl_dir))
     extra_objects.append(libcurl_lib_path)
-    extra_link_args.extend(["gdi32.lib", "wldap32.lib", "winmm.lib", "ws2_32.lib",])
     add_libdirs("LIB", ";")
     
     # make pycurl binary work on windows xp.
-- 
1.7.1


From cc864ec368798dc48cdf107765c92f776fae5c84 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 19 Dec 2013 00:08:21 -0500
Subject: [PATCH 161/236] Allow libcurl library name to be overridden on windows

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   10 ++++++++--
 1 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/setup.py b/setup.py
index 8a4a11a..837fbb2 100644
--- a/setup.py
+++ b/setup.py
@@ -91,15 +91,21 @@ if sys.platform == "win32":
     print("Using curl directory: %s" % curl_dir)
     include_dirs.append(os.path.join(curl_dir, "include"))
 
+    # libcurl windows documentation states that for linking against libcurl
+    # dll, the import library name is libcurl_imp.lib.
+    # in practice, the library name sometimes is libcurl.lib.
+    # override with: --curl-lib-name=libcurl_imp.lib
+    curl_lib_name = scan_argv('--curl-lib-name=', 'libcurl.lib')
+
     if scan_argv("--use-curl-dll") is not None:
         extra_compile_args.append("-DPYCURL_USE_LIBCURL_DLL")
-        libcurl_lib_path = os.path.join(curl_dir, "lib", "libcurl.lib")
+        libcurl_lib_path = os.path.join(curl_dir, "lib", curl_lib_name)
         extra_link_args.extend(["ws2_32.lib"])
         if str.find(sys.version, "MSC") >= 0:
             # build a dll
             extra_compile_args.append("-MD")
     else:
-        libcurl_lib_path = os.path.join(curl_dir, "lib", "libcurl.lib")
+        libcurl_lib_path = os.path.join(curl_dir, "lib", curl_lib_name)
         extra_link_args.extend(["gdi32.lib", "wldap32.lib", "winmm.lib", "ws2_32.lib",])
 
     if not os.path.exists(libcurl_lib_path):
-- 
1.7.1


From e81416ed9bf91c67a2b95062801f925ef55492a7 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 19 Dec 2013 07:14:01 -0500
Subject: [PATCH 162/236] Kill PYCURL_USE_LIBCURL_DLL, define CURL_STATICLIB sensibly, update changelog

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py     |    2 +-
 src/pycurl.c |    3 ---
 2 files changed, 1 insertions(+), 4 deletions(-)

diff --git a/setup.py b/setup.py
index 837fbb2..8cf5a66 100644
--- a/setup.py
+++ b/setup.py
@@ -98,13 +98,13 @@ if sys.platform == "win32":
     curl_lib_name = scan_argv('--curl-lib-name=', 'libcurl.lib')
 
     if scan_argv("--use-curl-dll") is not None:
-        extra_compile_args.append("-DPYCURL_USE_LIBCURL_DLL")
         libcurl_lib_path = os.path.join(curl_dir, "lib", curl_lib_name)
         extra_link_args.extend(["ws2_32.lib"])
         if str.find(sys.version, "MSC") >= 0:
             # build a dll
             extra_compile_args.append("-MD")
     else:
+        extra_compile_args.append("-DCURL_STATICLIB")
         libcurl_lib_path = os.path.join(curl_dir, "lib", curl_lib_name)
         extra_link_args.extend(["gdi32.lib", "wldap32.lib", "winmm.lib", "ws2_32.lib",])
 
diff --git a/src/pycurl.c b/src/pycurl.c
index 1a6c84e..0c8b399 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -35,9 +35,6 @@
 #if (defined(_WIN32) || defined(__WIN32__)) && !defined(WIN32)
 #  define WIN32 1
 #endif
-#if defined(WIN32) && !defined(PYCURL_USE_LIBCURL_DLL)
-#  define CURL_STATICLIB 1
-#endif
 #include <Python.h>
 #include <pythread.h>
 #include <stddef.h>
-- 
1.7.1


From af70a1d822acbbc71af3ff0b4babc4447815dd0a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 19 Dec 2013 07:19:09 -0500
Subject: [PATCH 163/236] Document windows pycurl build options in the readme

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 INSTALL |   12 +++++++++++-
 1 files changed, 11 insertions(+), 1 deletions(-)

diff --git a/INSTALL b/INSTALL
index 17c7d06..75a64d1 100644
--- a/INSTALL
+++ b/INSTALL
@@ -40,10 +40,20 @@ For a minimum build you will just need libcurl source. Follow its Windows
 build instructions to build either a static or a DLL version of the library,
 then configure PycURL as follows to use it:
 
-    python setup.py --curl-dir=c:\dev\curl-7.33.0\builds\libcurl-vc-x86-release-dll-ipv6-sspi-spnego-winssl
+    python setup.py --curl-dir=c:\dev\curl-7.33.0\builds\libcurl-vc-x86-release-dll-ipv6-sspi-spnego-winssl --use-curl-dll
 
 Note that --curl-dir does not point to libcurl source but rather to headers
 and compiled libraries.
 
+Additional Windows setup.py options:
+
+--use-curl-dll - build against libcurl DLL, if not given PycURL will be built
+against libcurl statically.
+
+--curl-lib-name=libcurl_imp.lib - specify a different name for libcurl import
+library. The default is libcurl.lib which is appropriate for static linking
+and is sometimes the correct choice for dynamic linking as well. The other
+possibility for dynamic linking is libcurl_imp.lib.
+
 A good setup.py target to use is bdist_wininst which produces an executable
 installer that you can run to install PycURL.
-- 
1.7.1


From d898b133e49d6e9524c87aaed0ed36b354f56236 Mon Sep 17 00:00:00 2001
From: Gisle Vanem <gvanem@yahoo.no>
Date: Thu, 19 Dec 2013 07:28:13 -0500
Subject: [PATCH 164/236] Do not copy directories from LIB environment variable to options.

This is redundant as compiler checks the environment variable.

http://curl.haxx.se/mail/curlpython-2013-12/0009.html

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    1 -
 1 files changed, 0 insertions(+), 1 deletions(-)

diff --git a/setup.py b/setup.py
index 8cf5a66..57a1802 100644
--- a/setup.py
+++ b/setup.py
@@ -111,7 +111,6 @@ if sys.platform == "win32":
     if not os.path.exists(libcurl_lib_path):
         fail("libcurl.lib does not exist at %s.\nCurl directory must point to compiled libcurl (bin/include/lib subdirectories): %s" %(libcurl_lib_path, curl_dir))
     extra_objects.append(libcurl_lib_path)
-    add_libdirs("LIB", ";")
     
     # make pycurl binary work on windows xp.
     # we use inet_ntop which was added in vista and implement a fallback.
-- 
1.7.1


From f21492cb3156247d0c8cfbb02515d50fce7ebe44 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 19 Dec 2013 07:35:26 -0500
Subject: [PATCH 165/236] Use "libcurl" for option names pertaining to libcurl

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 INSTALL  |   12 ++++++------
 setup.py |    6 +++---
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/INSTALL b/INSTALL
index 75a64d1..71da636 100644
--- a/INSTALL
+++ b/INSTALL
@@ -40,20 +40,20 @@ For a minimum build you will just need libcurl source. Follow its Windows
 build instructions to build either a static or a DLL version of the library,
 then configure PycURL as follows to use it:
 
-    python setup.py --curl-dir=c:\dev\curl-7.33.0\builds\libcurl-vc-x86-release-dll-ipv6-sspi-spnego-winssl --use-curl-dll
+    python setup.py --curl-dir=c:\dev\curl-7.33.0\builds\libcurl-vc-x86-release-dll-ipv6-sspi-spnego-winssl --use-libcurl-dll
 
 Note that --curl-dir does not point to libcurl source but rather to headers
 and compiled libraries.
 
 Additional Windows setup.py options:
 
---use-curl-dll - build against libcurl DLL, if not given PycURL will be built
+--use-libcurl-dll - build against libcurl DLL, if not given PycURL will be built
 against libcurl statically.
 
---curl-lib-name=libcurl_imp.lib - specify a different name for libcurl import
-library. The default is libcurl.lib which is appropriate for static linking
-and is sometimes the correct choice for dynamic linking as well. The other
-possibility for dynamic linking is libcurl_imp.lib.
+--libcurl-lib-name=libcurl_imp.lib - specify a different name for libcurl
+import library. The default is libcurl.lib which is appropriate for static
+linking and is sometimes the correct choice for dynamic linking as well. The
+other possibility for dynamic linking is libcurl_imp.lib.
 
 A good setup.py target to use is bdist_wininst which produces an executable
 installer that you can run to install PycURL.
diff --git a/setup.py b/setup.py
index 57a1802..a79723c 100644
--- a/setup.py
+++ b/setup.py
@@ -94,10 +94,10 @@ if sys.platform == "win32":
     # libcurl windows documentation states that for linking against libcurl
     # dll, the import library name is libcurl_imp.lib.
     # in practice, the library name sometimes is libcurl.lib.
-    # override with: --curl-lib-name=libcurl_imp.lib
-    curl_lib_name = scan_argv('--curl-lib-name=', 'libcurl.lib')
+    # override with: --libcurl-lib-name=libcurl_imp.lib
+    curl_lib_name = scan_argv('--libcurl-lib-name=', 'libcurl.lib')
 
-    if scan_argv("--use-curl-dll") is not None:
+    if scan_argv("--use-libcurl-dll") is not None:
         libcurl_lib_path = os.path.join(curl_dir, "lib", curl_lib_name)
         extra_link_args.extend(["ws2_32.lib"])
         if str.find(sys.version, "MSC") >= 0:
-- 
1.7.1


From cbb23002961eaaf5f1cec533ee354da152ab2b69 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 19 Dec 2013 08:03:05 -0500
Subject: [PATCH 166/236] Add pycurl options to --help output

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   17 +++++++++++++++++
 1 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/setup.py b/setup.py
index a79723c..cc04a8b 100644
--- a/setup.py
+++ b/setup.py
@@ -350,6 +350,23 @@ if LooseVersion(distutils.__version__) < LooseVersion("1.0.3"):
     setup_args["licence"] = setup_args["license"]
 
 if __name__ == "__main__":
+    if '--help' in sys.argv:
+        # unfortunately this help precedes distutils help
+        if sys.platform == "win32":
+            print('''\
+PycURL Windows options:
+ --curl-dir=/path/to/compiled/libcurl  path to libcurl headers and libraries
+ --use-libcurl-dll                     link against libcurl DLL, if not given
+                                       link against libcurl statically
+ --libcurl-lib-name=libcurl_imp.lib    override libcurl import library name
+''')
+        else:
+            print('''\
+PycURL Unix options:
+ --curl-config=/path/to/curl-config  use specified curl-config binary
+ --openssl-dir=/path/to/openssl/dir  path to OpenSSL headers and libraries
+''')
+    
     for o in ext.extra_objects:
         assert os.path.isfile(o), o
     setup(**setup_args)
-- 
1.7.1


From 188761c1398f87f3a5619758347087b59953bd9c Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 19 Dec 2013 08:03:59 -0500
Subject: [PATCH 167/236] Delete windows setup file, anything there that is useful should be folded into setup.py

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup_win32_ssl.py |   35 -----------------------------------
 1 files changed, 0 insertions(+), 35 deletions(-)
 delete mode 100644 setup_win32_ssl.py

diff --git a/setup_win32_ssl.py b/setup_win32_ssl.py
deleted file mode 100644
index 612ba3a..0000000
--- a/setup_win32_ssl.py
+++ /dev/null
@@ -1,35 +0,0 @@
-#! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
-# vi:ts=4:et
-
-import os, sys, string
-assert sys.platform == "win32", "Only for building on Win32 with SSL and zlib"
-
-
-CURL_DIR = r"c:\src\build\pycurl\curl-7.19.0-ssl"
-OPENSSL_DIR = r"c:\src\build\pycurl\openssl-0.9.7g"
-sys.argv.insert(1, "--curl-dir=" + CURL_DIR)
-
-from setup import *
-
-setup_args["name"] = "pycurl-ssl"
-
-for l in ("libeay32.lib", "ssleay32.lib",):
-    ext.extra_objects.append(os.path.join(OPENSSL_DIR, "out32", l))
-
-define_macros.append(('HAVE_CURL_SSL', 1))
-define_macros.append(('HAVE_CURL_OPENSSL', 1))
-
-pool = "\\" + r"pool\win32\vc6" + "\\"
-if string.find(sys.version, "MSC v.1310") >= 0:
-    pool = "\\" + r"pool\win32\vc71" + "\\"
-ext.extra_objects.append(r"c:\src\pool\zlib-1.2.2" + pool + "zlib.lib")
-ext.extra_objects.append(r"c:\src\pool\c-ares-20050411" + pool + "ares.lib")
-ext.extra_objects.append(r"c:\src\pool\libidn-0.5.15" + pool + "idn.lib")
-
-
-if __name__ == "__main__":
-    for o in ext.extra_objects:
-        assert os.path.isfile(o), o
-    setup(**setup_args)
-
-- 
1.7.1


From 5587f6e2a2a05b0f8a61bf3f9fc6c58cac4e8d6a Mon Sep 17 00:00:00 2001
From: Romuald Brunet <romuald@gandi.net>
Date: Thu, 19 Dec 2013 14:43:37 +0100
Subject: [PATCH 168/236] Add test for E_OPERATION_TIMEDOUT

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/curlopt_test.py |    6 ++++++
 1 files changed, 6 insertions(+), 0 deletions(-)

diff --git a/tests/curlopt_test.py b/tests/curlopt_test.py
index 6d21608..4c6aef4 100644
--- a/tests/curlopt_test.py
+++ b/tests/curlopt_test.py
@@ -62,3 +62,9 @@ class CurloptTest(unittest.TestCase):
     @util.min_libcurl(7, 19, 3)
     def test_httpauth_digest_ie(self):
         assert hasattr(pycurl, 'HTTPAUTH_DIGEST_IE')
+
+    # CURLE_OPERATION_TIMEDOUT was introduced in libcurl-7.10.2
+    # to replace CURLE_OPERATION_TIMEOUTED
+    @util.min_libcurl(7, 10, 2)
+    def test_operation_timedout_constant(self):
+        self.assertEqual(pycurl.E_OPERATION_TIMEDOUT, pycurl.E_OPERATION_TIMEOUTED)
-- 
1.7.1


From efdbdefc8f06801428381b53a4a18ece49116dd5 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 19 Dec 2013 14:32:06 -0500
Subject: [PATCH 169/236] Delete unneeded version specification

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/curlopt_test.py |    1 -
 1 files changed, 0 insertions(+), 1 deletions(-)

diff --git a/tests/curlopt_test.py b/tests/curlopt_test.py
index 4c6aef4..fe11ab2 100644
--- a/tests/curlopt_test.py
+++ b/tests/curlopt_test.py
@@ -65,6 +65,5 @@ class CurloptTest(unittest.TestCase):
 
     # CURLE_OPERATION_TIMEDOUT was introduced in libcurl-7.10.2
     # to replace CURLE_OPERATION_TIMEOUTED
-    @util.min_libcurl(7, 10, 2)
     def test_operation_timedout_constant(self):
         self.assertEqual(pycurl.E_OPERATION_TIMEDOUT, pycurl.E_OPERATION_TIMEOUTED)
-- 
1.7.1


From 6412addb9fe1b086f91ab72c672ef788acda75f2 Mon Sep 17 00:00:00 2001
From: Tom Pierce <tom.pierce0@gmail.com>
Date: Fri, 20 Dec 2013 13:51:46 +0000
Subject: [PATCH 170/236] Added LOCK_DATA_SSL_SESSION to enable pycurl to use SSL session sharing

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    4 +++-
 1 files changed, 3 insertions(+), 1 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 0c8b399..4b2f675 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -977,7 +977,7 @@ do_curlshare_setopt(CurlShareObject *self, PyObject *args)
     /* Handle the case of integer arguments */
     if (PyInt_Check(obj)) {
         long d = PyInt_AsLong(obj);
-        if (d != CURL_LOCK_DATA_COOKIE && d != CURL_LOCK_DATA_DNS) {
+        if (d != CURL_LOCK_DATA_COOKIE && d != CURL_LOCK_DATA_DNS && d != CURL_LOCK_DATA_SSL_SESSION) {
             goto error;
         }
         switch(option) {
@@ -4925,8 +4925,10 @@ initpycurl(void)
     assert(curlshareobject_constants != NULL);
     insint_s(d, "SH_SHARE", CURLSHOPT_SHARE);
     insint_s(d, "SH_UNSHARE", CURLSHOPT_UNSHARE);
+
     insint_s(d, "LOCK_DATA_COOKIE", CURL_LOCK_DATA_COOKIE);
     insint_s(d, "LOCK_DATA_DNS", CURL_LOCK_DATA_DNS);
+    insint_s(d, "LOCK_DATA_SSL_SESSION", CURL_LOCK_DATA_SSL_SESSION);
 
     /* Check the version, as this has caused nasty problems in
      * some cases. */
-- 
1.7.1


From fcbf3523db1db6a4251137adf16e6033ff2c70ea Mon Sep 17 00:00:00 2001
From: Tom Pierce <tom.pierce0@gmail.com>
Date: Fri, 20 Dec 2013 14:03:02 +0000
Subject: [PATCH 171/236] set SH_SHARE option to LOCK_DATA_SSL_SESSION in test

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/share_test.py |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/tests/share_test.py b/tests/share_test.py
index b8f8c18..0f906be 100644
--- a/tests/share_test.py
+++ b/tests/share_test.py
@@ -34,6 +34,7 @@ class ShareTest(unittest.TestCase):
         s = pycurl.CurlShare()
         s.setopt(pycurl.SH_SHARE, pycurl.LOCK_DATA_COOKIE)
         s.setopt(pycurl.SH_SHARE, pycurl.LOCK_DATA_DNS)
+        s.setopt(pycurl.SH_SHARE, pycurl.LOCK_DATA_SSL_SESSION)
 
         t1 = WorkerThread(s)
         t2 = WorkerThread(s)
-- 
1.7.1


From 55ca7116485d02c21a8f2705c1758ece731aa82a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 21 Dec 2013 21:25:14 -0500
Subject: [PATCH 172/236] Streams need to be decoded on python 3.

Fixes #94, patch by k7rim.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/setup.py b/setup.py
index cc04a8b..5f41350 100644
--- a/setup.py
+++ b/setup.py
@@ -125,7 +125,7 @@ if sys.platform == "win32":
         extra_compile_args.append("-WX")        # treat warnings as errors
         p = subprocess.Popen(['cl.exe'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
         out, err = p.communicate()
-        match = re.search(r'Version (\d+)', err.split("\n")[0])
+        match = re.search(r'Version (\d+)', err.decode().split("\n")[0])
         if match and int(match.group(1)) < 16:
             # option removed in vs 2010:
             # connect.microsoft.com/VisualStudio/feedback/details/475896/link-fatal-error-lnk1117-syntax-error-in-option-opt-nowin98/
-- 
1.7.1


From 140b6298de6499039c704a49b0c40fa201c6e1f8 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 21 Dec 2013 21:25:38 -0500
Subject: [PATCH 173/236] Variables need to be declared on top of the functions in C.

Fixes #95, patch by k7rim.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    6 ++++--
 1 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 4b2f675..e3195c4 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -3770,8 +3770,9 @@ do_curl_setattro(PyObject *o, PyObject *name, PyObject *v)
 static PyObject *
 do_multi_getattro(PyObject *o, PyObject *n)
 {
+    PyObject *v;
     assert_multi_state((CurlMultiObject *)o);
-    PyObject *v = PyObject_GenericGetAttr(o, n);
+    v = PyObject_GenericGetAttr(o, n);
     if( !v && PyErr_ExceptionMatches(PyExc_AttributeError) )
     {
         PyErr_Clear();
@@ -3791,8 +3792,9 @@ do_multi_setattro(PyObject *o, PyObject *n, PyObject *v)
 static PyObject *
 do_share_getattro(PyObject *o, PyObject *n)
 {
+    PyObject *v;
     assert_share_state((CurlShareObject *)o);
-    PyObject *v = PyObject_GenericGetAttr(o, n);
+    v = PyObject_GenericGetAttr(o, n);
     if( !v && PyErr_ExceptionMatches(PyExc_AttributeError) )
     {
         PyErr_Clear();
-- 
1.7.1


From 6b1763fb3a072de3ce181a6f31d069c18b926b1d Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sat, 21 Dec 2013 18:17:07 -0500
Subject: [PATCH 174/236] Change test ssl certificate to use just 'localhost' for common name, fixing test suite on libcurl 7.33.0+

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/certinfo_test.py |    2 +-
 tests/certs/server.crt |   24 ++++++++++++------------
 2 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/tests/certinfo_test.py b/tests/certinfo_test.py
index 176c210..e2a5ed3 100644
--- a/tests/certinfo_test.py
+++ b/tests/certinfo_test.py
@@ -62,4 +62,4 @@ class CertinfoTest(unittest.TestCase):
         for entry in certinfo:
             certinfo_dict[entry[0]] = entry[1]
         assert 'Subject' in certinfo_dict
-        assert 'pycurl test suite' in certinfo_dict['Subject']
+        assert 'PycURL test suite' in certinfo_dict['Subject']
diff --git a/tests/certs/server.crt b/tests/certs/server.crt
index 4a8decc..f904889 100644
--- a/tests/certs/server.crt
+++ b/tests/certs/server.crt
@@ -1,14 +1,14 @@
 -----BEGIN CERTIFICATE-----
-MIICJTCCAY4CCQDfQAHGuFkN2zANBgkqhkiG9w0BAQUFADBXMQswCQYDVQQGEwJB
-VTETMBEGA1UECBMKU29tZS1TdGF0ZTEaMBgGA1UEChMRcHljdXJsIHRlc3Qgc3Vp
-dGUxFzAVBgNVBAMTDmxvY2FsaG9zdDo4MzgzMB4XDTEzMDcyNDAwMDgxNVoXDTE0
-MDcyNDAwMDgxNVowVzELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUx
-GjAYBgNVBAoTEXB5Y3VybCB0ZXN0IHN1aXRlMRcwFQYDVQQDEw5sb2NhbGhvc3Q6
-ODM4MzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAxE0+59Kf2z9ccZyUAuKG
-QpkQaXtEJC13exY4SWIfr78FfCStdqpZdfmm66djFENhmaAZYGsPHGXrEIHQqja2
-7KYkHo4cXLxksR4Db01yPMtMU9xHzg37OTIS2lGRmMxLduKc5XKsxA98PV/D1k4k
-sqLcLDH//YdLR0iYUYLOIgMCAwEAATANBgkqhkiG9w0BAQUFAAOBgQAppFdMNMHe
-68uQA1y2xAYW7faUH8/g+XAuH9WjLL2QfWGXgWey/pwofsrTO2Hl+D9y8Rey4eJ/
-BDv3OV2cBWBYBOxZv/kqyDHQc38tho9gdaPQnD4ttFk2TSgaOs1W39pGY1On0Ejd
-O6CXEGV7p8C613AgEkbdudnn+ChvyH/Shw==
+MIICGzCCAYQCCQCdeJzNRLLLvDANBgkqhkiG9w0BAQUFADBSMQswCQYDVQQGEwJB
+VTETMBEGA1UECBMKU29tZS1TdGF0ZTEaMBgGA1UEChMRUHljVVJMIHRlc3Qgc3Vp
+dGUxEjAQBgNVBAMTCWxvY2FsaG9zdDAeFw0xMzEyMjIxMzA0MTVaFw0xNzA5MTcx
+MzA0MTVaMFIxCzAJBgNVBAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMRowGAYD
+VQQKExFQeWNVUkwgdGVzdCBzdWl0ZTESMBAGA1UEAxMJbG9jYWxob3N0MIGfMA0G
+CSqGSIb3DQEBAQUAA4GNADCBiQKBgQDETT7n0p/bP1xxnJQC4oZCmRBpe0QkLXd7
+FjhJYh+vvwV8JK12qll1+abrp2MUQ2GZoBlgaw8cZesQgdCqNrbspiQejhxcvGSx
+HgNvTXI8y0xT3EfODfs5MhLaUZGYzEt24pzlcqzED3w9X8PWTiSyotwsMf/9h0tH
+SJhRgs4iAwIDAQABMA0GCSqGSIb3DQEBBQUAA4GBAGhX0iIMCrRcI6T6S4YydkXf
+7LrXZpjSJwVGSCd5ehx3Qvc1LQNJjpB68F0MhVTqbDP1o3CAHaTa2s/8NC9j3tV7
+bUynoKJT3srpHisfdd/SV538mWvFDtGRctbmmqp8qT4On+kr76dKj+/d3HyfOKIK
+Aasa7ODxFKbbY542yYHu
 -----END CERTIFICATE-----
-- 
1.7.1


From 21df1ccd6a37bbce1c95851214a95293b7eca87d Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 22 Dec 2013 08:52:34 -0500
Subject: [PATCH 175/236] Chase debug output change in pycurl 7.34.0

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/debug_test.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/tests/debug_test.py b/tests/debug_test.py
index 9a5b7e7..4b9e571 100644
--- a/tests/debug_test.py
+++ b/tests/debug_test.py
@@ -30,7 +30,7 @@ class DebugTest(unittest.TestCase):
         self.curl.perform()
         
         # Some checks with no particular intent
-        self.check(0, 'About to connect')
+        self.check(0, 'Trying')
         if util.pycurl_version_less_than(7, 24):
             self.check(0, 'connected')
         else:
-- 
1.7.1


From a86a06af4b42b3ac3d9f471620490b1990b7767a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 22 Dec 2013 23:54:36 -0500
Subject: [PATCH 176/236] Make sure request succeeds before trying to decode body as json

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/post_test.py |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/tests/post_test.py b/tests/post_test.py
index ca527fb..827e855 100644
--- a/tests/post_test.py
+++ b/tests/post_test.py
@@ -119,6 +119,7 @@ class PostTest(unittest.TestCase):
         sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.perform()
+        self.assertEqual(200, self.curl.getinfo(pycurl.HTTP_CODE))
         body = sio.getvalue().decode()
         returned_fields = json.loads(body)
         self.assertEqual(expect, returned_fields)
-- 
1.7.1


From 8bc4446cf8134e3a1770eaa84e0383be76f7b1cf Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 22 Dec 2013 23:39:10 -0500
Subject: [PATCH 177/236] Test program for duplicating sockets in windows

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/c/winsockdup.c |   66 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 files changed, 66 insertions(+), 0 deletions(-)
 create mode 100644 tests/c/winsockdup.c

diff --git a/tests/c/winsockdup.c b/tests/c/winsockdup.c
new file mode 100644
index 0000000..4a8bd7d
--- /dev/null
+++ b/tests/c/winsockdup.c
@@ -0,0 +1,66 @@
+#include <winsock2.h>
+#include <assert.h>
+
+#define sassert assert
+
+void dump() {
+	int err;
+	LPTSTR buf;
+	err = WSAGetLastError();
+	FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM, NULL, err, 0, &buf, 0, NULL);
+	printf("%d %s\n", err, buf);
+	LocalFree(buf);
+}
+
+int main() {
+	SOCKET s1, s2, s1d, s2d;
+	int val, rv, size;
+	WSADATA wsadata;
+	WSAPROTOCOL_INFO pi;
+
+	rv = WSAStartup(MAKEWORD(2, 2), &wsadata);
+	assert(!rv);
+
+	s1 = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
+	assert(s1 > 0);
+	val = 1;
+	rv = setsockopt(s1, SOL_SOCKET, SO_KEEPALIVE, &val, sizeof(val));
+	dump();
+	sassert(!rv);
+
+	s2 = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
+	assert(s2 > 0);
+	val = 0;
+	rv = setsockopt(s2, SOL_SOCKET, SO_KEEPALIVE, &val, sizeof(val));
+	sassert(!rv);
+
+	size = sizeof(val);
+	rv = getsockopt(s1, SOL_SOCKET, SO_KEEPALIVE, &val, &size);
+	assert(!rv);
+	printf("%d\n", val);
+	sassert(val == 1);
+
+	rv = getsockopt(s2, SOL_SOCKET, SO_KEEPALIVE, &val, &size);
+	assert(!rv);
+	sassert(val == 0);
+
+	rv = WSADuplicateSocket(s1, GetCurrentProcessId(), &pi);
+	assert(!rv);
+	s1d = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, &pi, 0, WSA_FLAG_OVERLAPPED);
+	assert(s1d > 0);
+	
+	rv = getsockopt(s1d, SOL_SOCKET, SO_KEEPALIVE, &val, &size);
+	assert(!rv);
+	printf("%d\n", val);
+	sassert(val == 1);
+
+	rv = WSADuplicateSocket(s2, GetCurrentProcessId(), &pi);
+	assert(!rv);
+	s2d = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, &pi, 0, WSA_FLAG_OVERLAPPED);
+	assert(s2d > 0);
+	
+	rv = getsockopt(s2d, SOL_SOCKET, SO_KEEPALIVE, &val, &size);
+	assert(!rv);
+	printf("%d\n", val);
+	sassert(val == 0);
+}
-- 
1.7.1


From 954aab3826846f7a3a65f4b1c394a66f80b24f9a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 23 Dec 2013 00:04:37 -0500
Subject: [PATCH 178/236] Reproduce case for crash in dup() on windows

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/win/opensocketcrash.py |   30 ++++++++++++++++++++++++++++++
 1 files changed, 30 insertions(+), 0 deletions(-)
 create mode 100644 tests/win/opensocketcrash.py

diff --git a/tests/win/opensocketcrash.py b/tests/win/opensocketcrash.py
new file mode 100644
index 0000000..cafa8f2
--- /dev/null
+++ b/tests/win/opensocketcrash.py
@@ -0,0 +1,30 @@
+import pycurl
+from io import BytesIO
+import socket
+
+def socket_open(family, socktype, protocol, address):
+    global socket_open_called
+    global socket_open_address
+    socket_open_called = True
+    socket_open_address = address
+    
+    #print(family, socktype, protocol, address)
+    s = socket.socket(family, socktype, protocol)
+    s.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
+    print(2)
+    return s 
+
+curl = pycurl.Curl() 
+curl.setopt(pycurl.OPENSOCKETFUNCTION, socket_open)
+curl.setopt(curl.URL, 'http://localhost:8380/success')
+sio = BytesIO()
+curl.setopt(pycurl.WRITEFUNCTION, sio.write)
+print(1)
+curl.perform()
+print(1)
+
+assert socket_open_called
+assertEqual(("127.0.0.1", 8380), socket_open_address)
+assertEqual('success', sio.getvalue().decode()) 
+
+print(1)
-- 
1.7.1


From 414354173391c4b88f3d9675adbef21f8a462f93 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 23 Dec 2013 00:34:51 -0500
Subject: [PATCH 179/236] Use wsaduplicatesocket instead of dup on windows to avoid crashes.

http://curl.haxx.se/mail/curlpython-2013-12/0012.html

Reported by Gisle Vanem.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   24 +++++++++++++++++++++++-
 1 files changed, 23 insertions(+), 1 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index e3195c4..1eb09dd 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1498,6 +1498,23 @@ error:
     return res_obj;
 }
 
+#if defined(WIN32)
+static SOCKET
+dup_winsock(SOCKET sock, struct curl_sockaddr *address)
+{
+    int rv;
+    WSAPROTOCOL_INFO pi;
+
+    rv = WSADuplicateSocket(sock, GetCurrentProcessId(), &pi);
+    if (rv) {
+        return CURL_SOCKET_BAD;
+    }
+
+    /* not sure if WSA_FLAG_OVERLAPPED is needed, but it does not seem to hurt */
+    return WSASocket(address->family, address->socktype, address->protocol, &pi, 0, WSA_FLAG_OVERLAPPED);
+}
+#endif
+
 /* curl_socket_t is just an int on unix/windows (with limitations that
  * are not important here) */
 static curl_socket_t
@@ -1534,7 +1551,12 @@ opensocket_callback(void *clientp, curlsocktype purpose,
         }
         // normal operation:
         if (PyInt_Check(fileno_result)) {
-            ret = dup(PyInt_AsLong(fileno_result));
+            int sockfd = PyInt_AsLong(fileno_result);
+#if defined(WIN32)
+            ret = dup_winsock(sockfd, address);
+#else
+            ret = dup(sockfd);
+#endif
             goto done;
         }
     } else {
-- 
1.7.1


From 4f26bfe8b8dfbb188904a365bacf32170c4e72eb Mon Sep 17 00:00:00 2001
From: Gisle Vanem <gvanem@yahoo.no>
Date: Mon, 23 Dec 2013 14:06:01 -0500
Subject: [PATCH 180/236] Add a const

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 1eb09dd..b72eb60 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1500,7 +1500,7 @@ error:
 
 #if defined(WIN32)
 static SOCKET
-dup_winsock(SOCKET sock, struct curl_sockaddr *address)
+dup_winsock(SOCKET sock, const struct curl_sockaddr *address)
 {
     int rv;
     WSAPROTOCOL_INFO pi;
-- 
1.7.1


From aa0135275da1c2f98d7359bc36d6942071ffdb84 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 24 Dec 2013 02:35:46 -0500
Subject: [PATCH 181/236] Updating release process doc

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/release-process.rst |   61 ++++++++++++++--------------------------------
 1 files changed, 19 insertions(+), 42 deletions(-)

diff --git a/doc/release-process.rst b/doc/release-process.rst
index e4f7488..24297c2 100644
--- a/doc/release-process.rst
+++ b/doc/release-process.rst
@@ -2,47 +2,24 @@ Release Process
 ===============
 
 1. Ensure changelog is up to date with commits in master.
-2. Check via tests/matrix.py that test suite passes on the following
-   configurations:
-
-   - Python 2.4, 2.5, 2.6, 2.7.
-   - Minimum supported libcurl (currently 7.19.0).
-   - Most recent available libcurl (currently 7.33.0).
-
+2. Make sure travis is green for master.
 3. Update version numbers in:
-
-   - Changelog
-   - setup.py
-   - www/htdocs/index.php
-
-4. TODO: update setup_win32_ssl.py.
-5. Copy Changelog to www/htdocs.
-6. Rsync doc directory to www/htdocs::
-
-        rsync doc/*html www/htdocs/doc
-
-7. Build the source distribution::
-
-        python setup.py sdist
-
-8. Manually test install the built package.
-9. TODO: build windows packages.
+  - Changelog
+  - setup.py
+  - www/htdocs/index.php
+4. Copy Changelog to www/htdocs.
+5. Rsync doc directory to www/htdocs.
+6. `python setup.py sdist`.
+7. Manually test install the built package.
+8. Build windows packages using winbuild.py.
+9. Add windows packages to downloads repo on github.
 10. Tag the new version.
-11. Create new version on pypi::
-
-        python setup.py register
-
-12. Upload source distribution to pypi::
-
-        python setup.py sdist upload
-
-13. Copy built source distribution to downloads repo on github.
-14. Rsync downloads repo to sourceforge::
-
-        rsync -av * user@web.sourceforge.net:/home/project-web/pycurl/htdocs/download
-
-15. Rsync www/htdocs to sourceforge::
-
-        rsync -av www/htdocs/ user@web.sourceforge.net:/home/project-web/pycurl/htdocs
-
-16. Announce release on mailing list.
+11. Register new version with pypi - `python setup.py register`.
+12. Upload source distribution to pypi - `python setup.py sdist upload`.
+  This recreates the source distribution.
+13. Add the source distribution to downloads repo on github.
+14. Rsync downloads repo to sourceforge.
+15. Rsync www/htdocs to sourceforge.
+16. Push tag to github pycurl repo.
+17. Announce release on mailing list.
+18. Link to announcement from website.
-- 
1.7.1


From 5272f475df9cfcd690208c39fc23b328411f9d7f Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 24 Dec 2013 05:05:18 -0500
Subject: [PATCH 182/236] setup_win32_ssl.py is gone

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 MANIFEST.in |    1 -
 1 files changed, 0 insertions(+), 1 deletions(-)

diff --git a/MANIFEST.in b/MANIFEST.in
index 4fdb749..86c3583 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -22,4 +22,3 @@ include tests/*.py
 include tests/certs/*.crt
 include tests/certs/*.key
 include tests/matrix/*.patch
-include setup_win32_ssl.py
-- 
1.7.1


From 54296beddef6f1c09e31e25bc81eb8c744c38d7c Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 23 Dec 2013 14:04:43 -0500
Subject: [PATCH 183/236] Use runtime libcurl version in the default user agent.

Fixes #49.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 Makefile                        |    3 +-
 src/pycurl.c                    |   50 ++++++++++++++++++++++++++++++++-------
 tests/user_agent_string_test.py |    2 +-
 3 files changed, 44 insertions(+), 11 deletions(-)

diff --git a/Makefile b/Makefile
index 48cc0e8..35bf051 100644
--- a/Makefile
+++ b/Makefile
@@ -5,7 +5,6 @@
 
 SHELL = /bin/sh
 
-PYTHON = python2.3
 PYTHON = python
 NOSETESTS = nosetests
 
@@ -19,6 +18,8 @@ test: build
 	mkdir -p tests/tmp
 	PYTHONSUFFIX=$$(python -V 2>&1 |awk '{print $$2}' |awk -F. '{print $$1 "." $$2}') && \
 	PYTHONPATH=$$(ls -d build/lib.*$$PYTHONSUFFIX):$$PYTHONPATH \
+	$(PYTHON) -c 'import pycurl; print(pycurl.version)'
+	PYTHONPATH=$$(ls -d build/lib.*$$PYTHONSUFFIX):$$PYTHONPATH \
 	$(NOSETESTS)
 
 # (needs GNU binutils)
diff --git a/src/pycurl.c b/src/pycurl.c
index b72eb60..943109a 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -212,9 +212,10 @@ static void pycurl_ssl_cleanup(void);
 # define PYCURL_VERSION_STRING PYCURL_VERSION
 #endif
 
-/* Keep some default variables around */
-static const char g_pycurl_useragent [] =
-    "PycURL/" PYCURL_VERSION_STRING " libcurl/" LIBCURL_VERSION;
+#define PYCURL_VERSION_PREFIX "PycURL/" PYCURL_VERSION_STRING
+
+/* Initialized during module init */
+static char *g_pycurl_useragent = NULL;
 
 /* Type objects */
 static PyObject *ErrorObject = NULL;
@@ -1096,6 +1097,7 @@ util_curl_init(CurlObject *self)
     }
 
     /* Set default USERAGENT */
+    assert(g_pycurl_useragent);
     res = curl_easy_setopt(self->handle, CURLOPT_USERAGENT, g_pycurl_useragent);
     if (res != CURLE_OK) {
         return (-1);
@@ -4392,13 +4394,26 @@ insint_m(PyObject *d, char *name, long value)
 }
 
 
+/* Used in Python 3 only, and even then this function seems to never get
+ * called. Python 2 has no module cleanup:
+ * http://stackoverflow.com/questions/20741856/run-a-function-when-a-c-extension-module-is-freed-on-python-2
+ */
+void do_curlmod_free(void *unused) {
+    PyMem_Free(g_pycurl_useragent);
+    g_pycurl_useragent = NULL;
+}
+
 #if PY_MAJOR_VERSION >= 3
 static PyModuleDef curlmodule = {
     PyModuleDef_HEAD_INIT,
-    "pycurl",
-    module_doc,
-    -1,
-    curl_methods, NULL, NULL, NULL, NULL
+    "pycurl",           /* m_name */
+    module_doc,         /* m_doc */
+    -1,                 /* m_size */
+    curl_methods,       /* m_methods */
+    NULL,               /* m_reload */
+    NULL,               /* m_traverse */
+    NULL,               /* m_clear */
+    do_curlmod_free     /* m_free */
 };
 #endif
 
@@ -4420,6 +4435,8 @@ initpycurl(void)
 {
     PyObject *m, *d;
     const curl_version_info_data *vi;
+    const char *libcurl_version;
+    int libcurl_version_len, pycurl_version_len;
 
     /* Initialize the type of the new type objects here; doing it here
      * is required for portability to Windows without requiring C++. */
@@ -4461,8 +4478,23 @@ initpycurl(void)
     assert(curlobject_constants != NULL);
 
     /* Add version strings to the module */
-    insobj2(d, NULL, "version",
-            PyText_FromFormat("PycURL/" PYCURL_VERSION_STRING " %s", curl_version()));
+    libcurl_version = curl_version();
+    libcurl_version_len = strlen(libcurl_version);
+#define PYCURL_VERSION_PREFIX_SIZE sizeof(PYCURL_VERSION_PREFIX)
+    /* PYCURL_VERSION_PREFIX_SIZE includes terminating null which will be
+     * replaced with the space; libcurl_version_len does not include
+     * terminating null. */
+    pycurl_version_len = PYCURL_VERSION_PREFIX_SIZE + libcurl_version_len + 1;
+    g_pycurl_useragent = PyMem_Malloc(pycurl_version_len);
+    assert(g_pycurl_useragent != NULL);
+    memcpy(g_pycurl_useragent, PYCURL_VERSION_PREFIX, PYCURL_VERSION_PREFIX_SIZE);
+    g_pycurl_useragent[PYCURL_VERSION_PREFIX_SIZE-1] = ' ';
+    memcpy(g_pycurl_useragent + PYCURL_VERSION_PREFIX_SIZE,
+        libcurl_version, libcurl_version_len);
+    g_pycurl_useragent[pycurl_version_len - 1] = 0;
+#undef PYCURL_VERSION_PREFIX_SIZE
+    
+    insobj2(d, NULL, "version", PyText_FromString(g_pycurl_useragent));
     insstr(d, "COMPILE_DATE", __DATE__ " " __TIME__);
     insint(d, "COMPILE_PY_VERSION_HEX", PY_VERSION_HEX);
     insint(d, "COMPILE_LIBCURL_VERSION_NUM", LIBCURL_VERSION_NUM);
diff --git a/tests/user_agent_string_test.py b/tests/user_agent_string_test.py
index 12f97ba..eb7ce87 100644
--- a/tests/user_agent_string_test.py
+++ b/tests/user_agent_string_test.py
@@ -24,4 +24,4 @@ class UserAgentStringTest(unittest.TestCase):
         self.curl.perform()
         user_agent = sio.getvalue().decode()
         assert user_agent.startswith('PycURL/')
-        assert 'libcurl/' in user_agent
+        assert 'libcurl/' in user_agent, 'User agent did not include libcurl/: %s' % user_agent
-- 
1.7.1


From f796224fe59f07c12e5dbbc184b36c66f6ec810e Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 24 Dec 2013 07:31:48 -0500
Subject: [PATCH 184/236] I think I have enough commits now

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 README.rst   |    1 +
 src/pycurl.c |    1 +
 2 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/README.rst b/README.rst
index bd2abac..0b01d4a 100644
--- a/README.rst
+++ b/README.rst
@@ -164,6 +164,7 @@ License
 
     Copyright (C) 2001-2008 by Kjetil Jacobsen <kjetilja at gmail.com>
     Copyright (C) 2001-2008 by Markus F.X.J. Oberhumer <markus at oberhumer.com>
+    Copyright (C) 2013 by Oleg Pudeyev <oleg at bsdpower.com>
 
     All rights reserved.
 
diff --git a/src/pycurl.c b/src/pycurl.c
index 943109a..5d231e9 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -3,6 +3,7 @@
  * Authors:
  *  Copyright (C) 2001-2008 by Kjetil Jacobsen <kjetilja at gmail.com>
  *  Copyright (C) 2001-2008 by Markus F.X.J. Oberhumer <markus at oberhumer.com>
+ *  Copyright (C) 2013 by Oleg Pudeyev <oleg at bsdpower.com>
  *
  *  All rights reserved.
  *
-- 
1.7.1


From a9b0f3081ea5207376bdc8a6b3f8ff9efd03c46a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 24 Dec 2013 08:01:06 -0500
Subject: [PATCH 185/236] Add binary contrib pointer

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 README.rst |    4 ++++
 1 files changed, 4 insertions(+), 0 deletions(-)

diff --git a/README.rst b/README.rst
index 0b01d4a..d6cdc18 100644
--- a/README.rst
+++ b/README.rst
@@ -157,6 +157,9 @@ For larger changes:
 #. Discuss your proposal on the mailing list.
 #. When consensus is reached, implement it as described above.
 
+Please contribute binary distributions for your system to the
+`downloads repository`_.
+
 License
 -------
 
@@ -179,3 +182,4 @@ License
 .. _urllib: http://docs.python.org/library/urllib.html
 .. _`the repository`: https://github.com/pycurl/pycurl
 .. _`mailing list`: http://cool.haxx.se/mailman/listinfo/curl-and-python
+.. _`downloads repository`: https://github.com/pycurl/downloads
-- 
1.7.1


From c9b1450ae68803e4689294c0d77489c8835f4ca5 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 24 Dec 2013 08:03:50 -0500
Subject: [PATCH 186/236] Tweak wording

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 README.rst |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/README.rst b/README.rst
index d6cdc18..4a9363e 100644
--- a/README.rst
+++ b/README.rst
@@ -40,7 +40,7 @@ Overview
 Requirements
 ------------
 
-- Python 2.4 through 2.7, 3.1 through 3.3.
+- Python 2.4 through 2.7 or 3.1 through 3.3.
 - libcurl 7.19.0 or better.
 
 Installation
-- 
1.7.1


From 2155ae5d578c1dd68ba9a5e39c34051237d3ab1e Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 26 Dec 2013 03:44:50 -0500
Subject: [PATCH 187/236] Missed two spots

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 COPYING-MIT |    1 +
 setup.py    |    4 ++--
 2 files changed, 3 insertions(+), 2 deletions(-)

diff --git a/COPYING-MIT b/COPYING-MIT
index 3a19f22..1b2befe 100644
--- a/COPYING-MIT
+++ b/COPYING-MIT
@@ -2,6 +2,7 @@ COPYRIGHT AND PERMISSION NOTICE
 
 Copyright (C) 2001-2008 by Kjetil Jacobsen <kjetilja at gmail.com>
 Copyright (C) 2001-2008 by Markus F.X.J. Oberhumer <markus at oberhumer.com>
+Copyright (C) 2013 by Oleg Pudeyev <oleg at bsdpower.com>
 
 All rights reserved.
 
diff --git a/setup.py b/setup.py
index 5f41350..c5d2235 100644
--- a/setup.py
+++ b/setup.py
@@ -310,8 +310,8 @@ setup_args = dict(
     name=PACKAGE,
     version=VERSION,
     description="PycURL -- cURL library module for Python",
-    author="Kjetil Jacobsen, Markus F.X.J. Oberhumer",
-    author_email="kjetilja at gmail.com, markus at oberhumer.com",
+    author="Kjetil Jacobsen, Markus F.X.J. Oberhumer, Oleg Pudeyev",
+    author_email="kjetilja at gmail.com, markus at oberhumer.com, oleg at bsdpower.com",
     maintainer="Oleg Pudeyev",
     maintainer_email="oleg@bsdpower.com",
     url="http://pycurl.sourceforge.net/",
-- 
1.7.1


From d437e1e72bf56449427d7867eb8cb7058dbda221 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 25 Dec 2013 17:12:11 -0500
Subject: [PATCH 188/236] Reraise OSError as ConfigurationError with a pointer toward the fix

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    9 +++++++--
 1 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/setup.py b/setup.py
index c5d2235..d36bd28 100644
--- a/setup.py
+++ b/setup.py
@@ -167,8 +167,13 @@ else:
         include_dirs.append(os.path.join(OPENSSL_DIR, "include"))
     CURL_CONFIG = os.environ.get('PYCURL_CURL_CONFIG', "curl-config")
     CURL_CONFIG = scan_argv("--curl-config=", CURL_CONFIG)
-    p = subprocess.Popen((CURL_CONFIG, '--version'),
-        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+    try:
+        p = subprocess.Popen((CURL_CONFIG, '--version'),
+            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+    except OSError:
+        exc = sys.exc_info()[1]
+        msg = 'Could not run curl-config: %s' % str(exc)
+        raise ConfigurationError(msg)
     stdout, stderr = p.communicate()
     if p.wait() != 0:
         msg = "`%s' not found -- please install the libcurl development files or specify --curl-config=/path/to/curl-config" % CURL_CONFIG
-- 
1.7.1


From b3271258d693870cff3166de4314472116e081d0 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 25 Dec 2013 17:20:38 -0500
Subject: [PATCH 189/236] Fix comment referring to the old way of doing things

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    5 ++---
 1 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/setup.py b/setup.py
index d36bd28..bfa1133 100644
--- a/setup.py
+++ b/setup.py
@@ -78,9 +78,8 @@ def add_libdirs(envvar, sep, fatal=False):
 
 
 if sys.platform == "win32":
-    # Windows users have to configure the curl_dir path parameter to match
-    # their cURL source installation.  The path set here is just an example
-    # and thus unlikely to match your installation.
+    # Windows users have to pass --curl-dir parameter to specify path
+    # to libcurl, because there is no curl-config on windows at all.
     curl_dir = scan_argv("--curl-dir=")
     if curl_dir is None:
         fail("Please specify --curl-dir=/path/to/built/libcurl")
-- 
1.7.1


From 5d9753819e235216d9ab576f6b22431a15938fbc Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 25 Dec 2013 17:26:52 -0500
Subject: [PATCH 190/236] Whitespace fix

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/setup.py b/setup.py
index bfa1133..e393640 100644
--- a/setup.py
+++ b/setup.py
@@ -345,7 +345,7 @@ This module provides Python bindings for the cURL library.""",
 )
 
 if sys.platform == "win32":
-        setup_args['cmdclass'] = {'bdist_msi': bdist_msi_version_hack}
+    setup_args['cmdclass'] = {'bdist_msi': bdist_msi_version_hack}
 
 ##print distutils.__version__
 if LooseVersion(distutils.__version__) > LooseVersion("1.0.1"):
-- 
1.7.1


From 093618e0ad658382fb199c572bc145b1d1889a08 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 26 Dec 2013 03:34:34 -0500
Subject: [PATCH 191/236] Test framework borrowed from https://github.com/rtomayko/rpg

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/ext/test-lib.sh   |   69 +++++++++++++++++++++++++++++++++++++++++++++++
 tests/ext/test-suite.sh |   25 +++++++++++++++++
 2 files changed, 94 insertions(+), 0 deletions(-)
 create mode 100644 tests/ext/test-lib.sh
 create mode 100755 tests/ext/test-suite.sh

diff --git a/tests/ext/test-lib.sh b/tests/ext/test-lib.sh
new file mode 100644
index 0000000..0cb9489
--- /dev/null
+++ b/tests/ext/test-lib.sh
@@ -0,0 +1,69 @@
+# shell test framework based on test framework in rpg:
+# https://github.com/rtomayko/rpg
+#
+# Copyright (c) 2010 Ryan Tomayko <http://tomayko.com/about>
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to
+# deal in the Software without restriction, including without limitation the
+# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+# sell copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+# THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
+# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+: ${VERBOSE:=false}
+
+unset CDPATH
+
+#cd "$(dirname $0)"
+if test -z "$TESTDIR"; then
+  TESTDIR=$(realpath $(pwd))
+fi
+
+test_count=0
+successes=0
+failures=0
+
+output="$TESTDIR/$(basename "$0" .sh).out"
+trap "rm -f $output" 0
+
+succeeds () {
+  test_count=$(( test_count + 1 ))
+  echo "\$ ${2:-$1}" > "$output"
+  eval "( ${2:-$1} )" 1>>"$output" 2>&1
+  ec=$?
+  if test $ec -eq 0
+  then successes=$(( successes + 1 ))
+     printf 'ok %d - %s\n' $test_count "$1"
+  else failures=$(( failures + 1 ))
+     printf 'not ok %d - %s [%d]\n' $test_count "$1" "$ec"
+  fi
+
+  $VERBOSE && dcat $output
+  return 0
+}
+
+fails () {
+  if test $# -eq 1
+  then succeeds "! $1"
+  else succeeds "$1" "! $2"
+  fi
+}
+
+diag () { echo "$@" | sed 's/^/# /'; }
+dcat () { cat "$@"  | sed 's/^/# /'; }
+desc () { diag "$@"; }
+
+setup () {
+  rm -rf "$TESTDIR/trash"
+  return 0
+}
diff --git a/tests/ext/test-suite.sh b/tests/ext/test-suite.sh
new file mode 100755
index 0000000..27a868b
--- /dev/null
+++ b/tests/ext/test-suite.sh
@@ -0,0 +1,25 @@
+# 
+
+dir=$(dirname "$0")
+
+. "$dir"/test-lib.sh
+
+setup
+
+desc 'setup.py without arguments'
+fails 'python setup.py'
+succeeds 'python setup.py 2>&1 |grep "usage: setup.py"'
+
+desc 'setup.py --help'
+succeeds 'python setup.py --help'
+# .* = Unix|Windows
+succeeds 'python setup.py --help |grep "PycURL .* options:"'
+# distutils help
+succeeds 'python setup.py --help |grep "Common commands:"'
+
+desc 'setup.py --help with bogus --curl-config'
+succeeds 'python setup.py --help --curl-config=/dev/null'
+succeeds 'python setup.py --help --curl-config=/dev/null |grep "PycURL .* options:"'
+# this checks that --curl-config is consumed prior to
+# distutils processing --help
+fails 'python setup.py --help --curl-config=/dev/null 2>&1 |grep "option .* not recognized"'
-- 
1.7.1


From 08c947467ea7299b8e8ca527494e13f7e7d0403a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 25 Dec 2013 17:35:05 -0500
Subject: [PATCH 192/236] Refactoring setup.py to delay configuration until --help can be plucked out of options

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   64 +++++++++++++++++++++++++++++++++++++++----------------------
 1 files changed, 41 insertions(+), 23 deletions(-)

diff --git a/setup.py b/setup.py
index e393640..dbce6c4 100644
--- a/setup.py
+++ b/setup.py
@@ -77,7 +77,7 @@ def add_libdirs(envvar, sep, fatal=False):
             fail("FATAL: bad directory %s in environment variable %s" % (dir, envvar))
 
 
-if sys.platform == "win32":
+def configure_windows():
     # Windows users have to pass --curl-dir parameter to specify path
     # to libcurl, because there is no curl-config on windows at all.
     curl_dir = scan_argv("--curl-dir=")
@@ -159,7 +159,9 @@ if sys.platform == "win32":
                 self.distribution.metadata.get_version = \
                     types.MethodType(monkey_get_version, self.distribution.metadata)
                 bdist_msi.run(self)
-else:
+
+
+def configure_unix():
     # Find out the rest the hard way
     OPENSSL_DIR = scan_argv("--openssl-dir=")
     if OPENSSL_DIR is not None:
@@ -254,23 +256,32 @@ else:
         extra_link_args.append("-flat_namespace")
 
 
+def configure():
+    if sys.platform == "win32":
+        configure_windows()
+    else:
+        configure_unix()
+
+
 ###############################################################################
 
-ext = Extension(
-    name=PACKAGE,
-    sources=[
-        os.path.join("src", "pycurl.c"),
-    ],
-    include_dirs=include_dirs,
-    define_macros=define_macros,
-    library_dirs=library_dirs,
-    libraries=libraries,
-    runtime_library_dirs=runtime_library_dirs,
-    extra_objects=extra_objects,
-    extra_compile_args=extra_compile_args,
-    extra_link_args=extra_link_args,
-)
-##print ext.__dict__; sys.exit(1)
+def get_extension():
+    ext = Extension(
+        name=PACKAGE,
+        sources=[
+            os.path.join("src", "pycurl.c"),
+        ],
+        include_dirs=include_dirs,
+        define_macros=define_macros,
+        library_dirs=library_dirs,
+        libraries=libraries,
+        runtime_library_dirs=runtime_library_dirs,
+        extra_objects=extra_objects,
+        extra_compile_args=extra_compile_args,
+        extra_link_args=extra_link_args,
+    )
+    ##print(ext.__dict__); sys.exit(1)
+    return ext
 
 
 ###############################################################################
@@ -336,8 +347,6 @@ setup_args = dict(
         'Topic :: Internet :: File Transfer Protocol (FTP)',
         'Topic :: Internet :: WWW/HTTP',
     ],
-    data_files=get_data_files(),
-    ext_modules=[ext],
     packages=[PY_PACKAGE],
     package_dir={ PY_PACKAGE: os.path.join('python', 'curl') },
     long_description="""
@@ -370,7 +379,16 @@ PycURL Unix options:
  --curl-config=/path/to/curl-config  use specified curl-config binary
  --openssl-dir=/path/to/openssl/dir  path to OpenSSL headers and libraries
 ''')
-    
-    for o in ext.extra_objects:
-        assert os.path.isfile(o), o
-    setup(**setup_args)
+        # invoke setup without configuring pycurl because
+        # configuration might fail, and we want to display help anyway
+        setup(**setup_args)
+    else:
+        configure()
+        
+        setup_args['data_files'] = get_data_files()
+        ext = get_extension()
+        setup_args['ext_modules'] = [ext]
+        
+        for o in ext.extra_objects:
+            assert os.path.isfile(o), o
+        setup(**setup_args)
-- 
1.7.1


From 03d0699fd96824c4accf8abed3a0268904784233 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 26 Dec 2013 03:38:02 -0500
Subject: [PATCH 193/236] Refactor help to make the code more readable

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   26 +++++++++++++++-----------
 1 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/setup.py b/setup.py
index dbce6c4..d2ab31f 100644
--- a/setup.py
+++ b/setup.py
@@ -362,23 +362,27 @@ if LooseVersion(distutils.__version__) > LooseVersion("1.0.1"):
 if LooseVersion(distutils.__version__) < LooseVersion("1.0.3"):
     setup_args["licence"] = setup_args["license"]
 
-if __name__ == "__main__":
-    if '--help' in sys.argv:
-        # unfortunately this help precedes distutils help
-        if sys.platform == "win32":
-            print('''\
+unix_help = '''\
+PycURL Unix options:
+ --curl-config=/path/to/curl-config  use specified curl-config binary
+ --openssl-dir=/path/to/openssl/dir  path to OpenSSL headers and libraries
+'''
+
+windows_help = '''\
 PycURL Windows options:
  --curl-dir=/path/to/compiled/libcurl  path to libcurl headers and libraries
  --use-libcurl-dll                     link against libcurl DLL, if not given
                                        link against libcurl statically
  --libcurl-lib-name=libcurl_imp.lib    override libcurl import library name
-''')
+'''
+
+if __name__ == "__main__":
+    if '--help' in sys.argv:
+        # unfortunately this help precedes distutils help
+        if sys.platform == "win32":
+            print(windows_help)
         else:
-            print('''\
-PycURL Unix options:
- --curl-config=/path/to/curl-config  use specified curl-config binary
- --openssl-dir=/path/to/openssl/dir  path to OpenSSL headers and libraries
-''')
+            print(unix_help)
         # invoke setup without configuring pycurl because
         # configuration might fail, and we want to display help anyway
         setup(**setup_args)
-- 
1.7.1


From 4e97f8b36e6d3441d60aa79c882eab223983af56 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 26 Dec 2013 03:40:45 -0500
Subject: [PATCH 194/236] Strip pycurl options when displaying help

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   14 +++++++++++++-
 1 files changed, 13 insertions(+), 1 deletions(-)

diff --git a/setup.py b/setup.py
index d2ab31f..7956433 100644
--- a/setup.py
+++ b/setup.py
@@ -263,6 +263,16 @@ def configure():
         configure_unix()
 
 
+
+def strip_pycurl_options():
+    if sys.platform == 'win32':
+        options = ['--curl-dir=', '--curl-lib-name=', '--use-libcurl-dll']
+    else:
+        options = ['--openssl-dir', '--curl-config']
+    for option in options:
+        scan_argv(option)
+
+
 ###############################################################################
 
 def get_extension():
@@ -384,7 +394,9 @@ if __name__ == "__main__":
         else:
             print(unix_help)
         # invoke setup without configuring pycurl because
-        # configuration might fail, and we want to display help anyway
+        # configuration might fail, and we want to display help anyway.
+        # we need to remove our options because distutils complains about them
+        strip_pycurl_options()
         setup(**setup_args)
     else:
         configure()
-- 
1.7.1


From 04a92fbbea2e2f05f709ff90b244f2125e933ad2 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 26 Dec 2013 03:42:47 -0500
Subject: [PATCH 195/236] For now, run setup.py tests with all others

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 Makefile |    1 +
 1 files changed, 1 insertions(+), 0 deletions(-)

diff --git a/Makefile b/Makefile
index 35bf051..2e3c954 100644
--- a/Makefile
+++ b/Makefile
@@ -21,6 +21,7 @@ test: build
 	$(PYTHON) -c 'import pycurl; print(pycurl.version)'
 	PYTHONPATH=$$(ls -d build/lib.*$$PYTHONSUFFIX):$$PYTHONPATH \
 	$(NOSETESTS)
+	./tests/ext/test-suite.sh
 
 # (needs GNU binutils)
 strip: build
-- 
1.7.1


From ac675eaa2cf2c7e50bf64196bcaa941d3f7b7a6e Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Thu, 26 Dec 2013 04:27:43 -0500
Subject: [PATCH 196/236] Unbreak setup.py on windows

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   63 ++++++++++++++++++++++++++++++++-----------------------------
 1 files changed, 33 insertions(+), 30 deletions(-)

diff --git a/setup.py b/setup.py
index 7956433..7f40d4e 100644
--- a/setup.py
+++ b/setup.py
@@ -130,35 +130,38 @@ def configure_windows():
             # connect.microsoft.com/VisualStudio/feedback/details/475896/link-fatal-error-lnk1117-syntax-error-in-option-opt-nowin98/
             extra_link_args.append("/opt:nowin98")  # use small section alignment
 
-        # workaround for distutils/msi version requirement per
-        # epydoc.sourceforge.net/stdlib/distutils.version.StrictVersion-class.html -
-        # only x.y.z version numbers are supported, whereas our versions might be x.y.z.p.
-        # bugs.python.org/issue6040#msg133094
-        from distutils.command.bdist_msi import bdist_msi
-        import inspect
-        import types
-        import re
-        
-        class bdist_msi_version_hack(bdist_msi):
-            """ MSI builder requires version to be in the x.x.x format """
-            def run(self):
-                def monkey_get_version(self):
-                    """ monkey patch replacement for metadata.get_version() that
-                            returns MSI compatible version string for bdist_msi
-                    """
-                    # get filename of the calling function
-                    if inspect.stack()[1][1].endswith('bdist_msi.py'):
-                        # strip revision from version (if any), e.g. 11.0.0-r31546
-                        match = re.match(r'(\d+\.\d+\.\d+)', self.version)
-                        assert match
-                        return match.group(1)
-                    else:
-                        return self.version
-
-                # monkeypatching get_version() call for DistributionMetadata
-                self.distribution.metadata.get_version = \
-                    types.MethodType(monkey_get_version, self.distribution.metadata)
-                bdist_msi.run(self)
+def get_bdist_msi_version_hack():
+    # workaround for distutils/msi version requirement per
+    # epydoc.sourceforge.net/stdlib/distutils.version.StrictVersion-class.html -
+    # only x.y.z version numbers are supported, whereas our versions might be x.y.z.p.
+    # bugs.python.org/issue6040#msg133094
+    from distutils.command.bdist_msi import bdist_msi
+    import inspect
+    import types
+    import re
+    
+    class bdist_msi_version_hack(bdist_msi):
+        """ MSI builder requires version to be in the x.x.x format """
+        def run(self):
+            def monkey_get_version(self):
+                """ monkey patch replacement for metadata.get_version() that
+                        returns MSI compatible version string for bdist_msi
+                """
+                # get filename of the calling function
+                if inspect.stack()[1][1].endswith('bdist_msi.py'):
+                    # strip revision from version (if any), e.g. 11.0.0-r31546
+                    match = re.match(r'(\d+\.\d+\.\d+)', self.version)
+                    assert match
+                    return match.group(1)
+                else:
+                    return self.version
+
+            # monkeypatching get_version() call for DistributionMetadata
+            self.distribution.metadata.get_version = \
+                types.MethodType(monkey_get_version, self.distribution.metadata)
+            bdist_msi.run(self)
+    
+    return bdist_msi_version_hack
 
 
 def configure_unix():
@@ -364,7 +367,7 @@ This module provides Python bindings for the cURL library.""",
 )
 
 if sys.platform == "win32":
-    setup_args['cmdclass'] = {'bdist_msi': bdist_msi_version_hack}
+    setup_args['cmdclass'] = {'bdist_msi': get_bdist_msi_version_hack()}
 
 ##print distutils.__version__
 if LooseVersion(distutils.__version__) > LooseVersion("1.0.1"):
-- 
1.7.1


From 75d958cd3603f837e5649f2fb28a135bc8d28e4f Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 27 Dec 2013 08:35:42 -0500
Subject: [PATCH 197/236] Specify ssl library to use via a --with-* argument to setup.py

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |   49 +++++++++++++++++++++++++++++++++++--------------
 1 files changed, 35 insertions(+), 14 deletions(-)

diff --git a/setup.py b/setup.py
index 7f40d4e..28eab68 100644
--- a/setup.py
+++ b/setup.py
@@ -227,31 +227,52 @@ def configure_unix():
             msg += ":\n" + errtext
         raise ConfigurationError(msg)
     libs = split_quoted(optbuf)
+    
+    ssl_lib_detected = False
+    ssl_options = {
+        '--with-ssl': 'HAVE_CURL_OPENSSL',
+        '--with-gnutls': 'HAVE_CURL_GNUTLS',
+        '--with-nss': 'HAVE_CURL_NSS',
+    }
+    for option in ssl_options:
+        if scan_argv(option) is not None:
+            for other_option in ssl_options:
+                if option != other_option:
+                    if scan_argv(other_option) is not None:
+                        raise ConfigurationError('Cannot give both %s and %s' % (option, other_option))
+            ssl_lib_detected = True
+            define_macros.append((ssl_options[option], 1))
 
     for arg in libs:
         if arg[:2] == "-l":
             libraries.append(arg[2:])
-            if arg[2:] == 'ssl':
+            if not ssl_lib_detected and arg[2:] == 'ssl':
                 define_macros.append(('HAVE_CURL_OPENSSL', 1))
-            if arg[2:] == 'gnutls':
+                ssl_lib_detected = True
+            if not ssl_lib_detected and arg[2:] == 'gnutls':
                 define_macros.append(('HAVE_CURL_GNUTLS', 1))
-            if arg[2:] == 'ssl3':
+                ssl_lib_detected = True
+            if not ssl_lib_detected and arg[2:] == 'ssl3':
                 define_macros.append(('HAVE_CURL_NSS', 1))
+                ssl_lib_detected = True
         elif arg[:2] == "-L":
             library_dirs.append(arg[2:])
         else:
             extra_link_args.append(arg)
-    p = subprocess.Popen((CURL_CONFIG, '--features'),
-        stdout=subprocess.PIPE, stderr=subprocess.PIPE)
-    stdout, stderr = p.communicate()
-    if p.wait() != 0:
-        msg = "Problem running `%s' --features" % CURL_CONFIG
-        if stderr:
-            msg += ":\n" + stderr.decode()
-        raise ConfigurationError(msg)
-    for feature in split_quoted(stdout.decode()):
-        if feature == 'SSL':
-            define_macros.append(('HAVE_CURL_SSL', 1))
+    if not ssl_lib_detected:
+        p = subprocess.Popen((CURL_CONFIG, '--features'),
+            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+        stdout, stderr = p.communicate()
+        if p.wait() != 0:
+            msg = "Problem running `%s' --features" % CURL_CONFIG
+            if stderr:
+                msg += ":\n" + stderr.decode()
+            raise ConfigurationError(msg)
+        for feature in split_quoted(stdout.decode()):
+            if feature == 'SSL':
+                # SSL feature does not mean openssl is used!
+                # Could be any ssl library.
+                define_macros.append(('HAVE_CURL_SSL', 1))
     if not libraries:
         libraries.append("curl")
     # Add extra compile flag for MacOS X
-- 
1.7.1


From e0b6adcf0bd759263e61d652a303441eb2621aab Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 27 Dec 2013 08:40:59 -0500
Subject: [PATCH 198/236] Document added options

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    3 +++
 1 files changed, 3 insertions(+), 0 deletions(-)

diff --git a/setup.py b/setup.py
index 28eab68..a910fc6 100644
--- a/setup.py
+++ b/setup.py
@@ -400,6 +400,9 @@ unix_help = '''\
 PycURL Unix options:
  --curl-config=/path/to/curl-config  use specified curl-config binary
  --openssl-dir=/path/to/openssl/dir  path to OpenSSL headers and libraries
+ --with-ssl                          libcurl is linked against OpenSSL
+ --with-gnutls                       libcurl is linked against GnuTLS
+ --with-nss                          libcurl is linked against NSS
 '''
 
 windows_help = '''\
-- 
1.7.1


From 81fc5cd4957c2d592000c1b184dbb53bf0780239 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 27 Dec 2013 08:39:06 -0500
Subject: [PATCH 199/236] Allow ssl library to be configured via an environment variable

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    7 +++++++
 1 files changed, 7 insertions(+), 0 deletions(-)

diff --git a/setup.py b/setup.py
index a910fc6..7a5d933 100644
--- a/setup.py
+++ b/setup.py
@@ -229,6 +229,13 @@ def configure_unix():
     libs = split_quoted(optbuf)
     
     ssl_lib_detected = False
+    if 'PYCURL_SSL_LIBRARY' in os.environ:
+        ssl_lib = os.environ['PYCURL_SSL_LIBRARY']
+        if ssl_lib in ['openssl', 'gnutls', 'nss']:
+            ssl_lib_detected = True
+            define_macros.append(('HAVE_CURL_%s' % ssl_lib.upper(), 1))
+        else:
+            raise ConfigurationError('Invalid value "%s" for PYCURL_SSL_LIBRARY' % ssl_lib)
     ssl_options = {
         '--with-ssl': 'HAVE_CURL_OPENSSL',
         '--with-gnutls': 'HAVE_CURL_GNUTLS',
-- 
1.7.1


From cf8d7067223432268c0cbbc6fdb5971a6c7f6519 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 27 Dec 2013 11:43:33 -0500
Subject: [PATCH 200/236] Move curl version check to the beginning of module init.

No reason to do any other work if this check fails.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   24 ++++++++++++------------
 1 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 5d231e9..c42bb9e 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -4439,6 +4439,18 @@ initpycurl(void)
     const char *libcurl_version;
     int libcurl_version_len, pycurl_version_len;
 
+    /* Check the version, as this has caused nasty problems in
+     * some cases. */
+    vi = curl_version_info(CURLVERSION_NOW);
+    if (vi == NULL) {
+        Py_FatalError("pycurl: curl_version_info() failed");
+        assert(0);
+    }
+    if (vi->version_num < LIBCURL_VERSION_NUM) {
+        Py_FatalError("pycurl: libcurl link-time version is older than compile-time version");
+        assert(0);
+    }
+
     /* Initialize the type of the new type objects here; doing it here
      * is required for portability to Windows without requiring C++. */
     p_Curl_Type = &Curl_Type;
@@ -4987,18 +4999,6 @@ initpycurl(void)
     insint_s(d, "LOCK_DATA_DNS", CURL_LOCK_DATA_DNS);
     insint_s(d, "LOCK_DATA_SSL_SESSION", CURL_LOCK_DATA_SSL_SESSION);
 
-    /* Check the version, as this has caused nasty problems in
-     * some cases. */
-    vi = curl_version_info(CURLVERSION_NOW);
-    if (vi == NULL) {
-        Py_FatalError("pycurl: curl_version_info() failed");
-        assert(0);
-    }
-    if (vi->version_num < LIBCURL_VERSION_NUM) {
-        Py_FatalError("pycurl: libcurl link-time version is older than compile-time version");
-        assert(0);
-    }
-
     /* Initialize callback locks if ssl is enabled */
 #if defined(PYCURL_NEED_SSL_TSL)
     pycurl_ssl_init();
-- 
1.7.1


From eeae8ed3cca4a3dc84324ac5788c22da0bbe4fad Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 27 Dec 2013 13:23:51 -0500
Subject: [PATCH 201/236] Raise an ImportError when libcurl version requirement fails rather than nuking the interpreter.

Partially implements #113.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   10 ++++++----
 1 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index c42bb9e..8033584 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -4420,8 +4420,10 @@ static PyModuleDef curlmodule = {
 
 
 #if PY_MAJOR_VERSION >= 3
+#define PYCURL_MODINIT_RETURN_NULL return NULL
 PyMODINIT_FUNC PyInit_pycurl(void)
 #else
+#define PYCURL_MODINIT_RETURN_NULL return
 /* Initialization function for the module */
 #if defined(PyMODINIT_FUNC)
 PyMODINIT_FUNC
@@ -4443,12 +4445,12 @@ initpycurl(void)
      * some cases. */
     vi = curl_version_info(CURLVERSION_NOW);
     if (vi == NULL) {
-        Py_FatalError("pycurl: curl_version_info() failed");
-        assert(0);
+        PyErr_SetString(PyExc_ImportError, "pycurl: curl_version_info() failed");
+        PYCURL_MODINIT_RETURN_NULL;
     }
     if (vi->version_num < LIBCURL_VERSION_NUM) {
-        Py_FatalError("pycurl: libcurl link-time version is older than compile-time version");
-        assert(0);
+        PyErr_SetString(PyExc_ImportError, "pycurl: libcurl link-time version is older than compile-time version");
+        PYCURL_MODINIT_RETURN_NULL;
     }
 
     /* Initialize the type of the new type objects here; doing it here
-- 
1.7.1


From 82031563be2ff85bc57f3d9e17fc5b473f1c35cb Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 27 Dec 2013 13:28:15 -0500
Subject: [PATCH 202/236] Include wanted and actual version in the exception message

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 8033584..54db2ca 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -4449,7 +4449,7 @@ initpycurl(void)
         PYCURL_MODINIT_RETURN_NULL;
     }
     if (vi->version_num < LIBCURL_VERSION_NUM) {
-        PyErr_SetString(PyExc_ImportError, "pycurl: libcurl link-time version is older than compile-time version");
+        PyErr_Format(PyExc_ImportError, "pycurl: libcurl link-time version (%s) is older than compile-time version (%s)", vi->version, LIBCURL_VERSION);
         PYCURL_MODINIT_RETURN_NULL;
     }
 
-- 
1.7.1


From 11c01e1e7b797084864275cb250aa7104a94521a Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 27 Dec 2013 12:02:58 -0500
Subject: [PATCH 203/236] HAVE_CURL_SSL refers to any ssl library, and should be enabled when any backend is being used

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 setup.py |    7 +++++--
 1 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/setup.py b/setup.py
index 7a5d933..09a7b0f 100644
--- a/setup.py
+++ b/setup.py
@@ -277,9 +277,12 @@ def configure_unix():
             raise ConfigurationError(msg)
         for feature in split_quoted(stdout.decode()):
             if feature == 'SSL':
-                # SSL feature does not mean openssl is used!
-                # Could be any ssl library.
+                # this means any ssl library, not just openssl
                 define_macros.append(('HAVE_CURL_SSL', 1))
+    else:
+        # if we are configuring for a particular ssl library,
+        # we can assume that ssl is being used
+        define_macros.append(('HAVE_CURL_SSL', 1))
     if not libraries:
         libraries.append("curl")
     # Add extra compile flag for MacOS X
-- 
1.7.1


From f1c7eaf7a8774ae603d1e4348598ed0ae3ed24ef Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 27 Dec 2013 12:07:41 -0500
Subject: [PATCH 204/236] Require that compile time and runtime ssl backends are the same

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   28 ++++++++++++++++++++++++++--
 1 files changed, 26 insertions(+), 2 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 54db2ca..205c92b 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -126,6 +126,7 @@ typedef int Py_ssize_t;
 #   define PYCURL_NEED_SSL_TSL
 #   define PYCURL_NEED_OPENSSL_TSL
 #   include <openssl/crypto.h>
+#   define COMPILE_SSL_LIB "openssl"
 # elif defined(HAVE_CURL_GNUTLS)
 #   include <gnutls/gnutls.h>
 #   if GNUTLS_VERSION_NUMBER <= 0x020b00
@@ -133,12 +134,18 @@ typedef int Py_ssize_t;
 #     define PYCURL_NEED_GNUTLS_TSL
 #     include <gcrypt.h>
 #   endif
-# elif !defined(HAVE_CURL_NSS)
+#   define COMPILE_SSL_LIB "gnutls"
+# elif defined(HAVE_CURL_NSS)
+#   define COMPILE_SSL_LIB "nss"
+# else
 #  warning \
    "libcurl was compiled with SSL support, but configure could not determine which " \
    "library was used; thus no SSL crypto locking callbacks will be set, which may " \
    "cause random crashes on SSL requests"
+#  define COMPILE_SSL_LIB "other"
 # endif /* HAVE_CURL_OPENSSL || HAVE_CURL_GNUTLS || HAVE_CURL_NSS */
+#else
+# define COMPILE_SSL_LIB "none"
 #endif /* HAVE_CURL_SSL */
 
 #if defined(PYCURL_NEED_SSL_TSL)
@@ -4438,7 +4445,7 @@ initpycurl(void)
 {
     PyObject *m, *d;
     const curl_version_info_data *vi;
-    const char *libcurl_version;
+    const char *libcurl_version, *runtime_ssl_lib;
     int libcurl_version_len, pycurl_version_len;
 
     /* Check the version, as this has caused nasty problems in
@@ -4452,6 +4459,23 @@ initpycurl(void)
         PyErr_Format(PyExc_ImportError, "pycurl: libcurl link-time version (%s) is older than compile-time version (%s)", vi->version, LIBCURL_VERSION);
         PYCURL_MODINIT_RETURN_NULL;
     }
+    
+    /* Our compiled crypto locks should correspond to runtime ssl library. */
+    if (vi->ssl_version == NULL) {
+        runtime_ssl_lib = "none";
+    } else if (!strncmp(vi->ssl_version, "OpenSSL/", 8)) {
+        runtime_ssl_lib = "openssl";
+    } else if (!strncmp(vi->ssl_version, "GnuTLS/", 7)) {
+        runtime_ssl_lib = "gnutls";
+    } else if (!strncmp(vi->ssl_version, "NSS/", 4)) {
+        runtime_ssl_lib = "nss";
+    } else {
+        runtime_ssl_lib = "other";
+    }
+    if (strcmp(runtime_ssl_lib, COMPILE_SSL_LIB)) {
+        PyErr_Format(PyExc_ImportError, "pycurl: libcurl link-time ssl backend (%s) is different from compile-time ssl backend (%s)", runtime_ssl_lib, COMPILE_SSL_LIB);
+        PYCURL_MODINIT_RETURN_NULL;
+    }
 
     /* Initialize the type of the new type objects here; doing it here
      * is required for portability to Windows without requiring C++. */
-- 
1.7.1


From 452f3cd12ff0c1edf470017f82a23be11381fbdb Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 27 Dec 2013 13:35:47 -0500
Subject: [PATCH 205/236] Treat "none" and "other" the same; this unbreaks windows builds with winssl

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   10 ++++++----
 1 files changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 205c92b..037c284 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -142,10 +142,12 @@ typedef int Py_ssize_t;
    "libcurl was compiled with SSL support, but configure could not determine which " \
    "library was used; thus no SSL crypto locking callbacks will be set, which may " \
    "cause random crashes on SSL requests"
-#  define COMPILE_SSL_LIB "other"
+   /* since we have no crypto callbacks for other ssl backends,
+    * no reason to require users match those */
+#  define COMPILE_SSL_LIB "none/other"
 # endif /* HAVE_CURL_OPENSSL || HAVE_CURL_GNUTLS || HAVE_CURL_NSS */
 #else
-# define COMPILE_SSL_LIB "none"
+# define COMPILE_SSL_LIB "none/other"
 #endif /* HAVE_CURL_SSL */
 
 #if defined(PYCURL_NEED_SSL_TSL)
@@ -4462,7 +4464,7 @@ initpycurl(void)
     
     /* Our compiled crypto locks should correspond to runtime ssl library. */
     if (vi->ssl_version == NULL) {
-        runtime_ssl_lib = "none";
+        runtime_ssl_lib = "none/other";
     } else if (!strncmp(vi->ssl_version, "OpenSSL/", 8)) {
         runtime_ssl_lib = "openssl";
     } else if (!strncmp(vi->ssl_version, "GnuTLS/", 7)) {
@@ -4470,7 +4472,7 @@ initpycurl(void)
     } else if (!strncmp(vi->ssl_version, "NSS/", 4)) {
         runtime_ssl_lib = "nss";
     } else {
-        runtime_ssl_lib = "other";
+        runtime_ssl_lib = "none/other";
     }
     if (strcmp(runtime_ssl_lib, COMPILE_SSL_LIB)) {
         PyErr_Format(PyExc_ImportError, "pycurl: libcurl link-time ssl backend (%s) is different from compile-time ssl backend (%s)", runtime_ssl_lib, COMPILE_SSL_LIB);
-- 
1.7.1


From 7f631958cd5991c358f618d511ea0d3e00a24318 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 27 Dec 2013 12:26:33 -0500
Subject: [PATCH 206/236] Fix test suite on ssl-less libcurl

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/certinfo_test.py |    2 ++
 tests/util.py          |   16 ++++++++++++++++
 2 files changed, 18 insertions(+), 0 deletions(-)

diff --git a/tests/certinfo_test.py b/tests/certinfo_test.py
index e2a5ed3..c861032 100644
--- a/tests/certinfo_test.py
+++ b/tests/certinfo_test.py
@@ -25,6 +25,7 @@ class CertinfoTest(unittest.TestCase):
     
     # CURLOPT_CERTINFO was introduced in libcurl-7.19.1
     @util.min_libcurl(7, 19, 1)
+    @util.only_ssl
     def test_request_without_certinfo(self):
         self.curl.setopt(pycurl.URL, 'https://localhost:8383/success')
         sio = util.BytesIO()
@@ -39,6 +40,7 @@ class CertinfoTest(unittest.TestCase):
     
     # CURLOPT_CERTINFO was introduced in libcurl-7.19.1
     @util.min_libcurl(7, 19, 1)
+    @util.only_ssl
     def test_request_with_certinfo(self):
         # CURLOPT_CERTINFO only works with OpenSSL
         if 'openssl' not in pycurl.version.lower():
diff --git a/tests/util.py b/tests/util.py
index ce4190b..1926dd7 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -63,6 +63,22 @@ def min_libcurl(major, minor, patch):
     
     return decorator
 
+def only_ssl(fn):
+    import nose.plugins.skip
+    import pycurl
+    
+    @functools.wraps(fn)
+    def decorated(*args, **kwargs):
+        # easier to check that pycurl supports https, although
+        # theoretically it is not the same test.
+        # pycurl.version_info()[8] is a tuple of protocols supported by libcurl
+        if 'https' not in pycurl.version_info()[8]:
+            raise nose.plugins.skip.SkipTest('libcurl does not support ssl')
+        
+        return fn(*args, **kwargs)
+    
+    return decorated
+
 try:
     create_connection = socket.create_connection
 except AttributeError:
-- 
1.7.1


From 9eb0afd14fdfe5fcc6b60a3f82b067392c77ec9e Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Fri, 27 Dec 2013 12:37:46 -0500
Subject: [PATCH 207/236] Document new ssl requirements

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 INSTALL |   35 +++++++++++++++++++++++++++++++++++
 1 files changed, 35 insertions(+), 0 deletions(-)

diff --git a/INSTALL b/INSTALL
index 71da636..4440e7a 100644
--- a/INSTALL
+++ b/INSTALL
@@ -30,6 +30,41 @@ applies only if there is more than one version of libcurl installed,
 e.g. one in /usr/lib and one in /usr/local/lib.
 
 
+easy_install / pip
+----------------
+
+    easy_install pycurl
+    pip install pycurl
+
+If you need to specify an alternate curl-config, it can be done via an
+environment variable:
+
+    export PYCURL_CURL_CONFIG=/usr/local/bin/curl-config
+    easy_install pycurl
+
+The same applies to the SSL backend, if you need to specify it (see the SSL
+section below):
+
+    export PYCURL_SSL_LIBRARY=openssl
+    easy_install pycurl
+
+
+SSL
+---
+
+PycURL has locks around crypto functions. In order to compile correct locking
+code, it has to know which SSL library is going to be used by libcurl at
+runtime. setup.py will attempt to automatically detect the SSL library that
+libcurl uses, but this does not always work. In the cases when setup.py cannot
+figure out the SSL library, it must be provided via --with-ssl/--with-gnutls/
+--with-nss arguments, just like libcurl's configure script uses, or via
+PYCURL_SSL_LIBRARY=openssl|gnutls|nss environment variable.
+
+Please note the difference in spelling that concerns OpenSSL: the command-line
+argument is --with-ssl, to match libcurl, but the environment variable value is
+"openssl".
+
+
 Windows
 -------
 
-- 
1.7.1


From 6bb7050c420101669b0452c52ab1186cf533f31e Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 29 Dec 2013 02:01:58 -0500
Subject: [PATCH 208/236] Missed a word

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/unicode.rst |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/doc/unicode.rst b/doc/unicode.rst
index bee3a92..843fadb 100644
--- a/doc/unicode.rst
+++ b/doc/unicode.rst
@@ -2,7 +2,7 @@ Unicode
 =======
 
 Under Python 2, (binary) string and Unicode types are interchangeable.
-PycURL will pass whatever strings is given verbatim to libcurl.
+PycURL will pass whatever strings it is given verbatim to libcurl.
 When dealing with Unicode data, this typically means things like
 HTTP request bodies should be encoded to utf-8 before passing them to PycURL.
 Similarly it is on the application to decode HTTP response bodies, if
-- 
1.7.1


From 5629997a31648d2cc474daee5d4ad5300e3a6f3e Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 30 Dec 2013 03:07:09 -0500
Subject: [PATCH 209/236] Encode to ascii only, how did I end up encoding to utf8?

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 037c284..5b27779 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -358,7 +358,7 @@ int PyUnicode_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length,
         return PyBytes_AsStringAndSize(obj, buffer, length);
     } else {
         int rv;
-        *encoded_obj = PyUnicode_AsEncodedString(obj, "utf8", "strict");
+        *encoded_obj = PyUnicode_AsEncodedString(obj, "ascii", "strict");
         if (*encoded_obj == NULL) {
             return -1;
         }
-- 
1.7.1


From eca98cd34099e3b06f81ed1c8d60f4f5b16271e6 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 29 Dec 2013 07:01:42 -0500
Subject: [PATCH 210/236] Explain python 3 patches and unicode situation

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/unicode.rst |   28 ++++++++++++++++++++++++++++
 1 files changed, 28 insertions(+), 0 deletions(-)

diff --git a/doc/unicode.rst b/doc/unicode.rst
index 843fadb..4a05488 100644
--- a/doc/unicode.rst
+++ b/doc/unicode.rst
@@ -1,6 +1,9 @@
 Unicode
 =======
 
+Python 2.x
+----------
+
 Under Python 2, (binary) string and Unicode types are interchangeable.
 PycURL will pass whatever strings it is given verbatim to libcurl.
 When dealing with Unicode data, this typically means things like
@@ -8,6 +11,9 @@ HTTP request bodies should be encoded to utf-8 before passing them to PycURL.
 Similarly it is on the application to decode HTTP response bodies, if
 they are expected to contain non-ASCII characters.
 
+Python 3.x (from PycURL 7.19.3 onward)
+--------------------------------------
+
 Under Python 3, the rules are as follows:
 
 PycURL will accept bytes for any string data passed to libcurl (e.g.
@@ -40,3 +46,25 @@ any file objects that PycURL is meant to interact with via CURLOPT_READDATA,
 CURLOPT_WRITEDATA, CURLOPT_WRITEHEADER, CURLOPT_READFUNCTION,
 CURLOPT_WRITEFUNCTION or CURLOPT_HEADERFUNCTION must be opened in binary
 mode ("b" flag to open() call).
+
+Python 3.x before PycURL 7.19.3
+-------------------------------
+
+PycURL did not have official Python 3 support prior to PycURL 7.19.3.
+There were two patches on SourceForge (original_, revised_)
+adding Python 3 support, but they did not handle Unicode strings correctly.
+Instead of using Python encoding functionality, these patches used
+C standard library unicode to multibyte conversion functions, and thus
+they can have the same behavior as Python encoding code or behave
+entirely differently.
+
+Python 3 support as implemented in PycURL 7.19.3 and documented here
+does not, as mentioned, actually perform any encoding other than to convert
+from Unicode strings containing ASCII-only bytes to ASCII byte strings.
+
+Linux distributions that offered Python 3 packages of PycURL prior to 7.19.3
+used SourceForge patches and may behave in ways contradictory to what is
+described in this document.
+
+.. _original: http://sourceforge.net/p/pycurl/patches/5/
+.. _revised: http://sourceforge.net/p/pycurl/patches/12/
-- 
1.7.1


From 960dd47a51ebc0619ec62ee029747b2f8d9c0ed3 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 29 Dec 2013 07:11:42 -0500
Subject: [PATCH 211/236] Expand more on unicode nuances

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/unicode.rst |   22 ++++++++++++++++------
 1 files changed, 16 insertions(+), 6 deletions(-)

diff --git a/doc/unicode.rst b/doc/unicode.rst
index 4a05488..754a5eb 100644
--- a/doc/unicode.rst
+++ b/doc/unicode.rst
@@ -27,14 +27,24 @@ Therefore PycURL will attempt to encode Unicode strings with the ascii codec
 only, allowing the application to pass ASCII data in a straightforward manner
 but requiring Unicode data to be appropriately encoded.
 
+It may be helpful to remember that libcurl operates on byte arrays.
+It is a C library and does not do any Unicode encoding or decoding, offloading
+that task on the application using it. PycURL, being a thin wrapper around
+libcurl, passes the Unicode encoding and decoding responsibilities to you
+except for the trivial case of encoding Unicode data containing only ASCII
+characters into ASCII.
+
 Caution: when using CURLOPT_READFUNCTION in tandem with CURLOPT_POSTFIELDSIZE,
 as would be done for HTTP for example, take care to pass the length of
-encoded data to CURLOPT_POSTFIELDSIZE. You can return Unicode strings from
-a CURLOPT_READFUNCTION function, but as stated above they will only be
-encoded to ASCII.
+encoded data to CURLOPT_POSTFIELDSIZE if you are doing the encoding from
+Unicode strings. If you pass the number of Unicode characters rather than
+encoded bytes to libcurl, the server will receive wrong Content-Length.
+Alternatively you can return Unicode strings from a CURLOPT_READFUNCTION
+function, if you are certain they will only contain ASCII code points.
 
-If encoding to ASCII fails, libcurl will fail the request with something
-like a "read function/data error". You may examine sys.last_value for
+If encoding to ASCII fails, PycURL will return an error to libcurl, and
+libcurl in turn will fail the request with an exception like
+"read function error/data error". You may examine sys.last_value for
 information on exception that occurred during encoding in this case.
 
 PycURL will return all data read from the network as bytes. In particular,
-- 
1.7.1


From ee2e2bbac07af86084ec1cfe3f3a7b5f3b07c279 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 30 Dec 2013 22:59:22 -0500
Subject: [PATCH 212/236] Delete TODO, it has been implemented

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 TODO |   18 ------------------
 1 files changed, 0 insertions(+), 18 deletions(-)
 delete mode 100644 TODO

diff --git a/TODO b/TODO
deleted file mode 100644
index 54d1da7..0000000
--- a/TODO
+++ /dev/null
@@ -1,18 +0,0 @@
-If you want to hack on pycurl, here's our list of unresolved issues:
-
-
-NEW FEATURES/IMPROVEMENTS:
-
-    * Callback handling for stream seek.
-
-    * Add docs to the high-level interface.
-
-
-DEFICIENICES:
-
-    * Using certain invalid options, it may be possible to cause a crash.
-      This is un-Pythonic behaviour, but you somewhere have to draw a
-      line between efficiency (and feature completeness) and safety.
-      There _are_ quite a number of internal error checks, but tracking
-      and catching all possible (deliberate) misuses is not a goal
-      (and probably impossible anyway, due to the complexity of libcurl).
-- 
1.7.1


From d4a3a09dd158cb6f23fe3fe25db183cc6059fbb9 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 31 Dec 2013 00:41:01 -0500
Subject: [PATCH 213/236] Unbreak the build, this is what I get for not using a pull request

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 MANIFEST.in |    1 -
 setup.py    |    2 +-
 2 files changed, 1 insertions(+), 2 deletions(-)

diff --git a/MANIFEST.in b/MANIFEST.in
index 86c3583..a4bb9c7 100644
--- a/MANIFEST.in
+++ b/MANIFEST.in
@@ -10,7 +10,6 @@ include INSTALL
 include MANIFEST.in
 include Makefile
 include README.rst
-include TODO
 include doc/*.html
 include doc/*.rst
 include examples/*.py
diff --git a/setup.py b/setup.py
index 09a7b0f..0cea441 100644
--- a/setup.py
+++ b/setup.py
@@ -340,7 +340,7 @@ def get_data_files():
     else:
         datadir = os.path.join("share", "doc", PACKAGE)
     #
-    files = ["ChangeLog", "COPYING-LGPL", "COPYING-MIT", "INSTALL", "README.rst", "TODO",]
+    files = ["ChangeLog", "COPYING-LGPL", "COPYING-MIT", "INSTALL", "README.rst"]
     if files:
         data_files.append((os.path.join(datadir), files))
     files = glob.glob(os.path.join("doc", "*.html"))
-- 
1.7.1


From 40f627b602339a2c1516c4666abe9f10d3c41f23 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 29 Dec 2013 06:48:57 -0500
Subject: [PATCH 214/236] Add a test for sending unicode data in http headers

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/header_test.py |   41 +++++++++++++++++++++++++++++++++++++++++
 1 files changed, 41 insertions(+), 0 deletions(-)
 create mode 100644 tests/header_test.py

diff --git a/tests/header_test.py b/tests/header_test.py
new file mode 100644
index 0000000..03956b0
--- /dev/null
+++ b/tests/header_test.py
@@ -0,0 +1,41 @@
+#! /usr/bin/env python
+# -*- coding: iso-8859-1 -*-
+# vi:ts=4:et
+
+import pycurl
+import unittest
+
+from . import appmanager
+from . import util
+
+setup_module, teardown_module = appmanager.setup(('app', 8380))
+
+class HeaderTest(unittest.TestCase):
+    def setUp(self):
+        self.curl = pycurl.Curl()
+    
+    def tearDown(self):
+        self.curl.close()
+    
+    def test_ascii_string_header(self):
+        self.check('x-test-header: ascii', 'ascii')
+    
+    def test_ascii_unicode_header(self):
+        self.check(u'x-test-header: ascii', 'ascii')
+    
+    def test_unicode_string_header(self):
+        self.check('x-test-header: Москва', 'Москва')
+    
+    def test_unicode_unicode_header(self):
+        self.check(u'x-test-header: Москва', u'Москва')
+    
+    def test_encoded_unicode_header(self):
+        self.check(u'x-test-header: Москва'.encode('utf-8'), u'Москва')
+    
+    def check(self, send, expected):
+        self.curl.setopt(pycurl.URL, 'http://localhost:8380/header?h=x-test-header')
+        sio = util.BytesIO()
+        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
+        self.curl.setopt(pycurl.HTTPHEADER, [send])
+        self.curl.perform()
+        self.assertEqual(expected, sio.getvalue().decode('utf-8'))
-- 
1.7.1


From 6f16ff60bada0907dc5628cd01520921a9692c90 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 29 Dec 2013 15:11:11 -0500
Subject: [PATCH 215/236] Borrow b() and u() from six

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/util.py |   17 +++++++++++++++++
 1 files changed, 17 insertions(+), 0 deletions(-)

diff --git a/tests/util.py b/tests/util.py
index 1926dd7..6e3f551 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -13,12 +13,29 @@ py3 = sys.version_info[0] == 3
 # python 2/3 compatibility
 if py3:
     from io import StringIO, BytesIO
+    
+    # borrowed from six
+    def b(s):
+        '''Byte literal'''
+        return s.encode("latin-1")
+    def u(s):
+        '''Text literal'''
+        return s
 else:
     try:
         from cStringIO import StringIO
     except ImportError:
         from StringIO import StringIO
     BytesIO = StringIO
+    
+    # borrowed from six
+    def b(s):
+        '''Byte literal'''
+        return s
+    # Workaround for standalone backslash
+    def u(s):
+        '''Text literal'''
+        return unicode(s.replace(r'\\', r'\\\\'), "unicode_escape")
 
 def version_less_than_spec(version_tuple, spec_tuple):
     # spec_tuple may have 2 elements, expect version_tuple to have 3 elements
-- 
1.7.1


From bd9d4c5dd9cebf6c59352a30cb060f5f1c294445 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 29 Dec 2013 15:11:20 -0500
Subject: [PATCH 216/236] Use u() to be python 3.1 compatible

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/header_test.py |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/tests/header_test.py b/tests/header_test.py
index 03956b0..9c76a31 100644
--- a/tests/header_test.py
+++ b/tests/header_test.py
@@ -21,16 +21,16 @@ class HeaderTest(unittest.TestCase):
         self.check('x-test-header: ascii', 'ascii')
     
     def test_ascii_unicode_header(self):
-        self.check(u'x-test-header: ascii', 'ascii')
+        self.check(util.u('x-test-header: ascii'), 'ascii')
     
     def test_unicode_string_header(self):
         self.check('x-test-header: Москва', 'Москва')
     
     def test_unicode_unicode_header(self):
-        self.check(u'x-test-header: Москва', u'Москва')
+        self.check(util.u('x-test-header: Москва'), util.u('Москва'))
     
     def test_encoded_unicode_header(self):
-        self.check(u'x-test-header: Москва'.encode('utf-8'), u'Москва')
+        self.check(util.u('x-test-header: Москва').encode('utf-8'), util.u('Москва'))
     
     def check(self, send, expected):
         self.curl.setopt(pycurl.URL, 'http://localhost:8380/header?h=x-test-header')
-- 
1.7.1


From 8bafe66d795e0a017ca6553e7806755ac572a5b1 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Sun, 29 Dec 2013 15:35:14 -0500
Subject: [PATCH 217/236] Accept bytes objects in values for curl options taking lists on Python 3.

Although bytes were handled in text-to-bytes conversion routine,
the type checks rejected bytes which meant bytes were never usable.

Fixes #124.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   37 +++++++++++++++++--------------------
 1 files changed, 17 insertions(+), 20 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 5b27779..cb2d867 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -403,6 +403,19 @@ static char *PyString_AsString_NoNUL(PyObject *obj)
 #endif
 
 
+/* Returns true if the object is of a type that can be given to
+ * curl_easy_setopt and such - either a string or a bytestring
+ */
+#if PY_MAJOR_VERSION >= 3
+static int PyText_Check(PyObject *o) {
+    return PyUnicode_Check(o) || PyBytes_Check(o);
+}
+#else
+static int PyText_Check(PyObject *o) {
+    return PyString_Check(o);
+}
+#endif
+
 /* Convert a curl slist (a list of strings) to a Python list.
  * In case of error return NULL with an exception set.
  */
@@ -2105,11 +2118,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
 
     /* Handle the case of string arguments */
 
-#if PY_MAJOR_VERSION >= 3
-    if (PyUnicode_Check(obj)) {
-#else
-    if (PyString_Check(obj)) {
-#endif
+    if (PyText_Check(obj)) {
         char *str = NULL;
         Py_ssize_t len = -1;
 
@@ -2387,11 +2396,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                     PyErr_SetString(PyExc_TypeError, "tuple must contain string as first element");
                     return NULL;
                 }
-#if PY_MAJOR_VERSION >= 3
-                if (PyUnicode_Check(PyTuple_GET_ITEM(listitem, 1))) {
-#else
-                if (PyString_Check(PyTuple_GET_ITEM(listitem, 1))) {
-#endif
+                if (PyText_Check(PyTuple_GET_ITEM(listitem, 1))) {
                     /* Handle strings as second argument for backwards compatibility */
 
                     if (PyText_AsStringAndSize(PyTuple_GET_ITEM(listitem, 1), &cstr, &clen, cencoded_obj)) {
@@ -2458,11 +2463,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                             Py_XDECREF(ref_params);
                             return NULL;
                         }
-#if PY_MAJOR_VERSION >= 3
-                        if (!PyUnicode_Check(PyTuple_GET_ITEM(t, j+1))) {
-#else
-                        if (!PyString_Check(PyTuple_GET_ITEM(t, j+1))) {
-#endif
+                        if (!PyText_Check(PyTuple_GET_ITEM(t, j+1))) {
                             PyErr_SetString(PyExc_TypeError, "value must be string");
                             PyMem_Free(forms);
                             curl_formfree(post);
@@ -2580,11 +2581,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
             char *str;
             PyObject *sencoded_obj;
 
-#if PY_MAJOR_VERSION >= 3
-            if (!PyUnicode_Check(listitem)) {
-#else
-            if (!PyString_Check(listitem)) {
-#endif
+            if (!PyText_Check(listitem)) {
                 curl_slist_free_all(slist);
                 PyErr_SetString(PyExc_TypeError, "list items must be string objects");
                 return NULL;
-- 
1.7.1


From 025a592ae3c88155a818da89923e5a0b53b9e55b Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 30 Dec 2013 02:49:01 -0500
Subject: [PATCH 218/236] Do the "encode to latin1, decode to utf8" trick

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/app.py         |   10 ++++++++++
 tests/header_test.py |    5 ++++-
 2 files changed, 14 insertions(+), 1 deletions(-)

diff --git a/tests/app.py b/tests/app.py
index 5d99c49..8aab118 100644
--- a/tests/app.py
+++ b/tests/app.py
@@ -62,6 +62,16 @@ def files():
 def header():
     return bottle.request.headers[bottle.request.query['h']]
 
+# This is a hacky endpoint to test non-ascii text being given to libcurl
+# via headers.
+# HTTP RFC requires headers to be latin1-encoded.
+# Any string can be decoded as latin1; here we encode the header value
+# back into latin1 to obtain original bytestring, then decode it in utf-8.
+# Thanks to bdarnell for the idea: https://github.com/pycurl/pycurl/issues/124
+@app.route('/header_utf8')
+def header():
+    return bottle.request.headers[bottle.request.query['h']].encode('latin1').decode('utf8')
+
 def pause_writer():
     yield 'part1'
     _time.sleep(0.5)
diff --git a/tests/header_test.py b/tests/header_test.py
index 9c76a31..afb5ccb 100644
--- a/tests/header_test.py
+++ b/tests/header_test.py
@@ -10,6 +10,9 @@ from . import util
 
 setup_module, teardown_module = appmanager.setup(('app', 8380))
 
+# NB: HTTP RFC requires headers to be latin1 encoded, which we violate.
+# See the comments under /header_utf8 route in app.py.
+
 class HeaderTest(unittest.TestCase):
     def setUp(self):
         self.curl = pycurl.Curl()
@@ -33,7 +36,7 @@ class HeaderTest(unittest.TestCase):
         self.check(util.u('x-test-header: Москва').encode('utf-8'), util.u('Москва'))
     
     def check(self, send, expected):
-        self.curl.setopt(pycurl.URL, 'http://localhost:8380/header?h=x-test-header')
+        self.curl.setopt(pycurl.URL, 'http://localhost:8380/header_utf8?h=x-test-header')
         sio = util.BytesIO()
         self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
         self.curl.setopt(pycurl.HTTPHEADER, [send])
-- 
1.7.1


From 2a2ec5fba677426f43b5b126ce7d044a82564c90 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 30 Dec 2013 02:57:57 -0500
Subject: [PATCH 219/236] Do the encode-decode hack only on python 3, on python 2 decode as utf-8

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/app.py |    9 ++++++++-
 1 files changed, 8 insertions(+), 1 deletions(-)

diff --git a/tests/app.py b/tests/app.py
index 8aab118..5c9ad05 100644
--- a/tests/app.py
+++ b/tests/app.py
@@ -70,7 +70,14 @@ def header():
 # Thanks to bdarnell for the idea: https://github.com/pycurl/pycurl/issues/124
 @app.route('/header_utf8')
 def header():
-    return bottle.request.headers[bottle.request.query['h']].encode('latin1').decode('utf8')
+    header_value = bottle.request.headers[bottle.request.query['h']]
+    if util.py3:
+        # header_value is a string, headers are decoded in latin1
+        header_value = header_value.encode('latin1').decode('utf8')
+    else:
+        # header_value is a binary string, decode in utf-8 directly
+        header_value = header_value.decode('utf8')
+    return header_value
 
 def pause_writer():
     yield 'part1'
-- 
1.7.1


From 229614de4c75a0379d908069eee8b3185bc5d4e6 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 30 Dec 2013 03:02:20 -0500
Subject: [PATCH 220/236] Remove dependency on util

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/app.py |    6 ++++--
 1 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/tests/app.py b/tests/app.py
index 5c9ad05..0bb2e21 100644
--- a/tests/app.py
+++ b/tests/app.py
@@ -1,10 +1,12 @@
-import time as _time
+import time as _time, sys
 import bottle
 try:
     import json
 except ImportError:
     import simplejson as json
 
+py3 = sys.version_info[0] == 3
+
 app = bottle.Bottle()
 app.debug = True
 
@@ -71,7 +73,7 @@ def header():
 @app.route('/header_utf8')
 def header():
     header_value = bottle.request.headers[bottle.request.query['h']]
-    if util.py3:
+    if py3:
         # header_value is a string, headers are decoded in latin1
         header_value = header_value.encode('latin1').decode('utf8')
     else:
-- 
1.7.1


From 8925b23821920779ddea4bc9106014d33f1c5e70 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 30 Dec 2013 04:53:56 -0500
Subject: [PATCH 221/236] Now encoding fails

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/header_test.py |    3 +++
 1 files changed, 3 insertions(+), 0 deletions(-)

diff --git a/tests/header_test.py b/tests/header_test.py
index afb5ccb..65817f0 100644
--- a/tests/header_test.py
+++ b/tests/header_test.py
@@ -4,6 +4,7 @@
 
 import pycurl
 import unittest
+import nose.tools
 
 from . import appmanager
 from . import util
@@ -26,9 +27,11 @@ class HeaderTest(unittest.TestCase):
     def test_ascii_unicode_header(self):
         self.check(util.u('x-test-header: ascii'), 'ascii')
     
+    @nose.tools.raises(UnicodeEncodeError)
     def test_unicode_string_header(self):
         self.check('x-test-header: Москва', 'Москва')
     
+    @nose.tools.raises(UnicodeEncodeError)
     def test_unicode_unicode_header(self):
         self.check(util.u('x-test-header: Москва'), util.u('Москва'))
     
-- 
1.7.1


From cf1bd26b1693c681c9b21edbda63317d26ecbdb8 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 30 Dec 2013 15:46:39 -0500
Subject: [PATCH 222/236] Allow Unicode strings on Python 2 provided they only have ASCII code points.

This is the same behavior as what is allowed on Python 3.

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c         |   61 +++++++++++++++++++------------------------------
 tests/header_test.py |    2 +
 2 files changed, 26 insertions(+), 37 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index cb2d867..7b321d9 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -326,43 +326,44 @@ typedef struct {
 #if PY_MAJOR_VERSION >= 3
 # define PyText_FromFormat(format, str) PyUnicode_FromFormat((format), (str))
 # define PyText_FromString(str) PyUnicode_FromString(str)
-# define PyText_AsStringAndSize(obj, buffer, length, encoded_obj) PyUnicode_AsStringAndSize((obj), (buffer), (length), &(encoded_obj))
-# define PyText_AsString_NoNUL(obj, encoded_obj) PyUnicode_AsString_NoNUL((obj), &(encoded_obj))
-# define PyText_EncodedDecref(encoded) Py_XDECREF(encoded)
 # define PyByteStr_AsStringAndSize(obj, buffer, length) PyBytes_AsStringAndSize((obj), (buffer), (length))
 #else
 # define PyText_FromFormat(format, str) PyString_FromFormat((format), (str))
 # define PyText_FromString(str) PyString_FromString(str)
-/* encoded_obj is not used in python 2 and is uninitialized,
- * use the free macro to avoid calling Py_DECREF on it.
- */
-# define PyText_AsStringAndSize(obj, buffer, length, encoded_obj) PyString_AsStringAndSize((obj), (buffer), (length))
-# define PyText_AsString_NoNUL(obj, encoded_obj) PyString_AsString_NoNUL(obj)
-/* unused variable warning on the encoded object means you did not call
- * PyText_EncodedDecref on it and it will leak in python 3.
- */
-# define PyText_EncodedDecref(encoded) ((void) (encoded))
 # define PyByteStr_AsStringAndSize(obj, buffer, length) PyString_AsStringAndSize((obj), (buffer), (length))
 #endif
+#define PyText_EncodedDecref(encoded) Py_XDECREF(encoded)
 
 
 /*************************************************************************
 // python utility functions
 **************************************************************************/
 
-#if PY_MAJOR_VERSION >= 3
-int PyUnicode_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length, PyObject **encoded_obj)
+int PyText_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length, PyObject **encoded_obj)
 {
+#if PY_MAJOR_VERSION >= 3
     if (PyBytes_Check(obj)) {
+#else
+    if (PyString_Check(obj)) {
+#endif
         *encoded_obj = NULL;
+#if PY_MAJOR_VERSION >= 3
         return PyBytes_AsStringAndSize(obj, buffer, length);
+#else
+        return PyString_AsStringAndSize(obj, buffer, length);
+#endif
     } else {
         int rv;
+        assert(PyUnicode_Check(obj));
         *encoded_obj = PyUnicode_AsEncodedString(obj, "ascii", "strict");
         if (*encoded_obj == NULL) {
             return -1;
         }
+#if PY_MAJOR_VERSION >= 3
         rv = PyBytes_AsStringAndSize(*encoded_obj, buffer, length);
+#else
+        rv = PyString_AsStringAndSize(*encoded_obj, buffer, length);
+#endif
         if (rv != 0) {
             /* If we free the object, pointer must be reset to NULL */
             Py_CLEAR(*encoded_obj);
@@ -370,7 +371,6 @@ int PyUnicode_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length,
         return rv;
     }
 }
-#endif
 
 
 /* Like PyString_AsString(), but set an exception if the string contains
@@ -378,29 +378,16 @@ int PyUnicode_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length,
  * us if the `len' parameter is NULL - see Objects/stringobject.c.
  */
 
-#if PY_MAJOR_VERSION >= 3
-static char *PyUnicode_AsString_NoNUL(PyObject *obj, PyObject **encoded_obj)
-{
-    char *s = NULL;
-    Py_ssize_t r;
-    r = PyUnicode_AsStringAndSize(obj, &s, NULL, encoded_obj);
-    if (r != 0)
-        return NULL;    /* exception already set */
-    assert(s != NULL);
-    return s;
-}
-#else
-static char *PyString_AsString_NoNUL(PyObject *obj)
+static char *PyText_AsString_NoNUL(PyObject *obj, PyObject **encoded_obj)
 {
     char *s = NULL;
     Py_ssize_t r;
-    r = PyString_AsStringAndSize(obj, &s, NULL);
+    r = PyText_AsStringAndSize(obj, &s, NULL, encoded_obj);
     if (r != 0)
         return NULL;    /* exception already set */
     assert(s != NULL);
     return s;
 }
-#endif
 
 
 /* Returns true if the object is of a type that can be given to
@@ -412,7 +399,7 @@ static int PyText_Check(PyObject *o) {
 }
 #else
 static int PyText_Check(PyObject *o) {
-    return PyString_Check(o);
+    return PyUnicode_Check(o) || PyString_Check(o);
 }
 #endif
 
@@ -2171,12 +2158,12 @@ do_curl_setopt(CurlObject *self, PyObject *args)
         case CURLOPT_DNS_SERVERS:
 #endif
 /* FIXME: check if more of these options allow binary data */
-            str = PyText_AsString_NoNUL(obj, encoded_obj);
+            str = PyText_AsString_NoNUL(obj, &encoded_obj);
             if (str == NULL)
                 return NULL;
             break;
         case CURLOPT_POSTFIELDS:
-            if (PyText_AsStringAndSize(obj, &str, &len, encoded_obj) != 0)
+            if (PyText_AsStringAndSize(obj, &str, &len, &encoded_obj) != 0)
                 return NULL;
             /* automatically set POSTFIELDSIZE */
             if (len <= INT_MAX) {
@@ -2390,7 +2377,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                     PyErr_SetString(PyExc_TypeError, "tuple must contain two elements (name, value)");
                     return NULL;
                 }
-                if (PyText_AsStringAndSize(PyTuple_GET_ITEM(listitem, 0), &nstr, &nlen, nencoded_obj) != 0) {
+                if (PyText_AsStringAndSize(PyTuple_GET_ITEM(listitem, 0), &nstr, &nlen, &nencoded_obj) != 0) {
                     curl_formfree(post);
                     Py_XDECREF(ref_params);
                     PyErr_SetString(PyExc_TypeError, "tuple must contain string as first element");
@@ -2399,7 +2386,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                 if (PyText_Check(PyTuple_GET_ITEM(listitem, 1))) {
                     /* Handle strings as second argument for backwards compatibility */
 
-                    if (PyText_AsStringAndSize(PyTuple_GET_ITEM(listitem, 1), &cstr, &clen, cencoded_obj)) {
+                    if (PyText_AsStringAndSize(PyTuple_GET_ITEM(listitem, 1), &cstr, &clen, &cencoded_obj)) {
                         curl_formfree(post);
                         Py_XDECREF(ref_params);
                         CURLERROR_RETVAL();
@@ -2485,7 +2472,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                             Py_XDECREF(ref_params);
                             return NULL;
                         }
-                        if (PyText_AsStringAndSize(PyTuple_GET_ITEM(t, j+1), &ostr, &olen, oencoded_obj)) {
+                        if (PyText_AsStringAndSize(PyTuple_GET_ITEM(t, j+1), &ostr, &olen, &oencoded_obj)) {
                             /* exception should be already set */
                             PyMem_Free(forms);
                             curl_formfree(post);
@@ -2588,7 +2575,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
             }
             /* INFO: curl_slist_append() internally does strdup() the data, so
              * no embedded NUL characters allowed here. */
-            str = PyText_AsString_NoNUL(listitem, sencoded_obj);
+            str = PyText_AsString_NoNUL(listitem, &sencoded_obj);
             if (str == NULL) {
                 curl_slist_free_all(slist);
                 return NULL;
diff --git a/tests/header_test.py b/tests/header_test.py
index 65817f0..5e92cae 100644
--- a/tests/header_test.py
+++ b/tests/header_test.py
@@ -27,6 +27,8 @@ class HeaderTest(unittest.TestCase):
     def test_ascii_unicode_header(self):
         self.check(util.u('x-test-header: ascii'), 'ascii')
     
+    # on python 2 unicode is accepted in strings because strings are byte strings
+    @util.only_python3
     @nose.tools.raises(UnicodeEncodeError)
     def test_unicode_string_header(self):
         self.check('x-test-header: Москва', 'Москва')
-- 
1.7.1


From c05db752414d6eab7e0ad100635864d763637916 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Mon, 30 Dec 2013 22:52:49 -0500
Subject: [PATCH 223/236] Document new unicode behavior on python 2

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 doc/unicode.rst |   32 ++++++++++++++++++++++++++------
 1 files changed, 26 insertions(+), 6 deletions(-)

diff --git a/doc/unicode.rst b/doc/unicode.rst
index 754a5eb..5ff56c3 100644
--- a/doc/unicode.rst
+++ b/doc/unicode.rst
@@ -4,12 +4,32 @@ Unicode
 Python 2.x
 ----------
 
-Under Python 2, (binary) string and Unicode types are interchangeable.
-PycURL will pass whatever strings it is given verbatim to libcurl.
-When dealing with Unicode data, this typically means things like
-HTTP request bodies should be encoded to utf-8 before passing them to PycURL.
-Similarly it is on the application to decode HTTP response bodies, if
-they are expected to contain non-ASCII characters.
+Under Python 2, the string type can hold arbitrary encoded byte strings.
+PycURL will pass whatever byte strings it is given verbatim to libcurl.
+
+If your application works with encoded byte strings, you should be able to
+pass them to PycURL. If your application works with Unicode data, you need to
+encode the data to byte strings yourself. Which encoding to use depends on
+the protocol you are working with - HTTP headers should be encoded in latin1,
+HTTP request bodies are commonly encoded in utf-8 and their encoding is
+specified in the Content-Type header value.
+
+Prior to PycURL 7.19.3, PycURL did not accept Unicode data under Python 2.
+Even Unicode strings containing only ASCII code points had to be encoded to
+byte strings.
+
+As of PycURL 7.19.3, for compatibility with Python 3, PycURL will accept
+Unicode strings under Python 2 provided they contain ASCII code points only.
+In other words, PycURL will encode Unicode into ASCII for you. If you supply
+a Unicode string containing characters that are outside of ASCII, the call will
+fail with a UnicodeEncodeError.
+
+PycURL will return data from libcurl, like request bodies and header values,
+as byte strings. If the data is ASCII, you can treat it as string data.
+Otherwise you will need to decode the byte strings usisng the correct encoding.
+What encoding is correct depends on the protocol and potentially returned
+data itself - HTTP response headers are supposed to be latin1 encoded but
+encoding of response body is specified in the Content-Type header.
 
 Python 3.x (from PycURL 7.19.3 onward)
 --------------------------------------
-- 
1.7.1


From 733f5baf80ee1930ca58f5619578095ce3243921 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 31 Dec 2013 00:37:27 -0500
Subject: [PATCH 224/236] Update exception messages and a comment to reflect that strings must be byte strings or ascii

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   11 ++++++-----
 1 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index 7b321d9..e157c55 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -391,7 +391,8 @@ static char *PyText_AsString_NoNUL(PyObject *obj, PyObject **encoded_obj)
 
 
 /* Returns true if the object is of a type that can be given to
- * curl_easy_setopt and such - either a string or a bytestring
+ * curl_easy_setopt and such - either a byte string or a Unicode string
+ * with ASCII code points only.
  */
 #if PY_MAJOR_VERSION >= 3
 static int PyText_Check(PyObject *o) {
@@ -1770,7 +1771,7 @@ read_callback(char *ptr, size_t size, size_t nmemb, void *stream)
     }
     else {
     type_error:
-        PyErr_SetString(ErrorObject, "read callback must return string");
+        PyErr_SetString(ErrorObject, "read callback must return a byte string or Unicode string with ASCII code points only");
         goto verbose_error;
     }
     
@@ -2380,7 +2381,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                 if (PyText_AsStringAndSize(PyTuple_GET_ITEM(listitem, 0), &nstr, &nlen, &nencoded_obj) != 0) {
                     curl_formfree(post);
                     Py_XDECREF(ref_params);
-                    PyErr_SetString(PyExc_TypeError, "tuple must contain string as first element");
+                    PyErr_SetString(PyExc_TypeError, "tuple must contain a byte string or Unicode string with ASCII code points only as first element");
                     return NULL;
                 }
                 if (PyText_Check(PyTuple_GET_ITEM(listitem, 1))) {
@@ -2451,7 +2452,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
                             return NULL;
                         }
                         if (!PyText_Check(PyTuple_GET_ITEM(t, j+1))) {
-                            PyErr_SetString(PyExc_TypeError, "value must be string");
+                            PyErr_SetString(PyExc_TypeError, "value must be a byte string or a Unicode string with ASCII code points only");
                             PyMem_Free(forms);
                             curl_formfree(post);
                             Py_XDECREF(ref_params);
@@ -2570,7 +2571,7 @@ do_curl_setopt(CurlObject *self, PyObject *args)
 
             if (!PyText_Check(listitem)) {
                 curl_slist_free_all(slist);
-                PyErr_SetString(PyExc_TypeError, "list items must be string objects");
+                PyErr_SetString(PyExc_TypeError, "list items must be byte strings or Unicode strings with ASCII code points only");
                 return NULL;
             }
             /* INFO: curl_slist_append() internally does strdup() the data, so
-- 
1.7.1


From 4c83afd969ba665f390ee4d6eee8ca37e3193913 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 31 Dec 2013 03:03:55 -0500
Subject: [PATCH 225/236] Note travis for pull requests in contributing guidelines

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 CONTRIBUTING.md |   15 +++++++++++++++
 1 files changed, 15 insertions(+), 0 deletions(-)

diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 7ae75e8..e4baa97 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -1,3 +1,7 @@
+# Contributing to PycURL
+
+## Issues
+
 Please take a moment to consider whether your issue is a bug report or a
 support request.
 
@@ -14,3 +18,14 @@ People have also had success with getting help at Stack Overflow.
 
 If you are not sure whether your issue is a support request or a bug report,
 please post it to the mailing list.
+
+## Pull Requests
+
+Thanks for writing a patch!
+
+PycURL supports many Python versions, libcurl versions and SSL backends.
+When you submit a pull request, Travis CI will run PycURL test suite
+against it on a bunch of different configurations. Please check back after
+10-15 minutes to see if the tests passed. A message will be shown in
+the pull request as to whether the build and test suite succeeded with your
+patch applied.
-- 
1.7.1


From b59be6c472dec0345c680b7731e42357d0b39acf Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 31 Dec 2013 03:18:59 -0500
Subject: [PATCH 226/236] Make sure that if an expected exception is not raised the tests fail

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/error_test.py |    6 ++++++
 1 files changed, 6 insertions(+), 0 deletions(-)

diff --git a/tests/error_test.py b/tests/error_test.py
index f908efb..f3d30d6 100644
--- a/tests/error_test.py
+++ b/tests/error_test.py
@@ -30,6 +30,8 @@ class ErrorTest(unittest.TestCase):
             self.assertEqual(pycurl.E_URL_MALFORMAT, err)
             # possibly fragile
             self.assertEqual('No URL set!', msg)
+        else:
+            self.fail('Expected pycurl.error to be raised')
 
     # pycurl raises standard library exceptions in some cases
     def test_pycurl_error_stdlib(self):
@@ -38,6 +40,8 @@ class ErrorTest(unittest.TestCase):
             self.curl.setopt(pycurl.WRITEFUNCTION, True)
         except TypeError:
             exc_type, exc = sys.exc_info()[:2]
+        else:
+            self.fail('Expected TypeError to be raised')
 
     # error originating in pycurl
     def test_pycurl_error_pycurl(self):
@@ -56,3 +60,5 @@ class ErrorTest(unittest.TestCase):
             self.assertEqual(1, len(exc.args))
             self.assertEqual(str, type(exc.args[0]))
             self.assertEqual('cannot combine WRITEHEADER with WRITEFUNCTION.', exc.args[0])
+        else:
+            self.fail('Expected pycurl.error to be raised')
-- 
1.7.1


From 6213b345ce1bb699378f200eca13e34f73fe6157 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 31 Dec 2013 03:20:29 -0500
Subject: [PATCH 227/236] Check type and value behavior of errstr

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/error_test.py |   18 ++++++++++++++++++
 1 files changed, 18 insertions(+), 0 deletions(-)

diff --git a/tests/error_test.py b/tests/error_test.py
index f3d30d6..80871ad 100644
--- a/tests/error_test.py
+++ b/tests/error_test.py
@@ -32,6 +32,24 @@ class ErrorTest(unittest.TestCase):
             self.assertEqual('No URL set!', msg)
         else:
             self.fail('Expected pycurl.error to be raised')
+    
+    def test_pycurl_errstr_initially_empty(self):
+        self.assertEqual('', self.curl.errstr())
+    
+    def test_pycurl_errstr_type(self):
+        self.assertEqual('', self.curl.errstr())
+        try:
+            # perform without a url
+            self.curl.perform()
+        except pycurl.error:
+            # might be fragile
+            self.assertEqual('No URL set!', self.curl.errstr())
+            # repeated checks do not clear value
+            self.assertEqual('No URL set!', self.curl.errstr())
+            # check the type - on all python versions
+            self.assertEqual(str, type(self.curl.errstr()))
+        else:
+            self.fail('no exception')
 
     # pycurl raises standard library exceptions in some cases
     def test_pycurl_error_stdlib(self):
-- 
1.7.1


From 100d6e802b0a8bf1821a2b4e96dbf57c64e2181b Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Tue, 31 Dec 2013 20:20:21 -0500
Subject: [PATCH 228/236] Header test uses utf-8 encoded strings, change all encoding declarations in source to utf-8

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 examples/basicfirst.py               |    2 +-
 examples/file_upload.py              |    2 +-
 examples/linksys.py                  |    2 +-
 examples/retriever-multi.py          |    2 +-
 examples/retriever.py                |    2 +-
 examples/sfquery.py                  |    2 +-
 examples/tests/test_gtk.py           |    2 +-
 examples/tests/test_xmlrpc.py        |    2 +-
 examples/xmlrpc_curl.py              |    2 +-
 setup.py                             |    2 +-
 tests/certinfo_test.py               |    2 +-
 tests/curlopt_test.py                |    2 +-
 tests/debug_test.py                  |    2 +-
 tests/default_write_function_test.py |    2 +-
 tests/easy_test.py                   |    2 +-
 tests/error_test.py                  |    2 +-
 tests/ftp_test.py                    |    2 +-
 tests/getinfo_test.py                |    2 +-
 tests/global_init_test.py            |    2 +-
 tests/header_function_test.py        |    2 +-
 tests/header_test.py                 |    2 +-
 tests/internals_test.py              |    2 +-
 tests/memory_mgmt_test.py            |    2 +-
 tests/multi_socket_select_test.py    |    2 +-
 tests/multi_socket_test.py           |    2 +-
 tests/multi_test.py                  |    2 +-
 tests/multi_timer_test.py            |    2 +-
 tests/pause_test.py                  |    2 +-
 tests/post_test.py                   |    2 +-
 tests/pycurl_object_test.py          |    2 +-
 tests/relative_url_test.py           |    2 +-
 tests/reset_test.py                  |    2 +-
 tests/resolve_test.py                |    2 +-
 tests/seek_function_test.py          |    2 +-
 tests/setopt_lifecycle_test.py       |    2 +-
 tests/share_test.py                  |    2 +-
 tests/socket_open_test.py            |    2 +-
 tests/unset_range_test.py            |    2 +-
 tests/user_agent_string_test.py      |    2 +-
 tests/util.py                        |    2 +-
 tests/version_comparison_test.py     |    2 +-
 tests/version_test.py                |    2 +-
 tests/write_abort_test.py            |    2 +-
 tests/write_cb_bogus_test.py         |    2 +-
 tests/write_to_file_test.py          |    2 +-
 tests/write_to_stringio_test.py      |    2 +-
 46 files changed, 46 insertions(+), 46 deletions(-)

diff --git a/examples/basicfirst.py b/examples/basicfirst.py
index d225018..6eacd45 100644
--- a/examples/basicfirst.py
+++ b/examples/basicfirst.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import sys
diff --git a/examples/file_upload.py b/examples/file_upload.py
index 0b4b457..a3b769a 100644
--- a/examples/file_upload.py
+++ b/examples/file_upload.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import os, sys
diff --git a/examples/linksys.py b/examples/linksys.py
index f66ff0d..3c6f837 100755
--- a/examples/linksys.py
+++ b/examples/linksys.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 #
 # linksys.py -- program settings on a Linkys router
diff --git a/examples/retriever-multi.py b/examples/retriever-multi.py
index 39a9eae..2daff11 100644
--- a/examples/retriever-multi.py
+++ b/examples/retriever-multi.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 #
diff --git a/examples/retriever.py b/examples/retriever.py
index ab84962..7cabea3 100644
--- a/examples/retriever.py
+++ b/examples/retriever.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 #
diff --git a/examples/sfquery.py b/examples/sfquery.py
index 16aa9d4..b0836d0 100644
--- a/examples/sfquery.py
+++ b/examples/sfquery.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 #
 # sfquery -- Source Forge query script using the ClientCGI high-level interface
diff --git a/examples/tests/test_gtk.py b/examples/tests/test_gtk.py
index b2835fa..3aeebd6 100644
--- a/examples/tests/test_gtk.py
+++ b/examples/tests/test_gtk.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import sys, threading
diff --git a/examples/tests/test_xmlrpc.py b/examples/tests/test_xmlrpc.py
index 166c0fa..9fb0f94 100644
--- a/examples/tests/test_xmlrpc.py
+++ b/examples/tests/test_xmlrpc.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 ## XML-RPC lib included in python2.2
diff --git a/examples/xmlrpc_curl.py b/examples/xmlrpc_curl.py
index 55627fa..3cdb2d3 100644
--- a/examples/xmlrpc_curl.py
+++ b/examples/xmlrpc_curl.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 # We should ignore SIGPIPE when using pycurl.NOSIGNAL - see
diff --git a/setup.py b/setup.py
index 0cea441..9082d20 100644
--- a/setup.py
+++ b/setup.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 """Setup script for the PycURL module distribution."""
diff --git a/tests/certinfo_test.py b/tests/certinfo_test.py
index c861032..26d669d 100644
--- a/tests/certinfo_test.py
+++ b/tests/certinfo_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/curlopt_test.py b/tests/curlopt_test.py
index fe11ab2..ecc2c10 100644
--- a/tests/curlopt_test.py
+++ b/tests/curlopt_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/debug_test.py b/tests/debug_test.py
index 4b9e571..5c273ce 100644
--- a/tests/debug_test.py
+++ b/tests/debug_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/default_write_function_test.py b/tests/default_write_function_test.py
index cdf848b..c552568 100644
--- a/tests/default_write_function_test.py
+++ b/tests/default_write_function_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import unittest
diff --git a/tests/easy_test.py b/tests/easy_test.py
index 7f5867e..a3d4539 100644
--- a/tests/easy_test.py
+++ b/tests/easy_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/error_test.py b/tests/error_test.py
index 80871ad..32a5add 100644
--- a/tests/error_test.py
+++ b/tests/error_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/ftp_test.py b/tests/ftp_test.py
index 520ebdc..a88fc44 100644
--- a/tests/ftp_test.py
+++ b/tests/ftp_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 # Note: this test is meant to be run from pycurl project root.
diff --git a/tests/getinfo_test.py b/tests/getinfo_test.py
index 46a3a87..49d9393 100644
--- a/tests/getinfo_test.py
+++ b/tests/getinfo_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/global_init_test.py b/tests/global_init_test.py
index b0d1986..27dab76 100644
--- a/tests/global_init_test.py
+++ b/tests/global_init_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/header_function_test.py b/tests/header_function_test.py
index 7c8c446..0eac72c 100644
--- a/tests/header_function_test.py
+++ b/tests/header_function_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/header_test.py b/tests/header_test.py
index 5e92cae..d0cc870 100644
--- a/tests/header_test.py
+++ b/tests/header_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/internals_test.py b/tests/internals_test.py
index c0b8432..7e26ae0 100644
--- a/tests/internals_test.py
+++ b/tests/internals_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/memory_mgmt_test.py b/tests/memory_mgmt_test.py
index 0d7678d..7281923 100644
--- a/tests/memory_mgmt_test.py
+++ b/tests/memory_mgmt_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/multi_socket_select_test.py b/tests/multi_socket_select_test.py
index 0936d4b..79f4e87 100644
--- a/tests/multi_socket_select_test.py
+++ b/tests/multi_socket_select_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/multi_socket_test.py b/tests/multi_socket_test.py
index a2d6702..d5ea30e 100644
--- a/tests/multi_socket_test.py
+++ b/tests/multi_socket_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/multi_test.py b/tests/multi_test.py
index 18f3123..1afa674 100644
--- a/tests/multi_test.py
+++ b/tests/multi_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/multi_timer_test.py b/tests/multi_timer_test.py
index 650aa3a..a11054c 100644
--- a/tests/multi_timer_test.py
+++ b/tests/multi_timer_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/pause_test.py b/tests/pause_test.py
index 5e9d74f..8f993de 100644
--- a/tests/pause_test.py
+++ b/tests/pause_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/post_test.py b/tests/post_test.py
index 827e855..bd83944 100644
--- a/tests/post_test.py
+++ b/tests/post_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import os.path
diff --git a/tests/pycurl_object_test.py b/tests/pycurl_object_test.py
index 80a12a9..7e5dcf3 100644
--- a/tests/pycurl_object_test.py
+++ b/tests/pycurl_object_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/relative_url_test.py b/tests/relative_url_test.py
index 4cce45f..42052ec 100644
--- a/tests/relative_url_test.py
+++ b/tests/relative_url_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 # uses the high level interface
diff --git a/tests/reset_test.py b/tests/reset_test.py
index 089a25a..f3c5fd3 100644
--- a/tests/reset_test.py
+++ b/tests/reset_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
diff --git a/tests/resolve_test.py b/tests/resolve_test.py
index eb00bdc..7539d23 100644
--- a/tests/resolve_test.py
+++ b/tests/resolve_test.py
@@ -1,4 +1,4 @@
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 
 import pycurl
 import unittest
diff --git a/tests/seek_function_test.py b/tests/seek_function_test.py
index 33a1334..48b9171 100644
--- a/tests/seek_function_test.py
+++ b/tests/seek_function_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 # Note: this test is meant to be run from pycurl project root.
diff --git a/tests/setopt_lifecycle_test.py b/tests/setopt_lifecycle_test.py
index 7e228da..0c00bd0 100644
--- a/tests/setopt_lifecycle_test.py
+++ b/tests/setopt_lifecycle_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import gc
diff --git a/tests/share_test.py b/tests/share_test.py
index 0f906be..cb008a6 100644
--- a/tests/share_test.py
+++ b/tests/share_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import threading
diff --git a/tests/socket_open_test.py b/tests/socket_open_test.py
index c31c218..78a214c 100644
--- a/tests/socket_open_test.py
+++ b/tests/socket_open_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import socket
diff --git a/tests/unset_range_test.py b/tests/unset_range_test.py
index 10ee801..f64e43a 100644
--- a/tests/unset_range_test.py
+++ b/tests/unset_range_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import os.path
diff --git a/tests/user_agent_string_test.py b/tests/user_agent_string_test.py
index eb7ce87..e391f1b 100644
--- a/tests/user_agent_string_test.py
+++ b/tests/user_agent_string_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import unittest
diff --git a/tests/util.py b/tests/util.py
index 6e3f551..c56dc08 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -1,4 +1,4 @@
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import os, sys, socket
diff --git a/tests/version_comparison_test.py b/tests/version_comparison_test.py
index 80e780c..f13a53c 100644
--- a/tests/version_comparison_test.py
+++ b/tests/version_comparison_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import unittest
diff --git a/tests/version_test.py b/tests/version_test.py
index 1e4dab7..a021a49 100644
--- a/tests/version_test.py
+++ b/tests/version_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import unittest
diff --git a/tests/write_abort_test.py b/tests/write_abort_test.py
index 6bfc2a8..4867ade 100644
--- a/tests/write_abort_test.py
+++ b/tests/write_abort_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import os.path
diff --git a/tests/write_cb_bogus_test.py b/tests/write_cb_bogus_test.py
index 65e623c..6278ffd 100644
--- a/tests/write_cb_bogus_test.py
+++ b/tests/write_cb_bogus_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import os.path
diff --git a/tests/write_to_file_test.py b/tests/write_to_file_test.py
index 5612557..09b1abc 100644
--- a/tests/write_to_file_test.py
+++ b/tests/write_to_file_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import unittest
diff --git a/tests/write_to_stringio_test.py b/tests/write_to_stringio_test.py
index c514d40..a27251b 100644
--- a/tests/write_to_stringio_test.py
+++ b/tests/write_to_stringio_test.py
@@ -1,5 +1,5 @@
 #! /usr/bin/env python
-# -*- coding: iso-8859-1 -*-
+# -*- coding: utf-8 -*-
 # vi:ts=4:et
 
 import pycurl
-- 
1.7.1


From d3ea7706686606dbc75c91095fd8b419d0cabca9 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 1 Jan 2014 05:34:35 -0500
Subject: [PATCH 229/236] Rename the test because I keep forgetting its name

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/curlopt_test.py          |   69 ----------------------------------------
 tests/option_constants_test.py |   69 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 69 insertions(+), 69 deletions(-)
 delete mode 100644 tests/curlopt_test.py
 create mode 100644 tests/option_constants_test.py

diff --git a/tests/curlopt_test.py b/tests/curlopt_test.py
deleted file mode 100644
index ecc2c10..0000000
--- a/tests/curlopt_test.py
+++ /dev/null
@@ -1,69 +0,0 @@
-#! /usr/bin/env python
-# -*- coding: utf-8 -*-
-# vi:ts=4:et
-
-import pycurl
-import unittest
-import nose.plugins.skip
-
-from . import util
-
-class CurloptTest(unittest.TestCase):
-    # CURLOPT_USERNAME was introduced in libcurl-7.19.1
-    @util.min_libcurl(7, 19, 1)
-    def test_username(self):
-        assert hasattr(pycurl, 'USERNAME')
-        assert hasattr(pycurl, 'PASSWORD')
-        assert hasattr(pycurl, 'PROXYUSERNAME')
-        assert hasattr(pycurl, 'PROXYPASSWORD')
-    
-    # CURLOPT_DNS_SERVERS was introduced in libcurl-7.24.0
-    @util.min_libcurl(7, 24, 0)
-    def test_dns_servers(self):
-        assert hasattr(pycurl, 'DNS_SERVERS')
-        
-        # Does not work unless libcurl was built against c-ares
-        #c = pycurl.Curl()
-        #c.setopt(c.DNS_SERVERS, '1.2.3.4')
-        #c.close()
-
-    # CURLOPT_POSTREDIR was introduced in libcurl-7.19.1
-    @util.min_libcurl(7, 19, 1)
-    def test_postredir(self):
-        assert hasattr(pycurl, 'POSTREDIR')
-        assert hasattr(pycurl, 'REDIR_POST_301')
-        assert hasattr(pycurl, 'REDIR_POST_302')
-        assert hasattr(pycurl, 'REDIR_POST_ALL')
-    
-    # CURLOPT_POSTREDIR was introduced in libcurl-7.19.1
-    @util.min_libcurl(7, 19, 1)
-    def test_postredir_setopt(self):
-        curl = pycurl.Curl()
-        curl.setopt(curl.POSTREDIR, curl.REDIR_POST_301)
-        curl.close()
-    
-    # CURL_REDIR_POST_303 was introduced in libcurl-7.26.0
-    @util.min_libcurl(7, 26, 0)
-    def test_redir_post_303(self):
-        assert hasattr(pycurl, 'REDIR_POST_303')
-
-    # CURLOPT_POSTREDIR was introduced in libcurl-7.19.1
-    @util.min_libcurl(7, 19, 1)
-    def test_postredir_flags(self):
-        self.assertEqual(pycurl.REDIR_POST_301, pycurl.REDIR_POST_ALL & pycurl.REDIR_POST_301)
-        self.assertEqual(pycurl.REDIR_POST_302, pycurl.REDIR_POST_ALL & pycurl.REDIR_POST_302)
-
-    # CURL_REDIR_POST_303 was introduced in libcurl-7.26.0
-    @util.min_libcurl(7, 26, 0)
-    def test_postredir_flags(self):
-        self.assertEqual(pycurl.REDIR_POST_303, pycurl.REDIR_POST_ALL & pycurl.REDIR_POST_303)
-
-    # HTTPAUTH_DIGEST_IE was introduced in libcurl-7.19.3
-    @util.min_libcurl(7, 19, 3)
-    def test_httpauth_digest_ie(self):
-        assert hasattr(pycurl, 'HTTPAUTH_DIGEST_IE')
-
-    # CURLE_OPERATION_TIMEDOUT was introduced in libcurl-7.10.2
-    # to replace CURLE_OPERATION_TIMEOUTED
-    def test_operation_timedout_constant(self):
-        self.assertEqual(pycurl.E_OPERATION_TIMEDOUT, pycurl.E_OPERATION_TIMEOUTED)
diff --git a/tests/option_constants_test.py b/tests/option_constants_test.py
new file mode 100644
index 0000000..dc0a95c
--- /dev/null
+++ b/tests/option_constants_test.py
@@ -0,0 +1,69 @@
+#! /usr/bin/env python
+# -*- coding: utf-8 -*-
+# vi:ts=4:et
+
+import pycurl
+import unittest
+import nose.plugins.skip
+
+from . import util
+
+class OptionConstantsTest(unittest.TestCase):
+    # CURLOPT_USERNAME was introduced in libcurl-7.19.1
+    @util.min_libcurl(7, 19, 1)
+    def test_username(self):
+        assert hasattr(pycurl, 'USERNAME')
+        assert hasattr(pycurl, 'PASSWORD')
+        assert hasattr(pycurl, 'PROXYUSERNAME')
+        assert hasattr(pycurl, 'PROXYPASSWORD')
+    
+    # CURLOPT_DNS_SERVERS was introduced in libcurl-7.24.0
+    @util.min_libcurl(7, 24, 0)
+    def test_dns_servers(self):
+        assert hasattr(pycurl, 'DNS_SERVERS')
+        
+        # Does not work unless libcurl was built against c-ares
+        #c = pycurl.Curl()
+        #c.setopt(c.DNS_SERVERS, '1.2.3.4')
+        #c.close()
+
+    # CURLOPT_POSTREDIR was introduced in libcurl-7.19.1
+    @util.min_libcurl(7, 19, 1)
+    def test_postredir(self):
+        assert hasattr(pycurl, 'POSTREDIR')
+        assert hasattr(pycurl, 'REDIR_POST_301')
+        assert hasattr(pycurl, 'REDIR_POST_302')
+        assert hasattr(pycurl, 'REDIR_POST_ALL')
+    
+    # CURLOPT_POSTREDIR was introduced in libcurl-7.19.1
+    @util.min_libcurl(7, 19, 1)
+    def test_postredir_setopt(self):
+        curl = pycurl.Curl()
+        curl.setopt(curl.POSTREDIR, curl.REDIR_POST_301)
+        curl.close()
+    
+    # CURL_REDIR_POST_303 was introduced in libcurl-7.26.0
+    @util.min_libcurl(7, 26, 0)
+    def test_redir_post_303(self):
+        assert hasattr(pycurl, 'REDIR_POST_303')
+
+    # CURLOPT_POSTREDIR was introduced in libcurl-7.19.1
+    @util.min_libcurl(7, 19, 1)
+    def test_postredir_flags(self):
+        self.assertEqual(pycurl.REDIR_POST_301, pycurl.REDIR_POST_ALL & pycurl.REDIR_POST_301)
+        self.assertEqual(pycurl.REDIR_POST_302, pycurl.REDIR_POST_ALL & pycurl.REDIR_POST_302)
+
+    # CURL_REDIR_POST_303 was introduced in libcurl-7.26.0
+    @util.min_libcurl(7, 26, 0)
+    def test_postredir_flags(self):
+        self.assertEqual(pycurl.REDIR_POST_303, pycurl.REDIR_POST_ALL & pycurl.REDIR_POST_303)
+
+    # HTTPAUTH_DIGEST_IE was introduced in libcurl-7.19.3
+    @util.min_libcurl(7, 19, 3)
+    def test_httpauth_digest_ie(self):
+        assert hasattr(pycurl, 'HTTPAUTH_DIGEST_IE')
+
+    # CURLE_OPERATION_TIMEDOUT was introduced in libcurl-7.10.2
+    # to replace CURLE_OPERATION_TIMEOUTED
+    def test_operation_timedout_constant(self):
+        self.assertEqual(pycurl.E_OPERATION_TIMEDOUT, pycurl.E_OPERATION_TIMEOUTED)
-- 
1.7.1


From 9f27e95fda04d321a15eae54886c34359b0a336b Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 1 Jan 2014 05:36:57 -0500
Subject: [PATCH 230/236] Rename the test to better reflect its contents - read callback is the important part

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/post_with_read_callback_test.py |  132 ---------------------------------
 tests/read_callback_test.py           |  132 +++++++++++++++++++++++++++++++++
 2 files changed, 132 insertions(+), 132 deletions(-)
 delete mode 100644 tests/post_with_read_callback_test.py
 create mode 100644 tests/read_callback_test.py

diff --git a/tests/post_with_read_callback_test.py b/tests/post_with_read_callback_test.py
deleted file mode 100644
index bf05540..0000000
--- a/tests/post_with_read_callback_test.py
+++ /dev/null
@@ -1,132 +0,0 @@
-#! /usr/bin/env python
-# -*- coding: utf-8 -*-
-# vi:ts=4:et
-
-import pycurl
-import unittest
-import sys
-try:
-    import json
-except ImportError:
-    import simplejson as json
-try:
-    import urllib.parse as urllib_parse
-except ImportError:
-    import urllib as urllib_parse
-
-from . import appmanager
-from . import util
-
-setup_module, teardown_module = appmanager.setup(('app', 8380))
-
-POSTFIELDS = {
-    'field1':'value1',
-    'field2':'value2 with blanks',
-    'field3':'value3',
-}
-POSTSTRING = urllib_parse.urlencode(POSTFIELDS)
-
-class DataProvider(object):
-    def __init__(self, data):
-        self.data = data
-        self.finished = False
-
-    def read_cb(self, size):
-        assert len(self.data) <= size
-        if not self.finished:
-            self.finished = True
-            return self.data
-        else:
-            # Nothing more to read
-            return ""
-
-class PostWithReadCallbackTest(unittest.TestCase):
-    def setUp(self):
-        self.curl = pycurl.Curl()
-    
-    def tearDown(self):
-        self.curl.close()
-    
-    def test_post_with_read_callback(self):
-        d = DataProvider(POSTSTRING)
-        self.curl.setopt(self.curl.URL, 'http://localhost:8380/postfields')
-        self.curl.setopt(self.curl.POST, 1)
-        self.curl.setopt(self.curl.POSTFIELDSIZE, len(POSTSTRING))
-        self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
-        #self.curl.setopt(self.curl.VERBOSE, 1)
-        sio = util.BytesIO()
-        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
-        self.curl.perform()
-        
-        actual = json.loads(sio.getvalue().decode())
-        self.assertEqual(POSTFIELDS, actual)
-    
-    @util.only_python3
-    def test_post_with_read_callback_returning_bytes(self):
-        self.check_bytes('world')
-    
-    @util.only_python3
-    def test_post_with_read_callback_returning_bytes_with_nulls(self):
-        self.check_bytes("wor\0ld")
-    
-    @util.only_python3
-    def test_post_with_read_callback_returning_bytes_with_multibyte(self):
-        self.check_bytes("Пушкин")
-    
-    def check_bytes(self, poststring):
-        data = poststring.encode('utf8')
-        assert type(data) == bytes
-        d = DataProvider(data)
-        
-        self.curl.setopt(self.curl.URL, 'http://localhost:8380/raw_utf8')
-        self.curl.setopt(self.curl.POST, 1)
-        self.curl.setopt(self.curl.HTTPHEADER, ['Content-Type: application/octet-stream'])
-        # length of bytes
-        self.curl.setopt(self.curl.POSTFIELDSIZE, len(data))
-        self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
-        #self.curl.setopt(self.curl.VERBOSE, 1)
-        sio = util.BytesIO()
-        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
-        self.curl.perform()
-        
-        # json should be ascii
-        actual = json.loads(sio.getvalue().decode('ascii'))
-        self.assertEqual(poststring, actual)
-    
-    @util.only_python3
-    def test_post_with_read_callback_returning_unicode(self):
-        self.check_unicode('world')
-    
-    @util.only_python3
-    def test_post_with_read_callback_returning_unicode_with_nulls(self):
-        self.check_unicode("wor\0ld")
-    
-    @util.only_python3
-    def test_post_with_read_callback_returning_unicode_with_multibyte(self):
-        try:
-            self.check_unicode("Пушкин")
-            # prints:
-            # UnicodeEncodeError: 'ascii' codec can't encode characters in position 6-11: ordinal not in range(128)
-        except pycurl.error:
-            err, msg = sys.exc_info()[1].args
-            # we expect pycurl.E_WRITE_ERROR as the response
-            self.assertEqual(pycurl.E_ABORTED_BY_CALLBACK, err)
-            self.assertEqual('operation aborted by callback', msg)
-    
-    def check_unicode(self, poststring):
-        assert type(poststring) == str
-        d = DataProvider(poststring)
-        
-        self.curl.setopt(self.curl.URL, 'http://localhost:8380/raw_utf8')
-        self.curl.setopt(self.curl.POST, 1)
-        self.curl.setopt(self.curl.HTTPHEADER, ['Content-Type: application/octet-stream'])
-        self.curl.setopt(self.curl.POSTFIELDSIZE, len(poststring))
-        self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
-        #self.curl.setopt(self.curl.VERBOSE, 1)
-        sio = util.BytesIO()
-        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
-        self.curl.perform()
-        
-        # json should be ascii
-        actual = json.loads(sio.getvalue().decode('ascii'))
-        self.assertEqual(poststring, actual)
diff --git a/tests/read_callback_test.py b/tests/read_callback_test.py
new file mode 100644
index 0000000..a2f50be
--- /dev/null
+++ b/tests/read_callback_test.py
@@ -0,0 +1,132 @@
+#! /usr/bin/env python
+# -*- coding: utf-8 -*-
+# vi:ts=4:et
+
+import pycurl
+import unittest
+import sys
+try:
+    import json
+except ImportError:
+    import simplejson as json
+try:
+    import urllib.parse as urllib_parse
+except ImportError:
+    import urllib as urllib_parse
+
+from . import appmanager
+from . import util
+
+setup_module, teardown_module = appmanager.setup(('app', 8380))
+
+POSTFIELDS = {
+    'field1':'value1',
+    'field2':'value2 with blanks',
+    'field3':'value3',
+}
+POSTSTRING = urllib_parse.urlencode(POSTFIELDS)
+
+class DataProvider(object):
+    def __init__(self, data):
+        self.data = data
+        self.finished = False
+
+    def read_cb(self, size):
+        assert len(self.data) <= size
+        if not self.finished:
+            self.finished = True
+            return self.data
+        else:
+            # Nothing more to read
+            return ""
+
+class ReadCallbackTest(unittest.TestCase):
+    def setUp(self):
+        self.curl = pycurl.Curl()
+    
+    def tearDown(self):
+        self.curl.close()
+    
+    def test_post_with_read_callback(self):
+        d = DataProvider(POSTSTRING)
+        self.curl.setopt(self.curl.URL, 'http://localhost:8380/postfields')
+        self.curl.setopt(self.curl.POST, 1)
+        self.curl.setopt(self.curl.POSTFIELDSIZE, len(POSTSTRING))
+        self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
+        #self.curl.setopt(self.curl.VERBOSE, 1)
+        sio = util.BytesIO()
+        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
+        self.curl.perform()
+        
+        actual = json.loads(sio.getvalue().decode())
+        self.assertEqual(POSTFIELDS, actual)
+    
+    @util.only_python3
+    def test_post_with_read_callback_returning_bytes(self):
+        self.check_bytes('world')
+    
+    @util.only_python3
+    def test_post_with_read_callback_returning_bytes_with_nulls(self):
+        self.check_bytes("wor\0ld")
+    
+    @util.only_python3
+    def test_post_with_read_callback_returning_bytes_with_multibyte(self):
+        self.check_bytes("Пушкин")
+    
+    def check_bytes(self, poststring):
+        data = poststring.encode('utf8')
+        assert type(data) == bytes
+        d = DataProvider(data)
+        
+        self.curl.setopt(self.curl.URL, 'http://localhost:8380/raw_utf8')
+        self.curl.setopt(self.curl.POST, 1)
+        self.curl.setopt(self.curl.HTTPHEADER, ['Content-Type: application/octet-stream'])
+        # length of bytes
+        self.curl.setopt(self.curl.POSTFIELDSIZE, len(data))
+        self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
+        #self.curl.setopt(self.curl.VERBOSE, 1)
+        sio = util.BytesIO()
+        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
+        self.curl.perform()
+        
+        # json should be ascii
+        actual = json.loads(sio.getvalue().decode('ascii'))
+        self.assertEqual(poststring, actual)
+    
+    @util.only_python3
+    def test_post_with_read_callback_returning_unicode(self):
+        self.check_unicode('world')
+    
+    @util.only_python3
+    def test_post_with_read_callback_returning_unicode_with_nulls(self):
+        self.check_unicode("wor\0ld")
+    
+    @util.only_python3
+    def test_post_with_read_callback_returning_unicode_with_multibyte(self):
+        try:
+            self.check_unicode("Пушкин")
+            # prints:
+            # UnicodeEncodeError: 'ascii' codec can't encode characters in position 6-11: ordinal not in range(128)
+        except pycurl.error:
+            err, msg = sys.exc_info()[1].args
+            # we expect pycurl.E_WRITE_ERROR as the response
+            self.assertEqual(pycurl.E_ABORTED_BY_CALLBACK, err)
+            self.assertEqual('operation aborted by callback', msg)
+    
+    def check_unicode(self, poststring):
+        assert type(poststring) == str
+        d = DataProvider(poststring)
+        
+        self.curl.setopt(self.curl.URL, 'http://localhost:8380/raw_utf8')
+        self.curl.setopt(self.curl.POST, 1)
+        self.curl.setopt(self.curl.HTTPHEADER, ['Content-Type: application/octet-stream'])
+        self.curl.setopt(self.curl.POSTFIELDSIZE, len(poststring))
+        self.curl.setopt(self.curl.READFUNCTION, d.read_cb)
+        #self.curl.setopt(self.curl.VERBOSE, 1)
+        sio = util.BytesIO()
+        self.curl.setopt(pycurl.WRITEFUNCTION, sio.write)
+        self.curl.perform()
+        
+        # json should be ascii
+        actual = json.loads(sio.getvalue().decode('ascii'))
+        self.assertEqual(poststring, actual)
-- 
1.7.1


From ba089d3dd359b4050d0f9136fec50d5faeda7d5f Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 1 Jan 2014 05:46:15 -0500
Subject: [PATCH 231/236] Make endpoint function name equal to the routed path

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/app.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/tests/app.py b/tests/app.py
index 0bb2e21..e578196 100644
--- a/tests/app.py
+++ b/tests/app.py
@@ -32,7 +32,7 @@ def postfields():
     return json.dumps(dict(bottle.request.forms))
 
 @app.route('/raw_utf8', method='post')
-def raw_utf8_repr():
+def raw_utf8():
     data = bottle.request.body.getvalue().decode('utf8')
     return json.dumps(data)
 
-- 
1.7.1


From 70b289944188e90152ab42a673f66fd5cab5e5d6 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 1 Jan 2014 05:46:56 -0500
Subject: [PATCH 232/236] Accept unicode with ascii code points from read callback on python 2

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c                |    4 +---
 tests/read_callback_test.py |   11 ++++-------
 tests/util.py               |    2 ++
 3 files changed, 7 insertions(+), 10 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index e157c55..b7bcd62 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -1717,7 +1717,6 @@ read_callback(char *ptr, size_t size, size_t nmemb, void *stream)
         memcpy(ptr, buf, obj_size);
         ret = obj_size;             /* success */
     }
-#if PY_MAJOR_VERSION >= 3
     else if (PyUnicode_Check(result)) {
         char *buf = NULL;
         Py_ssize_t obj_size = -1;
@@ -1744,7 +1743,7 @@ read_callback(char *ptr, size_t size, size_t nmemb, void *stream)
         if (encoded == NULL) {
             goto verbose_error;
         }
-        r = PyBytes_AsStringAndSize(encoded, &buf, &obj_size);
+        r = PyByteStr_AsStringAndSize(encoded, &buf, &obj_size);
         if (r != 0 || obj_size < 0 || obj_size > total_size) {
             Py_DECREF(encoded);
             PyErr_Format(ErrorObject, "invalid return value for read callback (%ld bytes returned after encoding to utf-8 when at most %ld bytes were wanted)", (long)obj_size, (long)total_size);
@@ -1754,7 +1753,6 @@ read_callback(char *ptr, size_t size, size_t nmemb, void *stream)
         Py_DECREF(encoded);
         ret = obj_size;             /* success */
     }
-#endif
 #if PY_MAJOR_VERSION < 3
     else if (PyInt_Check(result)) {
         long r = PyInt_AsLong(result);
diff --git a/tests/read_callback_test.py b/tests/read_callback_test.py
index a2f50be..690fe28 100644
--- a/tests/read_callback_test.py
+++ b/tests/read_callback_test.py
@@ -93,18 +93,15 @@ class ReadCallbackTest(unittest.TestCase):
         actual = json.loads(sio.getvalue().decode('ascii'))
         self.assertEqual(poststring, actual)
     
-    @util.only_python3
     def test_post_with_read_callback_returning_unicode(self):
-        self.check_unicode('world')
+        self.check_unicode(util.u('world'))
     
-    @util.only_python3
     def test_post_with_read_callback_returning_unicode_with_nulls(self):
-        self.check_unicode("wor\0ld")
+        self.check_unicode(util.u("wor\0ld"))
     
-    @util.only_python3
     def test_post_with_read_callback_returning_unicode_with_multibyte(self):
         try:
-            self.check_unicode("Пушкин")
+            self.check_unicode(util.u("Пушкин"))
             # prints:
             # UnicodeEncodeError: 'ascii' codec can't encode characters in position 6-11: ordinal not in range(128)
         except pycurl.error:
@@ -114,7 +111,7 @@ class ReadCallbackTest(unittest.TestCase):
             self.assertEqual('operation aborted by callback', msg)
     
     def check_unicode(self, poststring):
-        assert type(poststring) == str
+        assert type(poststring) == util.text_type
         d = DataProvider(poststring)
         
         self.curl.setopt(self.curl.URL, 'http://localhost:8380/raw_utf8')
diff --git a/tests/util.py b/tests/util.py
index c56dc08..4779842 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -21,6 +21,7 @@ if py3:
     def u(s):
         '''Text literal'''
         return s
+    text_type = str
 else:
     try:
         from cStringIO import StringIO
@@ -36,6 +37,7 @@ else:
     def u(s):
         '''Text literal'''
         return unicode(s.replace(r'\\', r'\\\\'), "unicode_escape")
+    text_type = unicode
 
 def version_less_than_spec(version_tuple, spec_tuple):
     # spec_tuple may have 2 elements, expect version_tuple to have 3 elements
-- 
1.7.1


From 4cd4e448fb2aa830b15f4db047ee62ab89e969ee Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 1 Jan 2014 05:53:40 -0500
Subject: [PATCH 233/236] Test byte strings returned from read callback on python 2

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/read_callback_test.py |    5 +----
 1 files changed, 1 insertions(+), 4 deletions(-)

diff --git a/tests/read_callback_test.py b/tests/read_callback_test.py
index 690fe28..cc9a5e7 100644
--- a/tests/read_callback_test.py
+++ b/tests/read_callback_test.py
@@ -61,17 +61,14 @@ class ReadCallbackTest(unittest.TestCase):
         actual = json.loads(sio.getvalue().decode())
         self.assertEqual(POSTFIELDS, actual)
     
-    @util.only_python3
     def test_post_with_read_callback_returning_bytes(self):
         self.check_bytes('world')
     
-    @util.only_python3
     def test_post_with_read_callback_returning_bytes_with_nulls(self):
         self.check_bytes("wor\0ld")
     
-    @util.only_python3
     def test_post_with_read_callback_returning_bytes_with_multibyte(self):
-        self.check_bytes("Пушкин")
+        self.check_bytes(util.u("Пушкин"))
     
     def check_bytes(self, poststring):
         data = poststring.encode('utf8')
-- 
1.7.1


From 54ef96cf5ac141f1e9ab076adf854e00c8dade14 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 1 Jan 2014 14:05:58 -0500
Subject: [PATCH 234/236] Python 2.4 and 2.5 compatibility

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 tests/read_callback_test.py |    2 +-
 tests/util.py               |    2 ++
 2 files changed, 3 insertions(+), 1 deletions(-)

diff --git a/tests/read_callback_test.py b/tests/read_callback_test.py
index cc9a5e7..e3aacb1 100644
--- a/tests/read_callback_test.py
+++ b/tests/read_callback_test.py
@@ -72,7 +72,7 @@ class ReadCallbackTest(unittest.TestCase):
     
     def check_bytes(self, poststring):
         data = poststring.encode('utf8')
-        assert type(data) == bytes
+        assert type(data) == util.binary_type
         d = DataProvider(data)
         
         self.curl.setopt(self.curl.URL, 'http://localhost:8380/raw_utf8')
diff --git a/tests/util.py b/tests/util.py
index 4779842..9eca60f 100644
--- a/tests/util.py
+++ b/tests/util.py
@@ -22,6 +22,7 @@ if py3:
         '''Text literal'''
         return s
     text_type = str
+    binary_type = bytes
 else:
     try:
         from cStringIO import StringIO
@@ -38,6 +39,7 @@ else:
         '''Text literal'''
         return unicode(s.replace(r'\\', r'\\\\'), "unicode_escape")
     text_type = unicode
+    binary_type = str
 
 def version_less_than_spec(version_tuple, spec_tuple):
     # spec_tuple may have 2 elements, expect version_tuple to have 3 elements
-- 
1.7.1


From ddb817b5b1585cb73e1c011f446995df33195e2f Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 1 Jan 2014 10:38:42 -0500
Subject: [PATCH 235/236] Use PyByteStr_AsStringAndSize macro for dryness

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   12 ++----------
 1 files changed, 2 insertions(+), 10 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index b7bcd62..b9d62ef 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -347,11 +347,7 @@ int PyText_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length, PyO
     if (PyString_Check(obj)) {
 #endif
         *encoded_obj = NULL;
-#if PY_MAJOR_VERSION >= 3
-        return PyBytes_AsStringAndSize(obj, buffer, length);
-#else
-        return PyString_AsStringAndSize(obj, buffer, length);
-#endif
+        return PyByteStr_AsStringAndSize(obj, buffer, length);
     } else {
         int rv;
         assert(PyUnicode_Check(obj));
@@ -359,11 +355,7 @@ int PyText_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length, PyO
         if (*encoded_obj == NULL) {
             return -1;
         }
-#if PY_MAJOR_VERSION >= 3
-        rv = PyBytes_AsStringAndSize(*encoded_obj, buffer, length);
-#else
-        rv = PyString_AsStringAndSize(*encoded_obj, buffer, length);
-#endif
+        rv = PyByteStr_AsStringAndSize(*encoded_obj, buffer, length);
         if (rv != 0) {
             /* If we free the object, pointer must be reset to NULL */
             Py_CLEAR(*encoded_obj);
-- 
1.7.1


From 19715de2a1d4311d4783ecd33a6858a09105a569 Mon Sep 17 00:00:00 2001
From: Oleg Pudeyev <oleg@bsdpower.com>
Date: Wed, 1 Jan 2014 10:42:46 -0500
Subject: [PATCH 236/236] Add PyByteStr_Check macro for dryness and uniformity

Signed-off-by: Kamil Dudka <kdudka@redhat.com>
---
 src/pycurl.c |   14 ++++----------
 1 files changed, 4 insertions(+), 10 deletions(-)

diff --git a/src/pycurl.c b/src/pycurl.c
index b9d62ef..3318e93 100644
--- a/src/pycurl.c
+++ b/src/pycurl.c
@@ -326,10 +326,12 @@ typedef struct {
 #if PY_MAJOR_VERSION >= 3
 # define PyText_FromFormat(format, str) PyUnicode_FromFormat((format), (str))
 # define PyText_FromString(str) PyUnicode_FromString(str)
+# define PyByteStr_Check(obj) PyBytes_Check(obj)
 # define PyByteStr_AsStringAndSize(obj, buffer, length) PyBytes_AsStringAndSize((obj), (buffer), (length))
 #else
 # define PyText_FromFormat(format, str) PyString_FromFormat((format), (str))
 # define PyText_FromString(str) PyString_FromString(str)
+# define PyByteStr_Check(obj) PyString_Check(obj)
 # define PyByteStr_AsStringAndSize(obj, buffer, length) PyString_AsStringAndSize((obj), (buffer), (length))
 #endif
 #define PyText_EncodedDecref(encoded) Py_XDECREF(encoded)
@@ -341,11 +343,7 @@ typedef struct {
 
 int PyText_AsStringAndSize(PyObject *obj, char **buffer, Py_ssize_t *length, PyObject **encoded_obj)
 {
-#if PY_MAJOR_VERSION >= 3
-    if (PyBytes_Check(obj)) {
-#else
-    if (PyString_Check(obj)) {
-#endif
+    if (PyByteStr_Check(obj)) {
         *encoded_obj = NULL;
         return PyByteStr_AsStringAndSize(obj, buffer, length);
     } else {
@@ -1693,11 +1691,7 @@ read_callback(char *ptr, size_t size, size_t nmemb, void *stream)
         goto verbose_error;
 
     /* handle result */
-#if PY_MAJOR_VERSION >= 3
-    if (PyBytes_Check(result)) {
-#else
-    if (PyString_Check(result)) {
-#endif
+    if (PyByteStr_Check(result)) {
         char *buf = NULL;
         Py_ssize_t obj_size = -1;
         Py_ssize_t r;
-- 
1.7.1

